Package: dano
Version: 0.8.0
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 37021
Depends: ffmpeg (>=4.2.7), libc6 (>= 2.29)
Suggests: flac (>=1.3.3)
Filename: ./dano_0.8.0_amd64.deb
Size: 4624572
MD5sum: e717cbdbe6aa3ab2d70bb93ac7644bdb
SHA1: 91e4a5b305b2d039eb7ceb4d59d92abadf01435e
SHA256: a44e7406a10a28fc35ff688fed9a0e7afdf4630ca4bd53960ffb15c9948a4e47
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/dano/blob/master/README.md
Description: A CLI tool for generating checksums of media bitstreams
 dano is a wrapper for ffmpeg that checksums the internal file streams of ffmpeg
 compatible media files, and stores them in a format which can be used to verify
 such checksums later.  This is handy, because, should you choose to change
 metadata tags, or change file names, the media checksums should remain the
 same.
Vcs-Browser: https://github.com/kimono-koans/dano
Vcs-Git: https://github.com/kimono-koans/dano

Package: dano
Version: 0.8.1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 37519
Depends: ffmpeg (>=4.2.7), libc6 (>= 2.29)
Suggests: flac (>=1.3.3)
Filename: ./dano_0.8.1_amd64.deb
Size: 4658892
MD5sum: cb7832425988da152ea605e699d0af1c
SHA1: 56526309c44dd4ace1f3ea5602ca035acb1563b5
SHA256: 717472b17f0d605b9ac565b14a74095f881f6e167076a75183735a4759f467ef
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/dano/blob/master/README.md
Description: A CLI tool for generating checksums of media bitstreams
 dano is a wrapper for ffmpeg that checksums the internal file streams of ffmpeg
 compatible media files, and stores them in a format which can be used to verify
 such checksums later.  This is handy, because, should you choose to change
 metadata tags, or change file names, the media checksums should remain the
 same.
Vcs-Browser: https://github.com/kimono-koans/dano
Vcs-Git: https://github.com/kimono-koans/dano

Package: dano
Version: 0.8.2
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 37644
Depends: ffmpeg (>=4.2.7), libc6 (>= 2.29)
Suggests: flac (>=1.3.3)
Filename: ./dano_0.8.2_amd64.deb
Size: 4668320
MD5sum: 369d97c3e8ce987486276f74b215ffc8
SHA1: 1914a73128da5daf99a5f0a7754f48b0e8074d30
SHA256: 15bf83fe45bab410f6f67c3060213539c8fe5236f044a4b6da32fe52797a7be3
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/dano/blob/master/README.md
Description: A CLI tool for generating checksums of media bitstreams
 dano is a wrapper for ffmpeg that checksums the internal file streams of ffmpeg
 compatible media files, and stores them in a format which can be used to verify
 such checksums later.  This is handy, because, should you choose to change
 metadata tags, or change file names, the media checksums should remain the
 same.
Vcs-Browser: https://github.com/kimono-koans/dano
Vcs-Git: https://github.com/kimono-koans/dano

Package: dano
Version: 0.8.3-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 38231
Depends: libc6 (>= 2.29), ffmpeg (>=4.2.7)
Suggests: flac (>=1.3.3)
Filename: ./dano_0.8.3-1_amd64.deb
Size: 4870652
MD5sum: 56c22d7f53a9a5811b1253f58dabbdbd
SHA1: b99ac587db1bb501913b3b2173cd1c1715711863
SHA256: a8184a1f3e421284f70e4a534dc2360026dffa0931c46c5f36f5800bf9b8a793
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/dano/blob/master/README.md
Description: A CLI tool for generating checksums of media bitstreams
 dano is a wrapper for ffmpeg that checksums the internal file streams of ffmpeg
 compatible media files, and stores them in a format which can be used to verify
 such checksums later.  This is handy, because, should you choose to change
 metadata tags, or change file names, the media checksums should remain the
 same.
Vcs-Browser: https://github.com/kimono-koans/dano
Vcs-Git: https://github.com/kimono-koans/dano

Package: dano
Version: 0.9.0-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 1400
Depends: ffmpeg (>=4.2.7), libc6 (>= 2.29)
Suggests: flac (>=1.3.3)
Filename: ./dano_0.9.0-1_amd64.deb
Size: 471960
MD5sum: 28441912c328f4a743a14dda5021a87b
SHA1: 41fa83f5e8ee3d9ce80db9e923bf7ca821f80424
SHA256: b9e1cb9f38bdfb2020a01bfa8a3b8be78cd40f776966557079cb4bfff0a05431
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/dano/blob/master/README.md
Description: A CLI tool for generating checksums of media bitstreams
 dano is a wrapper for ffmpeg that checksums the internal file streams of ffmpeg
 compatible media files, and stores them in a format which can be used to verify
 such checksums later.  This is handy, because, should you choose to change
 metadata tags, or change file names, the media checksums should remain the
 same.
Vcs-Browser: https://github.com/kimono-koans/dano
Vcs-Git: https://github.com/kimono-koans/dano

Package: dano
Version: 0.9.1-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 1376
Depends: ffmpeg (>=4.2.7), libc6 (>= 2.29)
Suggests: flac (>=1.3.3)
Filename: ./dano_0.9.1-1_amd64.deb
Size: 474240
MD5sum: d45bf209af7ac74ec2d720b1981b3747
SHA1: 042a332d4962c75feb3e5b070db27d2856eabda2
SHA256: cfd777fca6e116aa2d0b81386c49caa8f890a51f9324fe8c1057d2974130b5cc
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/dano/blob/master/README.md
Description: A CLI tool for generating checksums of media bitstreams
 dano is a wrapper for ffmpeg that checksums the internal file streams of ffmpeg
 compatible media files, and stores them in a format which can be used to verify
 such checksums later.  This is handy, because, should you choose to change
 metadata tags, or change file names, the media checksums should remain the
 same.

Package: httm
Version: 0.42.0-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 4022
Depends: libc6
Filename: ./httm_0.42.0-1_amd64.deb
Size: 1230020
MD5sum: 7dcdc755aa5d68e9e293e65c2c85f672
SHA1: 10556faced709ae40002605e188ab4c4621089c1
SHA256: 01302a393e24d0aa381ebedc24a3ac0b289f148d1ef14dc30805aeb59be3cca5
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.
Vcs-Browser: https://github.com/kimono-koans/httm
Vcs-Git: https://github.com/kimono-koans/httm

Package: httm
Version: 0.42.1-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 4097
Depends: libc6
Filename: ./httm_0.42.1-1_amd64.deb
Size: 1249252
MD5sum: 8deb7ee6bd517d9a946de95af43ab704
SHA1: 63a53ff11f03b37d54be18329cb0a04a412dbcd8
SHA256: e24c11a0bde298e7d8dc801a81bec6a18336ba2b0df85e96aa4d0f414bce295f
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.
Vcs-Browser: https://github.com/kimono-koans/httm
Vcs-Git: https://github.com/kimono-koans/httm

Package: httm
Version: 0.42.2-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 3469
Depends: libc6
Filename: ./httm_0.42.2-1_amd64.deb
Size: 1134992
MD5sum: 563abedca868a9efe349f0980a354b6f
SHA1: a3c1042b7a63d30c2d100ff45435f26168009828
SHA256: 8a07a24285f54fb425f288494b2ee21b7ac36c5d8d591a12482504f230c0618e
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.
Vcs-Browser: https://github.com/kimono-koans/httm
Vcs-Git: https://github.com/kimono-koans/httm

Package: httm
Version: 0.42.3-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 3641
Depends: libc6
Filename: ./httm_0.42.3-1_amd64.deb
Size: 1155692
MD5sum: 28902ca0fea209dc8a50ee711239b2d1
SHA1: 4b15008ab5b72534c3b8c3dcbef6ab14e4ec1503
SHA256: f8c5bdd824c6ece74a622a7b10a48a19023723e934df3b1755d035237558563b
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.
Vcs-Browser: https://github.com/kimono-koans/httm
Vcs-Git: https://github.com/kimono-koans/httm

Package: httm
Version: 0.42.4-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 3646
Depends: libc6
Filename: ./httm_0.42.4-1_amd64.deb
Size: 1156416
MD5sum: 1536422897e908cb903d9b87584396d7
SHA1: 8be1d0e7c470644aaf53b24e07ae5923d9a772c4
SHA256: 6e35157c96fca9f32ce5dc78af5f936be11dee32005d235c837d01897a9ad113
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.
Vcs-Browser: https://github.com/kimono-koans/httm
Vcs-Git: https://github.com/kimono-koans/httm

Package: httm
Version: 0.43.0-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 3754
Depends: libc6
Filename: ./httm_0.43.0-1_amd64.deb
Size: 1179088
MD5sum: 1465991c844a36ccbe0697e71709fbdd
SHA1: 0e523e237d8eebd8116d301c58eb4f4c1485463d
SHA256: 8cf6b2b272464cc871fbbe1823f9f3b0353c1e654d3f0b7b7bc67cdf2b20a4c1
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.
Vcs-Browser: https://github.com/kimono-koans/httm
Vcs-Git: https://github.com/kimono-koans/httm

Package: httm
Version: 0.43.1-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 3757
Depends: libc6
Filename: ./httm_0.43.1-1_amd64.deb
Size: 1179244
MD5sum: 053b904714627a2a57b3de435ec5754c
SHA1: c45bd542e70ff6b34f0d0c80bab91849524dd3a5
SHA256: 9f9c54233cc68b37b526aca723242f2a88bf82d87edbbb93e72dd32337937a12
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.
Vcs-Browser: https://github.com/kimono-koans/httm
Vcs-Git: https://github.com/kimono-koans/httm

Package: httm
Version: 0.43.2-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 3757
Depends: libc6
Filename: ./httm_0.43.2-1_amd64.deb
Size: 1178700
MD5sum: 12fcfc5097c5d712126393108db4191d
SHA1: eb89b2e0f8c87aeed68c018289517257a55bb747
SHA256: ce8dd06f6ffdfc1918d8c4dc892e3bb31a077da92c2ddb7696e1638101c0235f
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.
Vcs-Browser: https://github.com/kimono-koans/httm
Vcs-Git: https://github.com/kimono-koans/httm

Package: httm
Version: 0.44.0-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 3801
Depends: libc6
Filename: ./httm_0.44.0-1_amd64.deb
Size: 1174544
MD5sum: 6b980bc7da92158cd32a220e5fe9d1a3
SHA1: d3ec2e62f9d46f869f616d2ab0d85aa16e85a529
SHA256: 20e0183ff4dc8698a5ad2b9f7c25457a78d7308ba5c15deedd4256db6e8745f0
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.

Package: httm
Version: 0.44.1-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 3800
Depends: libc6
Filename: ./httm_0.44.1-1_amd64.deb
Size: 1173744
MD5sum: 45157ea82e57179c8174889580bdeb7b
SHA1: 807846b61a7868dbe52da3481853bd7ccb5c837b
SHA256: cc09646173ad5427d4b7e47de04fe372c74b5f5128a7dc56d0cbef11f92d03c1
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.

Package: httm
Version: 0.45.0-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 3836
Depends: libc6
Filename: ./httm_0.45.0-1_amd64.deb
Size: 1185128
MD5sum: ead83462acffa15d36954a5712e5218c
SHA1: 88773842a70697686d860dabe407c372af282347
SHA256: 75378ea7874cd965aceaa09c9186ddf5c45c1d1d4ab4a350163ed6e1547ec3cd
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.

Package: httm
Version: 0.45.1-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 3833
Depends: libc6
Filename: ./httm_0.45.1-1_amd64.deb
Size: 1184992
MD5sum: 673983982bd1e711ebbeb7dad1dd1220
SHA1: 7de9d22ca77e8e4eb9aa46000e68fb675168f387
SHA256: eb868c097b9a0229ba2b83a2fb7ef21531628f4cae288e27cb116fe028a7b1d9
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.

Package: two-percent
Version: 0.11.15-1
Architecture: amd64
Maintainer: Zhang Jinzhou <lotabout@gmail.com>
Installed-Size: 5223
Depends: libc6 (>= 2.29)
Filename: ./two-percent_0.11.15-1_amd64.deb
Size: 1477556
MD5sum: fd7ebd0de41427f68924a93310eeacae
SHA1: edb80d240eee59a7ed4dc43f33d90674b4bb7452
SHA256: 7c98bcb740bb5cfcee1126fcfb8c7179fa3ed6fb875803254df5701c300fc061
Priority: optional
Homepage: https://github.com/kimono-koans/two_percent
Description: Fuzzy Finder in rust!
 <p align="center">
   <a href="https://crates.io/crates/skim">
     <img src="https://img.shields.io/crates/v/skim.svg" alt="Crates.io" />
   </a>
   <a
 href="https://github.com/lotabout/skim/actions?query=workflow%3A%22Build+%26+Test%22">
     <img
 src="https://github.com/lotabout/skim/workflows/Build%20&%20Test/badge.svg"
 alt="Build & Test" />
   </a>
   <a href="https://repology.org/project/skim/versions">
     <img src="https://repology.org/badge/tiny-repos/skim.svg" alt="Packaging
 status" />
   </a>
   <a href="https://discord.gg/23PuxttufP">
     <img alt="Skim Discord"
 src="https://img.shields.io/discord/1031830957432504361?label=&color=7389d8&labelColor=6a7ec2&logoColor=ffffff&logo=discord"
 />
   </a>
 </p>
 .
 *Note: `two_percent` is a fork of
 [skim](https://github.com/lotabout/skim/tree/291fc34c58b1670a5e8c95f1e8f930b82c030b19)
 for use with [httm](https://github.com/kimono-koans/httm).*
 .
 > Life is short, skim!
 .
 Half of our life is spent on navigation: files, lines, commands… You need
 skim!
 It is a general fuzzy finder that saves you time.
 .
 [![skim
 demo](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm.svg)](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm)
 .
 skim provides a single executable: `sk`. Basically anywhere you would want to
 use
 `grep`, try `sk` instead.
 .
 # Table of contents
 .
 - [Installation](#installation)
 - [Usage](#usage)
   - [As Filter](#as-filter)
   - [As Interactive Interface](#as-interactive-interface)
   - [Key Bindings](#key-bindings)
   - [Search Syntax](#search-syntax)
   - [Exit code](#exit-code)
 - [Customization](#customization)
   - [Keymap to redefine](#keymap)
   - [Sort Criteria](#sort-criteria)
   - [Color Scheme](#color-scheme)
   - [Misc](#misc)
 - [Advance Topics](#advance-topics)
   - [Interactive Mode](#interactive-mode)
   - [Executing external programs](#executing-external-programs)
   - [Preview Window](#preview-window)
   - [Fields Support](#fields-support)
   - [Use as a Library](#use-as-a-library)
 - [FAQ](#faq)
   - [How to ignore files?](#how-to-ignore-files)
   - [Some files are not shown in vim
 plugin](#some-files-are-not-shown-in-vim-plugin)
 - [Differences to fzf](#differences-to-fzf)
 - [How to contribute](#how-to-contribute)
 .
 # Installation
 .
 The skim project contains several components:
 .
 1. `sk` executable -- the core.
 2. `sk-tmux` -- script for launching `sk` in a tmux pane.
 3. Vim/Nvim plugin -- to call `sk` inside Vim/Nvim. check
 [skim.vim](https://github.com/lotabout/skim.vim) for more Vim support.
 .
 ## Package Managers
 .
 | Distribution   | Package Manager   | Command                      |
 | -------------- | ----------------- | ---------------------------- |
 | macOS          | Homebrew          | `brew install sk`            |
 | macOS          | MacPorts          | `sudo port install skim`     |
 | Fedora         | dnf               | `dnf install skim`           |
 | Alpine         | apk               | `apk add skim`               |
 | Arch           | pacman            | `pacman -S skim`             |
 | Gentoo         | Portage           | `emerge --ask app-misc/skim` |
 .
 See [repology](https://repology.org/project/skim/versions) for a comprehensive
 overview of package availability.
 .
 ## Install as Vim plugin
 .
 Via vim-plug (recommended):
 .
 ```vim
 Plug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install' }
 ```
 .
 ## Hard Core
 .
 Any of the following applies:
 .
 - Using Git
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     ~/.skim/install
     ```
 .
 - Using Binary: directly [download the sk
 executable](https://github.com/lotabout/skim/releases).
 - Install from [crates.io](https://crates.io/): `cargo install skim`
 - Build Manually
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     cd ~/.skim
     cargo install
     cargo build --release
     # put the resulting `target/release/sk` executable on your PATH.
     ```
 .
 # Usage
 .
 skim can be used as a general filter (like `grep`) or as an interactive
 interface for invoking commands.
 .
 ## As filter
 .
 Try the following
 .
 ```bash
 # directly invoke skim
 sk
 .
 # or pipe some input to it: (press TAB key select multiple items with -m
 enabled)
 vim $(find . -name "*.rs" | sk -m)
 ```
 .
 The above command will allow you to select files with ".rs" extension and open
 the ones you selected in Vim.
 .
 ## As Interactive Interface
 .
 `skim` can invoke other commands dynamically. Normally you would want to
 integrate it with [grep](https://www.gnu.org/software/grep/),
 [ack](https://github.com/petdance/ack2),
 [ag](https://github.com/ggreer/the_silver_searcher), or
 [rg](https://github.com/BurntSushi/ripgrep) for searching contents in a
 project directory:
 .
 ```sh
 # works with grep
 sk --ansi -i -c 'grep -rI --color=always --line-number "{}" .'
 # works with ack
 sk --ansi -i -c 'ack --color "{}"'
 # works with ag
 sk --ansi -i -c 'ag --color "{}"'
 # works with rg
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 ![interactive mode
 demo](https://cloud.githubusercontent.com/assets/1527040/21603930/655d859a-d1db-11e6-9fec-c25099d30a12.gif)
 .
 ## Key Bindings
 .
 Some commonly used key bindings:
 .
 | Key               | Action                                     |
 |------------------:|--------------------------------------------|
 | Enter             | Accept (select current one and quit)       |
 | ESC/Ctrl-G        | Abort                                      |
 | Ctrl-P/Up         | Move cursor up                             |
 | Ctrl-N/Down       | Move cursor Down                           |
 | TAB               | Toggle selection and move down (with `-m`) |
 | Shift-TAB         | Toggle selection and move up (with `-m`)   |
 .
 For full list of key bindings, check out the [man
 page](https://github.com/lotabout/skim/blob/master/man/man1/sk.1) (`man sk`).
 .
 ## Search Syntax
 .
 `skim` borrowed `fzf`'s syntax for matching items:
 .
 | Token    | Match type                 | Description                       |
 |----------|----------------------------|-----------------------------------|
 | `text`   | fuzzy-match                | items that match `text`           |
 | `^music` | prefix-exact-match         | items that start with `music`     |
 | `.mp3$`  | suffix-exact-match         | items that end with `.mp3`        |
 | `'wild`  | exact-match (quoted)       | items that include `wild`         |
 | `!fire`  | inverse-exact-match        | items that do not include `fire`  |
 | `!.mp3$` | inverse-suffix-exact-match | items that do not end with `.mp3` |
 .
 `skim` also supports the combination of tokens.
 .
 - Whitespace has the meaning of `AND`. With the term `src main`, `skim` will
 search
     for items that match **both** `src` and `main`.
 - ` | ` means `OR` (note the spaces around `|`). With the term `.md$ |
     .markdown$`, `skim` will search for items ends with either `.md` or
     `.markdown`.
 - `OR` has higher precedence. So `readme .md$ | .markdown$` is grouped into
     `readme AND (.md$ OR .markdown$)`.
 .
 In case that you want to use regular expressions, `skim` provides `regex` mode:
 .
 ```sh
 sk --regex
 ```
 .
 You can switch to `regex` mode dynamically by pressing `Ctrl-R` (Rotate Mode).
 .
 ## exit code
 .
 | Exit Code | Meaning                           |
 |-----------|-----------------------------------|
 | 0         | Exit normally                     |
 | 1         | No Match found                    |
 | 130       | Abort by Ctrl-C/Ctrl-G/ESC/etc... |
 .
 # Customization
 .
 The doc here is only a preview, please check the man page (`man sk`) for a full
 list of options.
 .
 ## Keymap
 .
 Specify the bindings with comma separated pairs (no space allowed), example:
 .
 ```sh
 sk --bind 'alt-a:select-all,alt-d:deselect-all'
 ```
 .
 Additionally, use `+` to concatenate actions, such as `execute-silent(echo {} |
 pbcopy)+abort`.
 .
 See the *KEY BINDINGS* section of the man page for details.
 .
 ## Sort Criteria
 .
 There are five sort keys for results: `score, index, begin, end, length`, you
 can
 specify how the records are sorted by `sk --tiebreak score,index,-begin` or any
 other order you want.
 .
 ## Color Scheme
 .
 It is a high chance that you are a better artist than me. Luckily you won't
 be stuck with the default colors, `skim` supports customization of the color
 scheme.
 .
 ```sh
 --color=[BASE_SCHEME][,COLOR:ANSI]
 ```
 .
 The configuration of colors starts with the name of the base color scheme,
 followed by custom color mappings. For example:
 .
 ```sh
 sk --color=current_bg:24
 sk --color=light,fg:232,bg:255,current_bg:116,info:27
 ```
 .
 See `--color` option in the man page for details.
 .
 ## Misc
 .
 - `--ansi`: to parse ANSI color codes (e.g., `\e[32mABC`) of the data source
 - `--regex`: use the query as regular expression to match the data source
 .
 # Advanced Topics
 .
 ## Interactive mode
 .
 With "interactive mode", you could invoke command dynamically. Try out:
 .
 ```sh
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 How it works?
 .
 ![skim's interactive
 mode](https://user-images.githubusercontent.com/1527040/53381293-461ce380-39ab-11e9-8e86-7c3bbfd557bc.png)
 .
 - Skim could accept two kinds of source: command output or piped input
 - Skim has two kinds of prompts: A query prompt to specify the query pattern
 and a
     command prompt to specify the "arguments" of the command
 - `-c` is used to specify the command to execute while defaults to
 `SKIM_DEFAULT_COMMAND`
 - `-i` is to tell skim open command prompt on startup, which will show `c>` by
 default.
 .
 If you want to further narrow down the results returned by the command, press
 `Ctrl-Q` to toggle interactive mode.
 .
 ## Executing external programs
 .
 You can set up key bindings for starting external processes without leaving
 skim (`execute`, `execute-silent`).
 .
 ```sh
 # Press F1 to open the file with less without leaving skim
 # Press CTRL-Y to copy the line to clipboard and aborts skim (requires pbcopy)
 sk --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} |
 pbcopy)+abort'
 ```
 .
 ## Preview Window
 .
 This is a great feature of fzf that skim borrows. For example, we use 'ag' to
 find the matched lines, once we narrow down to the target lines, we want to
 finally decide which lines to pick by checking the context around the line.
 `grep` and `ag` has an option `--context`, skim can do better with preview
 window. For example:
 .
 ```sh
 sk --ansi -i -c 'ag --color "{}"' --preview "preview.sh {}"
 ```
 .
 (Note the
 [preview.sh](https://github.com/junegunn/fzf.vim/blob/master/bin/preview.sh) is
 a script to print the context given filename:lines:columns)
 You got things like this:
 .
 ![preview
 demo](https://user-images.githubusercontent.com/1527040/30677573-0cee622e-9ebf-11e7-8316-c741324ecb3a.png)
 .
 ### How does it work?
 .
 If the preview command is given by the `--preview` option, skim will replace
 the
 `{}` with the current highlighted line surrounded by single quotes, call the
 command to get the output, and print the output on the preview window.
 .
 Sometimes you don't need the whole line for invoking the command. In this case
 you can use `{}`, `{1..}`, `{..3}` or `{1..5}` to select the fields. The
 syntax is explained in the section "Fields Support".
 .
 Last, you might want to configure the position of preview windows, use
 `--preview-window`.
 .
 - `--preview-window up:30%` to put the window in the up position with height
     30% of the total height of skim.
 - `--preview-window left:10:wrap`, to specify the `wrap` allows the preview
     window to wrap the output of the preview command.
 - `--preview-window wrap:hidden` to hide the preview window at startup, later
     it can be shown by the action `toggle-preview`.
 .
 ## Fields support
 .
 Normally only plugin users need to understand this.
 .
 For example, you have the data source with the format:
 .
 ```sh
 <filename>:<line number>:<column number>
 ```
 .
 However, you want to search `<filename>` only when typing in queries. That
 means when you type `21`, you want to find a `<filename>` that contains `21`,
 but not matching line number or column number.
 .
 You can use `sk --delimiter ':' --nth 1` to achieve this.
 .
 Also you can use `--with-nth` to re-arrange the order of fields.
 .
 **Range Syntax**
 .
 - `<num>` -- to specify the `num`-th fields, starting with 1.
 - `start..` -- starting from the `start`-th fields, and the rest.
 - `..end` -- starting from the `0`-th field, all the way to `end`-th field,
     including `end`.
 - `start..end` -- starting from `start`-th field, all the way to `end`-th
     field, including `end`.
 .
 ## Use as a library
 .
 Skim can be used as a library in your Rust crates.
 .
 First, add skim into your `Cargo.toml`:
 .
 ```toml
 [dependencies]
 skim = "*"
 ```
 .
 Then try to run this simple example:
 .
 ```rust
 extern crate skim;
 use skim::prelude::*;
 use std::io::Cursor;
 .
 pub fn main() {
     let options = SkimOptionsBuilder::default()
         .height(Some("50%"))
         .multi(true)
         .build()
         .unwrap();
 .
     let input = "aaaaa\nbbbb\nccc".to_string();
 .
     // `SkimItemReader` is a helper to turn any `BufRead` into a stream of
 `SkimItem`
     // `SkimItem` was implemented for `AsRef<str>` by default
     let item_reader = SkimItemReader::default();
     let items = item_reader.of_bufread(Cursor::new(input));
 .
     // `run_with` would read and show items from the stream
     let selected_items = Skim::run_with(&options, Some(items))
         .map(|out| out.selected_items)
         .unwrap_or_else(|| Vec::new());
 .
     for item in selected_items.iter() {
         print!("{}{}", item.output(), "\n");
     }
 }
 ```
 .
 Given an `Option<SkimItemReceiver>`, skim will read items accordingly, do its
 job and bring us back the user selection including the selected items, the
 query, etc. Note that:
 .
 - `SkimItemReceiver` is `crossbeam::channel::Receiver<Arc<dyn SkimItem>>`
 - If it is none, it will invoke the given command and read items from command
 output
 - Otherwise, it will read the items from the (crossbeam) channel.
 .
 Trait `SkimItem` is provided to customize how a line could be displayed,
 compared and previewed. It is implemented by default for `AsRef<str>`
 .
 Plus, `SkimItemReader` is a helper to convert a `BufRead` into
 `SkimItemReceiver` (we can easily turn a `File` for `String` into `BufRead`).
 So that you could deal with strings or files easily.
 .
 Check more examples under
 [examples/](https://github.com/lotabout/skim/tree/master/examples) directory.
 .
 # FAQ
 .
 ## How to ignore files?
 .
 Skim invokes `find .` to fetch a list of files for filtering. You can override
 that by setting the environment variable `SKIM_DEFAULT_COMMAND`. For example:
 .
 ```sh
 SKIM_DEFAULT_COMMAND="fd --type f || git ls-tree -r --name-only HEAD || rg
 --files || find ."
 sk
 ```
 .
 You could put it in your `.bashrc` or `.zshrc` if you like it to be default.
 .
 ## Some files are not shown in Vim plugin
 .
 If you use the Vim plugin and execute the `:SK` command, you might find some
 of your files not shown.
 .
 As described in [#3](https://github.com/lotabout/skim/issues/3), in the Vim
 plugin, `SKIM_DEFAULT_COMMAND` is set to the command by default:
 .
 ```vim
 let $SKIM_DEFAULT_COMMAND = "git ls-tree -r --name-only HEAD || rg --files ||
 ag -l -g \"\" || find ."
 ```
 .
 That means, the files not recognized by git will not shown. Either override the
 default with `let $SKIM_DEFAULT_COMMAND = ''` or find the missing file by
 yourself.
 .
 # Differences to fzf
 .
 [fzf](https://github.com/junegunn/fzf) is a command-line fuzzy finder written
 in Go and [skim](https://github.com/lotabout/skim) tries to implement a new one
 in Rust!
 .
 This project is written from scratch. Some decisions of implementation are
 different from fzf. For example:
 .
 1. `skim` is a binary as well as a library while fzf is only a binary.
 2. `skim` has an interactive mode.
 3. `skim` supports pre-selection
 4. The fuzzy search algorithm is different.
 5. ~~UI of showing matched items. `fzf` will show only the range matched while
    `skim` will show each character matched.~~ (fzf has this now)
 6. ~~`skim`'s range syntax is Git style~~: now it is the same with fzf.
 .
 # How to contribute
 .
 [Create new issues](https://github.com/lotabout/skim/issues/new) if you meet
 any bugs
 or have any ideas. Pull requests are warmly welcomed.
 .
 # Troubleshooting
 .
 ## No line feed issues with nix , FreeBSD, termux
 .
 If you encounter display issues like:
 .
 ```bash
 $ for n in {1..10}; do echo "$n"; done | sk
   0/10 0/0.> 10/10  10  9  8  7  6  5  4  3  2> 1
 ```
 .
 For example
 .
 - <https://github.com/lotabout/skim/issues/412>
 - <https://github.com/lotabout/skim/issues/455>
 .
 You need to set TERMINFO or TERMINFO_DIRS to the path to a correct terminfo
 database path
 .
 For example, with termux, you can add in your bashr:
 .
 ```
 export TERMINFO=/data/data/com.termux/files/usr/share/terminfo
 ```
Vcs-Browser: https://github.com/kimono-koans/two_percent
Vcs-Git: https://github.com/kimono-koans/two_percent

Package: two-percent
Version: 0.11.16-1
Architecture: amd64
Maintainer: Zhang Jinzhou <lotabout@gmail.com>
Installed-Size: 5158
Depends: libc6 (>= 2.29)
Filename: ./two-percent_0.11.16-1_amd64.deb
Size: 1454920
MD5sum: 88ee7af5e6ec572a5d0d84aa602c0ae2
SHA1: 40e762465b2d57a0febd7287705d3c52177d1321
SHA256: 829f4fbebcf878884a27e9f2ad40d5920cafe74dba1143f488801031f36864cf
Priority: optional
Homepage: https://github.com/kimono-koans/two_percent
Description: Fuzzy Finder in rust!
 <p align="center">
   <a href="https://crates.io/crates/skim">
     <img src="https://img.shields.io/crates/v/skim.svg" alt="Crates.io" />
   </a>
   <a
 href="https://github.com/lotabout/skim/actions?query=workflow%3A%22Build+%26+Test%22">
     <img
 src="https://github.com/lotabout/skim/workflows/Build%20&%20Test/badge.svg"
 alt="Build & Test" />
   </a>
   <a href="https://repology.org/project/skim/versions">
     <img src="https://repology.org/badge/tiny-repos/skim.svg" alt="Packaging
 status" />
   </a>
   <a href="https://discord.gg/23PuxttufP">
     <img alt="Skim Discord"
 src="https://img.shields.io/discord/1031830957432504361?label=&color=7389d8&labelColor=6a7ec2&logoColor=ffffff&logo=discord"
 />
   </a>
 </p>
 .
 *Note: `two_percent` is a fork of
 [skim](https://github.com/lotabout/skim/tree/291fc34c58b1670a5e8c95f1e8f930b82c030b19)
 for use with [httm](https://github.com/kimono-koans/httm).*
 .
 > Life is short, skim!
 .
 Half of our life is spent on navigation: files, lines, commands… You need
 skim!
 It is a general fuzzy finder that saves you time.
 .
 [![skim
 demo](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm.svg)](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm)
 .
 skim provides a single executable: `sk`. Basically anywhere you would want to
 use
 `grep`, try `sk` instead.
 .
 # Table of contents
 .
 - [Installation](#installation)
 - [Usage](#usage)
   - [As Filter](#as-filter)
   - [As Interactive Interface](#as-interactive-interface)
   - [Key Bindings](#key-bindings)
   - [Search Syntax](#search-syntax)
   - [Exit code](#exit-code)
 - [Customization](#customization)
   - [Keymap to redefine](#keymap)
   - [Sort Criteria](#sort-criteria)
   - [Color Scheme](#color-scheme)
   - [Misc](#misc)
 - [Advance Topics](#advance-topics)
   - [Interactive Mode](#interactive-mode)
   - [Executing external programs](#executing-external-programs)
   - [Preview Window](#preview-window)
   - [Fields Support](#fields-support)
   - [Use as a Library](#use-as-a-library)
 - [FAQ](#faq)
   - [How to ignore files?](#how-to-ignore-files)
   - [Some files are not shown in vim
 plugin](#some-files-are-not-shown-in-vim-plugin)
 - [Differences to fzf](#differences-to-fzf)
 - [How to contribute](#how-to-contribute)
 .
 # Installation
 .
 The skim project contains several components:
 .
 1. `sk` executable -- the core.
 2. `sk-tmux` -- script for launching `sk` in a tmux pane.
 3. Vim/Nvim plugin -- to call `sk` inside Vim/Nvim. check
 [skim.vim](https://github.com/lotabout/skim.vim) for more Vim support.
 .
 ## Package Managers
 .
 | Distribution   | Package Manager   | Command                      |
 | -------------- | ----------------- | ---------------------------- |
 | macOS          | Homebrew          | `brew install sk`            |
 | macOS          | MacPorts          | `sudo port install skim`     |
 | Fedora         | dnf               | `dnf install skim`           |
 | Alpine         | apk               | `apk add skim`               |
 | Arch           | pacman            | `pacman -S skim`             |
 | Gentoo         | Portage           | `emerge --ask app-misc/skim` |
 .
 See [repology](https://repology.org/project/skim/versions) for a comprehensive
 overview of package availability.
 .
 ## Install as Vim plugin
 .
 Via vim-plug (recommended):
 .
 ```vim
 Plug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install' }
 ```
 .
 ## Hard Core
 .
 Any of the following applies:
 .
 - Using Git
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     ~/.skim/install
     ```
 .
 - Using Binary: directly [download the sk
 executable](https://github.com/lotabout/skim/releases).
 - Install from [crates.io](https://crates.io/): `cargo install skim`
 - Build Manually
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     cd ~/.skim
     cargo install
     cargo build --release
     # put the resulting `target/release/sk` executable on your PATH.
     ```
 .
 # Usage
 .
 skim can be used as a general filter (like `grep`) or as an interactive
 interface for invoking commands.
 .
 ## As filter
 .
 Try the following
 .
 ```bash
 # directly invoke skim
 sk
 .
 # or pipe some input to it: (press TAB key select multiple items with -m
 enabled)
 vim $(find . -name "*.rs" | sk -m)
 ```
 .
 The above command will allow you to select files with ".rs" extension and open
 the ones you selected in Vim.
 .
 ## As Interactive Interface
 .
 `skim` can invoke other commands dynamically. Normally you would want to
 integrate it with [grep](https://www.gnu.org/software/grep/),
 [ack](https://github.com/petdance/ack2),
 [ag](https://github.com/ggreer/the_silver_searcher), or
 [rg](https://github.com/BurntSushi/ripgrep) for searching contents in a
 project directory:
 .
 ```sh
 # works with grep
 sk --ansi -i -c 'grep -rI --color=always --line-number "{}" .'
 # works with ack
 sk --ansi -i -c 'ack --color "{}"'
 # works with ag
 sk --ansi -i -c 'ag --color "{}"'
 # works with rg
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 ![interactive mode
 demo](https://cloud.githubusercontent.com/assets/1527040/21603930/655d859a-d1db-11e6-9fec-c25099d30a12.gif)
 .
 ## Key Bindings
 .
 Some commonly used key bindings:
 .
 | Key               | Action                                     |
 |------------------:|--------------------------------------------|
 | Enter             | Accept (select current one and quit)       |
 | ESC/Ctrl-G        | Abort                                      |
 | Ctrl-P/Up         | Move cursor up                             |
 | Ctrl-N/Down       | Move cursor Down                           |
 | TAB               | Toggle selection and move down (with `-m`) |
 | Shift-TAB         | Toggle selection and move up (with `-m`)   |
 .
 For full list of key bindings, check out the [man
 page](https://github.com/lotabout/skim/blob/master/man/man1/sk.1) (`man sk`).
 .
 ## Search Syntax
 .
 `skim` borrowed `fzf`'s syntax for matching items:
 .
 | Token    | Match type                 | Description                       |
 |----------|----------------------------|-----------------------------------|
 | `text`   | fuzzy-match                | items that match `text`           |
 | `^music` | prefix-exact-match         | items that start with `music`     |
 | `.mp3$`  | suffix-exact-match         | items that end with `.mp3`        |
 | `'wild`  | exact-match (quoted)       | items that include `wild`         |
 | `!fire`  | inverse-exact-match        | items that do not include `fire`  |
 | `!.mp3$` | inverse-suffix-exact-match | items that do not end with `.mp3` |
 .
 `skim` also supports the combination of tokens.
 .
 - Whitespace has the meaning of `AND`. With the term `src main`, `skim` will
 search
     for items that match **both** `src` and `main`.
 - ` | ` means `OR` (note the spaces around `|`). With the term `.md$ |
     .markdown$`, `skim` will search for items ends with either `.md` or
     `.markdown`.
 - `OR` has higher precedence. So `readme .md$ | .markdown$` is grouped into
     `readme AND (.md$ OR .markdown$)`.
 .
 In case that you want to use regular expressions, `skim` provides `regex` mode:
 .
 ```sh
 sk --regex
 ```
 .
 You can switch to `regex` mode dynamically by pressing `Ctrl-R` (Rotate Mode).
 .
 ## exit code
 .
 | Exit Code | Meaning                           |
 |-----------|-----------------------------------|
 | 0         | Exit normally                     |
 | 1         | No Match found                    |
 | 130       | Abort by Ctrl-C/Ctrl-G/ESC/etc... |
 .
 # Customization
 .
 The doc here is only a preview, please check the man page (`man sk`) for a full
 list of options.
 .
 ## Keymap
 .
 Specify the bindings with comma separated pairs (no space allowed), example:
 .
 ```sh
 sk --bind 'alt-a:select-all,alt-d:deselect-all'
 ```
 .
 Additionally, use `+` to concatenate actions, such as `execute-silent(echo {} |
 pbcopy)+abort`.
 .
 See the *KEY BINDINGS* section of the man page for details.
 .
 ## Sort Criteria
 .
 There are five sort keys for results: `score, index, begin, end, length`, you
 can
 specify how the records are sorted by `sk --tiebreak score,index,-begin` or any
 other order you want.
 .
 ## Color Scheme
 .
 It is a high chance that you are a better artist than me. Luckily you won't
 be stuck with the default colors, `skim` supports customization of the color
 scheme.
 .
 ```sh
 --color=[BASE_SCHEME][,COLOR:ANSI]
 ```
 .
 The configuration of colors starts with the name of the base color scheme,
 followed by custom color mappings. For example:
 .
 ```sh
 sk --color=current_bg:24
 sk --color=light,fg:232,bg:255,current_bg:116,info:27
 ```
 .
 See `--color` option in the man page for details.
 .
 ## Misc
 .
 - `--ansi`: to parse ANSI color codes (e.g., `\e[32mABC`) of the data source
 - `--regex`: use the query as regular expression to match the data source
 .
 # Advanced Topics
 .
 ## Interactive mode
 .
 With "interactive mode", you could invoke command dynamically. Try out:
 .
 ```sh
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 How it works?
 .
 ![skim's interactive
 mode](https://user-images.githubusercontent.com/1527040/53381293-461ce380-39ab-11e9-8e86-7c3bbfd557bc.png)
 .
 - Skim could accept two kinds of source: command output or piped input
 - Skim has two kinds of prompts: A query prompt to specify the query pattern
 and a
     command prompt to specify the "arguments" of the command
 - `-c` is used to specify the command to execute while defaults to
 `SKIM_DEFAULT_COMMAND`
 - `-i` is to tell skim open command prompt on startup, which will show `c>` by
 default.
 .
 If you want to further narrow down the results returned by the command, press
 `Ctrl-Q` to toggle interactive mode.
 .
 ## Executing external programs
 .
 You can set up key bindings for starting external processes without leaving
 skim (`execute`, `execute-silent`).
 .
 ```sh
 # Press F1 to open the file with less without leaving skim
 # Press CTRL-Y to copy the line to clipboard and aborts skim (requires pbcopy)
 sk --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} |
 pbcopy)+abort'
 ```
 .
 ## Preview Window
 .
 This is a great feature of fzf that skim borrows. For example, we use 'ag' to
 find the matched lines, once we narrow down to the target lines, we want to
 finally decide which lines to pick by checking the context around the line.
 `grep` and `ag` has an option `--context`, skim can do better with preview
 window. For example:
 .
 ```sh
 sk --ansi -i -c 'ag --color "{}"' --preview "preview.sh {}"
 ```
 .
 (Note the
 [preview.sh](https://github.com/junegunn/fzf.vim/blob/master/bin/preview.sh) is
 a script to print the context given filename:lines:columns)
 You got things like this:
 .
 ![preview
 demo](https://user-images.githubusercontent.com/1527040/30677573-0cee622e-9ebf-11e7-8316-c741324ecb3a.png)
 .
 ### How does it work?
 .
 If the preview command is given by the `--preview` option, skim will replace
 the
 `{}` with the current highlighted line surrounded by single quotes, call the
 command to get the output, and print the output on the preview window.
 .
 Sometimes you don't need the whole line for invoking the command. In this case
 you can use `{}`, `{1..}`, `{..3}` or `{1..5}` to select the fields. The
 syntax is explained in the section "Fields Support".
 .
 Last, you might want to configure the position of preview windows, use
 `--preview-window`.
 .
 - `--preview-window up:30%` to put the window in the up position with height
     30% of the total height of skim.
 - `--preview-window left:10:wrap`, to specify the `wrap` allows the preview
     window to wrap the output of the preview command.
 - `--preview-window wrap:hidden` to hide the preview window at startup, later
     it can be shown by the action `toggle-preview`.
 .
 ## Fields support
 .
 Normally only plugin users need to understand this.
 .
 For example, you have the data source with the format:
 .
 ```sh
 <filename>:<line number>:<column number>
 ```
 .
 However, you want to search `<filename>` only when typing in queries. That
 means when you type `21`, you want to find a `<filename>` that contains `21`,
 but not matching line number or column number.
 .
 You can use `sk --delimiter ':' --nth 1` to achieve this.
 .
 Also you can use `--with-nth` to re-arrange the order of fields.
 .
 **Range Syntax**
 .
 - `<num>` -- to specify the `num`-th fields, starting with 1.
 - `start..` -- starting from the `start`-th fields, and the rest.
 - `..end` -- starting from the `0`-th field, all the way to `end`-th field,
     including `end`.
 - `start..end` -- starting from `start`-th field, all the way to `end`-th
     field, including `end`.
 .
 ## Use as a library
 .
 Skim can be used as a library in your Rust crates.
 .
 First, add skim into your `Cargo.toml`:
 .
 ```toml
 [dependencies]
 skim = "*"
 ```
 .
 Then try to run this simple example:
 .
 ```rust
 extern crate skim;
 use skim::prelude::*;
 use std::io::Cursor;
 .
 pub fn main() {
     let options = SkimOptionsBuilder::default()
         .height(Some("50%"))
         .multi(true)
         .build()
         .unwrap();
 .
     let input = "aaaaa\nbbbb\nccc".to_string();
 .
     // `SkimItemReader` is a helper to turn any `BufRead` into a stream of
 `SkimItem`
     // `SkimItem` was implemented for `AsRef<str>` by default
     let item_reader = SkimItemReader::default();
     let items = item_reader.of_bufread(Cursor::new(input));
 .
     // `run_with` would read and show items from the stream
     let selected_items = Skim::run_with(&options, Some(items))
         .map(|out| out.selected_items)
         .unwrap_or_else(|| Vec::new());
 .
     for item in selected_items.iter() {
         print!("{}{}", item.output(), "\n");
     }
 }
 ```
 .
 Given an `Option<SkimItemReceiver>`, skim will read items accordingly, do its
 job and bring us back the user selection including the selected items, the
 query, etc. Note that:
 .
 - `SkimItemReceiver` is `crossbeam::channel::Receiver<Arc<dyn SkimItem>>`
 - If it is none, it will invoke the given command and read items from command
 output
 - Otherwise, it will read the items from the (crossbeam) channel.
 .
 Trait `SkimItem` is provided to customize how a line could be displayed,
 compared and previewed. It is implemented by default for `AsRef<str>`
 .
 Plus, `SkimItemReader` is a helper to convert a `BufRead` into
 `SkimItemReceiver` (we can easily turn a `File` for `String` into `BufRead`).
 So that you could deal with strings or files easily.
 .
 Check more examples under
 [examples/](https://github.com/lotabout/skim/tree/master/examples) directory.
 .
 # FAQ
 .
 ## How to ignore files?
 .
 Skim invokes `find .` to fetch a list of files for filtering. You can override
 that by setting the environment variable `SKIM_DEFAULT_COMMAND`. For example:
 .
 ```sh
 SKIM_DEFAULT_COMMAND="fd --type f || git ls-tree -r --name-only HEAD || rg
 --files || find ."
 sk
 ```
 .
 You could put it in your `.bashrc` or `.zshrc` if you like it to be default.
 .
 ## Some files are not shown in Vim plugin
 .
 If you use the Vim plugin and execute the `:SK` command, you might find some
 of your files not shown.
 .
 As described in [#3](https://github.com/lotabout/skim/issues/3), in the Vim
 plugin, `SKIM_DEFAULT_COMMAND` is set to the command by default:
 .
 ```vim
 let $SKIM_DEFAULT_COMMAND = "git ls-tree -r --name-only HEAD || rg --files ||
 ag -l -g \"\" || find ."
 ```
 .
 That means, the files not recognized by git will not shown. Either override the
 default with `let $SKIM_DEFAULT_COMMAND = ''` or find the missing file by
 yourself.
 .
 # Differences to fzf
 .
 [fzf](https://github.com/junegunn/fzf) is a command-line fuzzy finder written
 in Go and [skim](https://github.com/lotabout/skim) tries to implement a new one
 in Rust!
 .
 This project is written from scratch. Some decisions of implementation are
 different from fzf. For example:
 .
 1. `skim` is a binary as well as a library while fzf is only a binary.
 2. `skim` has an interactive mode.
 3. `skim` supports pre-selection
 4. The fuzzy search algorithm is different.
 5. ~~UI of showing matched items. `fzf` will show only the range matched while
    `skim` will show each character matched.~~ (fzf has this now)
 6. ~~`skim`'s range syntax is Git style~~: now it is the same with fzf.
 .
 # How to contribute
 .
 [Create new issues](https://github.com/lotabout/skim/issues/new) if you meet
 any bugs
 or have any ideas. Pull requests are warmly welcomed.
 .
 # Troubleshooting
 .
 ## No line feed issues with nix , FreeBSD, termux
 .
 If you encounter display issues like:
 .
 ```bash
 $ for n in {1..10}; do echo "$n"; done | sk
   0/10 0/0.> 10/10  10  9  8  7  6  5  4  3  2> 1
 ```
 .
 For example
 .
 - <https://github.com/lotabout/skim/issues/412>
 - <https://github.com/lotabout/skim/issues/455>
 .
 You need to set TERMINFO or TERMINFO_DIRS to the path to a correct terminfo
 database path
 .
 For example, with termux, you can add in your bashr:
 .
 ```
 export TERMINFO=/data/data/com.termux/files/usr/share/terminfo
 ```
Vcs-Browser: https://github.com/kimono-koans/two_percent
Vcs-Git: https://github.com/kimono-koans/two_percent

Package: two-percent
Version: 0.11.17-1
Architecture: amd64
Maintainer: Zhang Jinzhou <lotabout@gmail.com>
Installed-Size: 5154
Depends: libc6 (>= 2.29)
Filename: ./two-percent_0.11.17-1_amd64.deb
Size: 1454808
MD5sum: 956b6aa6c3f5cbe28b2b8a91e28012a5
SHA1: 0bb2c1af96c9796b8e797575e724bfafb6c3b831
SHA256: 37328a15db2175c1797dec0c1051c4da318b35b62dbb400e37eb772dc33894e2
Priority: optional
Homepage: https://github.com/kimono-koans/two_percent
Description: Fuzzy Finder in rust!
 <p align="center">
   <a href="https://crates.io/crates/skim">
     <img src="https://img.shields.io/crates/v/skim.svg" alt="Crates.io" />
   </a>
   <a
 href="https://github.com/lotabout/skim/actions?query=workflow%3A%22Build+%26+Test%22">
     <img
 src="https://github.com/lotabout/skim/workflows/Build%20&%20Test/badge.svg"
 alt="Build & Test" />
   </a>
   <a href="https://repology.org/project/skim/versions">
     <img src="https://repology.org/badge/tiny-repos/skim.svg" alt="Packaging
 status" />
   </a>
   <a href="https://discord.gg/23PuxttufP">
     <img alt="Skim Discord"
 src="https://img.shields.io/discord/1031830957432504361?label=&color=7389d8&labelColor=6a7ec2&logoColor=ffffff&logo=discord"
 />
   </a>
 </p>
 .
 *Note: `two_percent` is a fork of
 [skim](https://github.com/lotabout/skim/tree/291fc34c58b1670a5e8c95f1e8f930b82c030b19)
 for use with [httm](https://github.com/kimono-koans/httm).*
 .
 > Life is short, skim!
 .
 Half of our life is spent on navigation: files, lines, commands… You need
 skim!
 It is a general fuzzy finder that saves you time.
 .
 [![skim
 demo](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm.svg)](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm)
 .
 skim provides a single executable: `sk`. Basically anywhere you would want to
 use
 `grep`, try `sk` instead.
 .
 # Table of contents
 .
 - [Installation](#installation)
 - [Usage](#usage)
   - [As Filter](#as-filter)
   - [As Interactive Interface](#as-interactive-interface)
   - [Key Bindings](#key-bindings)
   - [Search Syntax](#search-syntax)
   - [Exit code](#exit-code)
 - [Customization](#customization)
   - [Keymap to redefine](#keymap)
   - [Sort Criteria](#sort-criteria)
   - [Color Scheme](#color-scheme)
   - [Misc](#misc)
 - [Advance Topics](#advance-topics)
   - [Interactive Mode](#interactive-mode)
   - [Executing external programs](#executing-external-programs)
   - [Preview Window](#preview-window)
   - [Fields Support](#fields-support)
   - [Use as a Library](#use-as-a-library)
 - [FAQ](#faq)
   - [How to ignore files?](#how-to-ignore-files)
   - [Some files are not shown in vim
 plugin](#some-files-are-not-shown-in-vim-plugin)
 - [Differences to fzf](#differences-to-fzf)
 - [How to contribute](#how-to-contribute)
 .
 # Installation
 .
 The skim project contains several components:
 .
 1. `sk` executable -- the core.
 2. `sk-tmux` -- script for launching `sk` in a tmux pane.
 3. Vim/Nvim plugin -- to call `sk` inside Vim/Nvim. check
 [skim.vim](https://github.com/lotabout/skim.vim) for more Vim support.
 .
 ## Package Managers
 .
 | Distribution   | Package Manager   | Command                      |
 | -------------- | ----------------- | ---------------------------- |
 | macOS          | Homebrew          | `brew install sk`            |
 | macOS          | MacPorts          | `sudo port install skim`     |
 | Fedora         | dnf               | `dnf install skim`           |
 | Alpine         | apk               | `apk add skim`               |
 | Arch           | pacman            | `pacman -S skim`             |
 | Gentoo         | Portage           | `emerge --ask app-misc/skim` |
 .
 See [repology](https://repology.org/project/skim/versions) for a comprehensive
 overview of package availability.
 .
 ## Install as Vim plugin
 .
 Via vim-plug (recommended):
 .
 ```vim
 Plug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install' }
 ```
 .
 ## Hard Core
 .
 Any of the following applies:
 .
 - Using Git
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     ~/.skim/install
     ```
 .
 - Using Binary: directly [download the sk
 executable](https://github.com/lotabout/skim/releases).
 - Install from [crates.io](https://crates.io/): `cargo install skim`
 - Build Manually
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     cd ~/.skim
     cargo install
     cargo build --release
     # put the resulting `target/release/sk` executable on your PATH.
     ```
 .
 # Usage
 .
 skim can be used as a general filter (like `grep`) or as an interactive
 interface for invoking commands.
 .
 ## As filter
 .
 Try the following
 .
 ```bash
 # directly invoke skim
 sk
 .
 # or pipe some input to it: (press TAB key select multiple items with -m
 enabled)
 vim $(find . -name "*.rs" | sk -m)
 ```
 .
 The above command will allow you to select files with ".rs" extension and open
 the ones you selected in Vim.
 .
 ## As Interactive Interface
 .
 `skim` can invoke other commands dynamically. Normally you would want to
 integrate it with [grep](https://www.gnu.org/software/grep/),
 [ack](https://github.com/petdance/ack2),
 [ag](https://github.com/ggreer/the_silver_searcher), or
 [rg](https://github.com/BurntSushi/ripgrep) for searching contents in a
 project directory:
 .
 ```sh
 # works with grep
 sk --ansi -i -c 'grep -rI --color=always --line-number "{}" .'
 # works with ack
 sk --ansi -i -c 'ack --color "{}"'
 # works with ag
 sk --ansi -i -c 'ag --color "{}"'
 # works with rg
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 ![interactive mode
 demo](https://cloud.githubusercontent.com/assets/1527040/21603930/655d859a-d1db-11e6-9fec-c25099d30a12.gif)
 .
 ## Key Bindings
 .
 Some commonly used key bindings:
 .
 | Key               | Action                                     |
 |------------------:|--------------------------------------------|
 | Enter             | Accept (select current one and quit)       |
 | ESC/Ctrl-G        | Abort                                      |
 | Ctrl-P/Up         | Move cursor up                             |
 | Ctrl-N/Down       | Move cursor Down                           |
 | TAB               | Toggle selection and move down (with `-m`) |
 | Shift-TAB         | Toggle selection and move up (with `-m`)   |
 .
 For full list of key bindings, check out the [man
 page](https://github.com/lotabout/skim/blob/master/man/man1/sk.1) (`man sk`).
 .
 ## Search Syntax
 .
 `skim` borrowed `fzf`'s syntax for matching items:
 .
 | Token    | Match type                 | Description                       |
 |----------|----------------------------|-----------------------------------|
 | `text`   | fuzzy-match                | items that match `text`           |
 | `^music` | prefix-exact-match         | items that start with `music`     |
 | `.mp3$`  | suffix-exact-match         | items that end with `.mp3`        |
 | `'wild`  | exact-match (quoted)       | items that include `wild`         |
 | `!fire`  | inverse-exact-match        | items that do not include `fire`  |
 | `!.mp3$` | inverse-suffix-exact-match | items that do not end with `.mp3` |
 .
 `skim` also supports the combination of tokens.
 .
 - Whitespace has the meaning of `AND`. With the term `src main`, `skim` will
 search
     for items that match **both** `src` and `main`.
 - ` | ` means `OR` (note the spaces around `|`). With the term `.md$ |
     .markdown$`, `skim` will search for items ends with either `.md` or
     `.markdown`.
 - `OR` has higher precedence. So `readme .md$ | .markdown$` is grouped into
     `readme AND (.md$ OR .markdown$)`.
 .
 In case that you want to use regular expressions, `skim` provides `regex` mode:
 .
 ```sh
 sk --regex
 ```
 .
 You can switch to `regex` mode dynamically by pressing `Ctrl-R` (Rotate Mode).
 .
 ## exit code
 .
 | Exit Code | Meaning                           |
 |-----------|-----------------------------------|
 | 0         | Exit normally                     |
 | 1         | No Match found                    |
 | 130       | Abort by Ctrl-C/Ctrl-G/ESC/etc... |
 .
 # Customization
 .
 The doc here is only a preview, please check the man page (`man sk`) for a full
 list of options.
 .
 ## Keymap
 .
 Specify the bindings with comma separated pairs (no space allowed), example:
 .
 ```sh
 sk --bind 'alt-a:select-all,alt-d:deselect-all'
 ```
 .
 Additionally, use `+` to concatenate actions, such as `execute-silent(echo {} |
 pbcopy)+abort`.
 .
 See the *KEY BINDINGS* section of the man page for details.
 .
 ## Sort Criteria
 .
 There are five sort keys for results: `score, index, begin, end, length`, you
 can
 specify how the records are sorted by `sk --tiebreak score,index,-begin` or any
 other order you want.
 .
 ## Color Scheme
 .
 It is a high chance that you are a better artist than me. Luckily you won't
 be stuck with the default colors, `skim` supports customization of the color
 scheme.
 .
 ```sh
 --color=[BASE_SCHEME][,COLOR:ANSI]
 ```
 .
 The configuration of colors starts with the name of the base color scheme,
 followed by custom color mappings. For example:
 .
 ```sh
 sk --color=current_bg:24
 sk --color=light,fg:232,bg:255,current_bg:116,info:27
 ```
 .
 See `--color` option in the man page for details.
 .
 ## Misc
 .
 - `--ansi`: to parse ANSI color codes (e.g., `\e[32mABC`) of the data source
 - `--regex`: use the query as regular expression to match the data source
 .
 # Advanced Topics
 .
 ## Interactive mode
 .
 With "interactive mode", you could invoke command dynamically. Try out:
 .
 ```sh
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 How it works?
 .
 ![skim's interactive
 mode](https://user-images.githubusercontent.com/1527040/53381293-461ce380-39ab-11e9-8e86-7c3bbfd557bc.png)
 .
 - Skim could accept two kinds of source: command output or piped input
 - Skim has two kinds of prompts: A query prompt to specify the query pattern
 and a
     command prompt to specify the "arguments" of the command
 - `-c` is used to specify the command to execute while defaults to
 `SKIM_DEFAULT_COMMAND`
 - `-i` is to tell skim open command prompt on startup, which will show `c>` by
 default.
 .
 If you want to further narrow down the results returned by the command, press
 `Ctrl-Q` to toggle interactive mode.
 .
 ## Executing external programs
 .
 You can set up key bindings for starting external processes without leaving
 skim (`execute`, `execute-silent`).
 .
 ```sh
 # Press F1 to open the file with less without leaving skim
 # Press CTRL-Y to copy the line to clipboard and aborts skim (requires pbcopy)
 sk --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} |
 pbcopy)+abort'
 ```
 .
 ## Preview Window
 .
 This is a great feature of fzf that skim borrows. For example, we use 'ag' to
 find the matched lines, once we narrow down to the target lines, we want to
 finally decide which lines to pick by checking the context around the line.
 `grep` and `ag` has an option `--context`, skim can do better with preview
 window. For example:
 .
 ```sh
 sk --ansi -i -c 'ag --color "{}"' --preview "preview.sh {}"
 ```
 .
 (Note the
 [preview.sh](https://github.com/junegunn/fzf.vim/blob/master/bin/preview.sh) is
 a script to print the context given filename:lines:columns)
 You got things like this:
 .
 ![preview
 demo](https://user-images.githubusercontent.com/1527040/30677573-0cee622e-9ebf-11e7-8316-c741324ecb3a.png)
 .
 ### How does it work?
 .
 If the preview command is given by the `--preview` option, skim will replace
 the
 `{}` with the current highlighted line surrounded by single quotes, call the
 command to get the output, and print the output on the preview window.
 .
 Sometimes you don't need the whole line for invoking the command. In this case
 you can use `{}`, `{1..}`, `{..3}` or `{1..5}` to select the fields. The
 syntax is explained in the section "Fields Support".
 .
 Last, you might want to configure the position of preview windows, use
 `--preview-window`.
 .
 - `--preview-window up:30%` to put the window in the up position with height
     30% of the total height of skim.
 - `--preview-window left:10:wrap`, to specify the `wrap` allows the preview
     window to wrap the output of the preview command.
 - `--preview-window wrap:hidden` to hide the preview window at startup, later
     it can be shown by the action `toggle-preview`.
 .
 ## Fields support
 .
 Normally only plugin users need to understand this.
 .
 For example, you have the data source with the format:
 .
 ```sh
 <filename>:<line number>:<column number>
 ```
 .
 However, you want to search `<filename>` only when typing in queries. That
 means when you type `21`, you want to find a `<filename>` that contains `21`,
 but not matching line number or column number.
 .
 You can use `sk --delimiter ':' --nth 1` to achieve this.
 .
 Also you can use `--with-nth` to re-arrange the order of fields.
 .
 **Range Syntax**
 .
 - `<num>` -- to specify the `num`-th fields, starting with 1.
 - `start..` -- starting from the `start`-th fields, and the rest.
 - `..end` -- starting from the `0`-th field, all the way to `end`-th field,
     including `end`.
 - `start..end` -- starting from `start`-th field, all the way to `end`-th
     field, including `end`.
 .
 ## Use as a library
 .
 Skim can be used as a library in your Rust crates.
 .
 First, add skim into your `Cargo.toml`:
 .
 ```toml
 [dependencies]
 skim = "*"
 ```
 .
 Then try to run this simple example:
 .
 ```rust
 extern crate skim;
 use skim::prelude::*;
 use std::io::Cursor;
 .
 pub fn main() {
     let options = SkimOptionsBuilder::default()
         .height(Some("50%"))
         .multi(true)
         .build()
         .unwrap();
 .
     let input = "aaaaa\nbbbb\nccc".to_string();
 .
     // `SkimItemReader` is a helper to turn any `BufRead` into a stream of
 `SkimItem`
     // `SkimItem` was implemented for `AsRef<str>` by default
     let item_reader = SkimItemReader::default();
     let items = item_reader.of_bufread(Cursor::new(input));
 .
     // `run_with` would read and show items from the stream
     let selected_items = Skim::run_with(&options, Some(items))
         .map(|out| out.selected_items)
         .unwrap_or_else(|| Vec::new());
 .
     for item in selected_items.iter() {
         print!("{}{}", item.output(), "\n");
     }
 }
 ```
 .
 Given an `Option<SkimItemReceiver>`, skim will read items accordingly, do its
 job and bring us back the user selection including the selected items, the
 query, etc. Note that:
 .
 - `SkimItemReceiver` is `crossbeam::channel::Receiver<Arc<dyn SkimItem>>`
 - If it is none, it will invoke the given command and read items from command
 output
 - Otherwise, it will read the items from the (crossbeam) channel.
 .
 Trait `SkimItem` is provided to customize how a line could be displayed,
 compared and previewed. It is implemented by default for `AsRef<str>`
 .
 Plus, `SkimItemReader` is a helper to convert a `BufRead` into
 `SkimItemReceiver` (we can easily turn a `File` for `String` into `BufRead`).
 So that you could deal with strings or files easily.
 .
 Check more examples under
 [examples/](https://github.com/lotabout/skim/tree/master/examples) directory.
 .
 # FAQ
 .
 ## How to ignore files?
 .
 Skim invokes `find .` to fetch a list of files for filtering. You can override
 that by setting the environment variable `SKIM_DEFAULT_COMMAND`. For example:
 .
 ```sh
 SKIM_DEFAULT_COMMAND="fd --type f || git ls-tree -r --name-only HEAD || rg
 --files || find ."
 sk
 ```
 .
 You could put it in your `.bashrc` or `.zshrc` if you like it to be default.
 .
 ## Some files are not shown in Vim plugin
 .
 If you use the Vim plugin and execute the `:SK` command, you might find some
 of your files not shown.
 .
 As described in [#3](https://github.com/lotabout/skim/issues/3), in the Vim
 plugin, `SKIM_DEFAULT_COMMAND` is set to the command by default:
 .
 ```vim
 let $SKIM_DEFAULT_COMMAND = "git ls-tree -r --name-only HEAD || rg --files ||
 ag -l -g \"\" || find ."
 ```
 .
 That means, the files not recognized by git will not shown. Either override the
 default with `let $SKIM_DEFAULT_COMMAND = ''` or find the missing file by
 yourself.
 .
 # Differences to fzf
 .
 [fzf](https://github.com/junegunn/fzf) is a command-line fuzzy finder written
 in Go and [skim](https://github.com/lotabout/skim) tries to implement a new one
 in Rust!
 .
 This project is written from scratch. Some decisions of implementation are
 different from fzf. For example:
 .
 1. `skim` is a binary as well as a library while fzf is only a binary.
 2. `skim` has an interactive mode.
 3. `skim` supports pre-selection
 4. The fuzzy search algorithm is different.
 5. ~~UI of showing matched items. `fzf` will show only the range matched while
    `skim` will show each character matched.~~ (fzf has this now)
 6. ~~`skim`'s range syntax is Git style~~: now it is the same with fzf.
 .
 # How to contribute
 .
 [Create new issues](https://github.com/lotabout/skim/issues/new) if you meet
 any bugs
 or have any ideas. Pull requests are warmly welcomed.
 .
 # Troubleshooting
 .
 ## No line feed issues with nix , FreeBSD, termux
 .
 If you encounter display issues like:
 .
 ```bash
 $ for n in {1..10}; do echo "$n"; done | sk
   0/10 0/0.> 10/10  10  9  8  7  6  5  4  3  2> 1
 ```
 .
 For example
 .
 - <https://github.com/lotabout/skim/issues/412>
 - <https://github.com/lotabout/skim/issues/455>
 .
 You need to set TERMINFO or TERMINFO_DIRS to the path to a correct terminfo
 database path
 .
 For example, with termux, you can add in your bashr:
 .
 ```
 export TERMINFO=/data/data/com.termux/files/usr/share/terminfo
 ```
Vcs-Browser: https://github.com/kimono-koans/two_percent
Vcs-Git: https://github.com/kimono-koans/two_percent

Package: two-percent
Version: 0.11.18-1
Architecture: amd64
Maintainer: Zhang Jinzhou <lotabout@gmail.com>
Installed-Size: 5133
Depends: libc6 (>= 2.29)
Filename: ./two-percent_0.11.18-1_amd64.deb
Size: 1447756
MD5sum: 4e372ff9b7546fb8b55cd644ccf8f66c
SHA1: 9fc615382070dfffce6e1bb6bab411b5f50eb282
SHA256: b427a5765e4952d8de6ebac7dd5932928b13545a4b2d939990256bcbfc577629
Priority: optional
Homepage: https://github.com/kimono-koans/two_percent
Description: Fuzzy Finder in rust!
 <p align="center">
   <a href="https://crates.io/crates/skim">
     <img src="https://img.shields.io/crates/v/skim.svg" alt="Crates.io" />
   </a>
   <a
 href="https://github.com/lotabout/skim/actions?query=workflow%3A%22Build+%26+Test%22">
     <img
 src="https://github.com/lotabout/skim/workflows/Build%20&%20Test/badge.svg"
 alt="Build & Test" />
   </a>
   <a href="https://repology.org/project/skim/versions">
     <img src="https://repology.org/badge/tiny-repos/skim.svg" alt="Packaging
 status" />
   </a>
   <a href="https://discord.gg/23PuxttufP">
     <img alt="Skim Discord"
 src="https://img.shields.io/discord/1031830957432504361?label=&color=7389d8&labelColor=6a7ec2&logoColor=ffffff&logo=discord"
 />
   </a>
 </p>
 .
 *Note: `two_percent` is a fork of
 [skim](https://github.com/lotabout/skim/tree/291fc34c58b1670a5e8c95f1e8f930b82c030b19)
 for use with [httm](https://github.com/kimono-koans/httm).*
 .
 > Life is short, skim!
 .
 Half of our life is spent on navigation: files, lines, commands… You need
 skim!
 It is a general fuzzy finder that saves you time.
 .
 [![skim
 demo](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm.svg)](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm)
 .
 skim provides a single executable: `sk`. Basically anywhere you would want to
 use
 `grep`, try `sk` instead.
 .
 # Table of contents
 .
 - [Installation](#installation)
 - [Usage](#usage)
   - [As Filter](#as-filter)
   - [As Interactive Interface](#as-interactive-interface)
   - [Key Bindings](#key-bindings)
   - [Search Syntax](#search-syntax)
   - [Exit code](#exit-code)
 - [Customization](#customization)
   - [Keymap to redefine](#keymap)
   - [Sort Criteria](#sort-criteria)
   - [Color Scheme](#color-scheme)
   - [Misc](#misc)
 - [Advance Topics](#advance-topics)
   - [Interactive Mode](#interactive-mode)
   - [Executing external programs](#executing-external-programs)
   - [Preview Window](#preview-window)
   - [Fields Support](#fields-support)
   - [Use as a Library](#use-as-a-library)
 - [FAQ](#faq)
   - [How to ignore files?](#how-to-ignore-files)
   - [Some files are not shown in vim
 plugin](#some-files-are-not-shown-in-vim-plugin)
 - [Differences to fzf](#differences-to-fzf)
 - [How to contribute](#how-to-contribute)
 .
 # Installation
 .
 The skim project contains several components:
 .
 1. `sk` executable -- the core.
 2. `sk-tmux` -- script for launching `sk` in a tmux pane.
 3. Vim/Nvim plugin -- to call `sk` inside Vim/Nvim. check
 [skim.vim](https://github.com/lotabout/skim.vim) for more Vim support.
 .
 ## Package Managers
 .
 | Distribution   | Package Manager   | Command                      |
 | -------------- | ----------------- | ---------------------------- |
 | macOS          | Homebrew          | `brew install sk`            |
 | macOS          | MacPorts          | `sudo port install skim`     |
 | Fedora         | dnf               | `dnf install skim`           |
 | Alpine         | apk               | `apk add skim`               |
 | Arch           | pacman            | `pacman -S skim`             |
 | Gentoo         | Portage           | `emerge --ask app-misc/skim` |
 .
 See [repology](https://repology.org/project/skim/versions) for a comprehensive
 overview of package availability.
 .
 ## Install as Vim plugin
 .
 Via vim-plug (recommended):
 .
 ```vim
 Plug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install' }
 ```
 .
 ## Hard Core
 .
 Any of the following applies:
 .
 - Using Git
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     ~/.skim/install
     ```
 .
 - Using Binary: directly [download the sk
 executable](https://github.com/lotabout/skim/releases).
 - Install from [crates.io](https://crates.io/): `cargo install skim`
 - Build Manually
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     cd ~/.skim
     cargo install
     cargo build --release
     # put the resulting `target/release/sk` executable on your PATH.
     ```
 .
 # Usage
 .
 skim can be used as a general filter (like `grep`) or as an interactive
 interface for invoking commands.
 .
 ## As filter
 .
 Try the following
 .
 ```bash
 # directly invoke skim
 sk
 .
 # or pipe some input to it: (press TAB key select multiple items with -m
 enabled)
 vim $(find . -name "*.rs" | sk -m)
 ```
 .
 The above command will allow you to select files with ".rs" extension and open
 the ones you selected in Vim.
 .
 ## As Interactive Interface
 .
 `skim` can invoke other commands dynamically. Normally you would want to
 integrate it with [grep](https://www.gnu.org/software/grep/),
 [ack](https://github.com/petdance/ack2),
 [ag](https://github.com/ggreer/the_silver_searcher), or
 [rg](https://github.com/BurntSushi/ripgrep) for searching contents in a
 project directory:
 .
 ```sh
 # works with grep
 sk --ansi -i -c 'grep -rI --color=always --line-number "{}" .'
 # works with ack
 sk --ansi -i -c 'ack --color "{}"'
 # works with ag
 sk --ansi -i -c 'ag --color "{}"'
 # works with rg
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 ![interactive mode
 demo](https://cloud.githubusercontent.com/assets/1527040/21603930/655d859a-d1db-11e6-9fec-c25099d30a12.gif)
 .
 ## Key Bindings
 .
 Some commonly used key bindings:
 .
 | Key               | Action                                     |
 |------------------:|--------------------------------------------|
 | Enter             | Accept (select current one and quit)       |
 | ESC/Ctrl-G        | Abort                                      |
 | Ctrl-P/Up         | Move cursor up                             |
 | Ctrl-N/Down       | Move cursor Down                           |
 | TAB               | Toggle selection and move down (with `-m`) |
 | Shift-TAB         | Toggle selection and move up (with `-m`)   |
 .
 For full list of key bindings, check out the [man
 page](https://github.com/lotabout/skim/blob/master/man/man1/sk.1) (`man sk`).
 .
 ## Search Syntax
 .
 `skim` borrowed `fzf`'s syntax for matching items:
 .
 | Token    | Match type                 | Description                       |
 |----------|----------------------------|-----------------------------------|
 | `text`   | fuzzy-match                | items that match `text`           |
 | `^music` | prefix-exact-match         | items that start with `music`     |
 | `.mp3$`  | suffix-exact-match         | items that end with `.mp3`        |
 | `'wild`  | exact-match (quoted)       | items that include `wild`         |
 | `!fire`  | inverse-exact-match        | items that do not include `fire`  |
 | `!.mp3$` | inverse-suffix-exact-match | items that do not end with `.mp3` |
 .
 `skim` also supports the combination of tokens.
 .
 - Whitespace has the meaning of `AND`. With the term `src main`, `skim` will
 search
     for items that match **both** `src` and `main`.
 - ` | ` means `OR` (note the spaces around `|`). With the term `.md$ |
     .markdown$`, `skim` will search for items ends with either `.md` or
     `.markdown`.
 - `OR` has higher precedence. So `readme .md$ | .markdown$` is grouped into
     `readme AND (.md$ OR .markdown$)`.
 .
 In case that you want to use regular expressions, `skim` provides `regex` mode:
 .
 ```sh
 sk --regex
 ```
 .
 You can switch to `regex` mode dynamically by pressing `Ctrl-R` (Rotate Mode).
 .
 ## exit code
 .
 | Exit Code | Meaning                           |
 |-----------|-----------------------------------|
 | 0         | Exit normally                     |
 | 1         | No Match found                    |
 | 130       | Abort by Ctrl-C/Ctrl-G/ESC/etc... |
 .
 # Customization
 .
 The doc here is only a preview, please check the man page (`man sk`) for a full
 list of options.
 .
 ## Keymap
 .
 Specify the bindings with comma separated pairs (no space allowed), example:
 .
 ```sh
 sk --bind 'alt-a:select-all,alt-d:deselect-all'
 ```
 .
 Additionally, use `+` to concatenate actions, such as `execute-silent(echo {} |
 pbcopy)+abort`.
 .
 See the *KEY BINDINGS* section of the man page for details.
 .
 ## Sort Criteria
 .
 There are five sort keys for results: `score, index, begin, end, length`, you
 can
 specify how the records are sorted by `sk --tiebreak score,index,-begin` or any
 other order you want.
 .
 ## Color Scheme
 .
 It is a high chance that you are a better artist than me. Luckily you won't
 be stuck with the default colors, `skim` supports customization of the color
 scheme.
 .
 ```sh
 --color=[BASE_SCHEME][,COLOR:ANSI]
 ```
 .
 The configuration of colors starts with the name of the base color scheme,
 followed by custom color mappings. For example:
 .
 ```sh
 sk --color=current_bg:24
 sk --color=light,fg:232,bg:255,current_bg:116,info:27
 ```
 .
 See `--color` option in the man page for details.
 .
 ## Misc
 .
 - `--ansi`: to parse ANSI color codes (e.g., `\e[32mABC`) of the data source
 - `--regex`: use the query as regular expression to match the data source
 .
 # Advanced Topics
 .
 ## Interactive mode
 .
 With "interactive mode", you could invoke command dynamically. Try out:
 .
 ```sh
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 How it works?
 .
 ![skim's interactive
 mode](https://user-images.githubusercontent.com/1527040/53381293-461ce380-39ab-11e9-8e86-7c3bbfd557bc.png)
 .
 - Skim could accept two kinds of source: command output or piped input
 - Skim has two kinds of prompts: A query prompt to specify the query pattern
 and a
     command prompt to specify the "arguments" of the command
 - `-c` is used to specify the command to execute while defaults to
 `SKIM_DEFAULT_COMMAND`
 - `-i` is to tell skim open command prompt on startup, which will show `c>` by
 default.
 .
 If you want to further narrow down the results returned by the command, press
 `Ctrl-Q` to toggle interactive mode.
 .
 ## Executing external programs
 .
 You can set up key bindings for starting external processes without leaving
 skim (`execute`, `execute-silent`).
 .
 ```sh
 # Press F1 to open the file with less without leaving skim
 # Press CTRL-Y to copy the line to clipboard and aborts skim (requires pbcopy)
 sk --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} |
 pbcopy)+abort'
 ```
 .
 ## Preview Window
 .
 This is a great feature of fzf that skim borrows. For example, we use 'ag' to
 find the matched lines, once we narrow down to the target lines, we want to
 finally decide which lines to pick by checking the context around the line.
 `grep` and `ag` has an option `--context`, skim can do better with preview
 window. For example:
 .
 ```sh
 sk --ansi -i -c 'ag --color "{}"' --preview "preview.sh {}"
 ```
 .
 (Note the
 [preview.sh](https://github.com/junegunn/fzf.vim/blob/master/bin/preview.sh) is
 a script to print the context given filename:lines:columns)
 You got things like this:
 .
 ![preview
 demo](https://user-images.githubusercontent.com/1527040/30677573-0cee622e-9ebf-11e7-8316-c741324ecb3a.png)
 .
 ### How does it work?
 .
 If the preview command is given by the `--preview` option, skim will replace
 the
 `{}` with the current highlighted line surrounded by single quotes, call the
 command to get the output, and print the output on the preview window.
 .
 Sometimes you don't need the whole line for invoking the command. In this case
 you can use `{}`, `{1..}`, `{..3}` or `{1..5}` to select the fields. The
 syntax is explained in the section "Fields Support".
 .
 Last, you might want to configure the position of preview windows, use
 `--preview-window`.
 .
 - `--preview-window up:30%` to put the window in the up position with height
     30% of the total height of skim.
 - `--preview-window left:10:wrap`, to specify the `wrap` allows the preview
     window to wrap the output of the preview command.
 - `--preview-window wrap:hidden` to hide the preview window at startup, later
     it can be shown by the action `toggle-preview`.
 .
 ## Fields support
 .
 Normally only plugin users need to understand this.
 .
 For example, you have the data source with the format:
 .
 ```sh
 <filename>:<line number>:<column number>
 ```
 .
 However, you want to search `<filename>` only when typing in queries. That
 means when you type `21`, you want to find a `<filename>` that contains `21`,
 but not matching line number or column number.
 .
 You can use `sk --delimiter ':' --nth 1` to achieve this.
 .
 Also you can use `--with-nth` to re-arrange the order of fields.
 .
 **Range Syntax**
 .
 - `<num>` -- to specify the `num`-th fields, starting with 1.
 - `start..` -- starting from the `start`-th fields, and the rest.
 - `..end` -- starting from the `0`-th field, all the way to `end`-th field,
     including `end`.
 - `start..end` -- starting from `start`-th field, all the way to `end`-th
     field, including `end`.
 .
 ## Use as a library
 .
 Skim can be used as a library in your Rust crates.
 .
 First, add skim into your `Cargo.toml`:
 .
 ```toml
 [dependencies]
 skim = "*"
 ```
 .
 Then try to run this simple example:
 .
 ```rust
 extern crate skim;
 use skim::prelude::*;
 use std::io::Cursor;
 .
 pub fn main() {
     let options = SkimOptionsBuilder::default()
         .height(Some("50%"))
         .multi(true)
         .build()
         .unwrap();
 .
     let input = "aaaaa\nbbbb\nccc".to_string();
 .
     // `SkimItemReader` is a helper to turn any `BufRead` into a stream of
 `SkimItem`
     // `SkimItem` was implemented for `AsRef<str>` by default
     let item_reader = SkimItemReader::default();
     let items = item_reader.of_bufread(Cursor::new(input));
 .
     // `run_with` would read and show items from the stream
     let selected_items = Skim::run_with(&options, Some(items))
         .map(|out| out.selected_items)
         .unwrap_or_else(|| Vec::new());
 .
     for item in selected_items.iter() {
         print!("{}{}", item.output(), "\n");
     }
 }
 ```
 .
 Given an `Option<SkimItemReceiver>`, skim will read items accordingly, do its
 job and bring us back the user selection including the selected items, the
 query, etc. Note that:
 .
 - `SkimItemReceiver` is `crossbeam::channel::Receiver<Arc<dyn SkimItem>>`
 - If it is none, it will invoke the given command and read items from command
 output
 - Otherwise, it will read the items from the (crossbeam) channel.
 .
 Trait `SkimItem` is provided to customize how a line could be displayed,
 compared and previewed. It is implemented by default for `AsRef<str>`
 .
 Plus, `SkimItemReader` is a helper to convert a `BufRead` into
 `SkimItemReceiver` (we can easily turn a `File` for `String` into `BufRead`).
 So that you could deal with strings or files easily.
 .
 Check more examples under
 [examples/](https://github.com/lotabout/skim/tree/master/examples) directory.
 .
 # FAQ
 .
 ## How to ignore files?
 .
 Skim invokes `find .` to fetch a list of files for filtering. You can override
 that by setting the environment variable `SKIM_DEFAULT_COMMAND`. For example:
 .
 ```sh
 SKIM_DEFAULT_COMMAND="fd --type f || git ls-tree -r --name-only HEAD || rg
 --files || find ."
 sk
 ```
 .
 You could put it in your `.bashrc` or `.zshrc` if you like it to be default.
 .
 ## Some files are not shown in Vim plugin
 .
 If you use the Vim plugin and execute the `:SK` command, you might find some
 of your files not shown.
 .
 As described in [#3](https://github.com/lotabout/skim/issues/3), in the Vim
 plugin, `SKIM_DEFAULT_COMMAND` is set to the command by default:
 .
 ```vim
 let $SKIM_DEFAULT_COMMAND = "git ls-tree -r --name-only HEAD || rg --files ||
 ag -l -g \"\" || find ."
 ```
 .
 That means, the files not recognized by git will not shown. Either override the
 default with `let $SKIM_DEFAULT_COMMAND = ''` or find the missing file by
 yourself.
 .
 # Differences to fzf
 .
 [fzf](https://github.com/junegunn/fzf) is a command-line fuzzy finder written
 in Go and [skim](https://github.com/lotabout/skim) tries to implement a new one
 in Rust!
 .
 This project is written from scratch. Some decisions of implementation are
 different from fzf. For example:
 .
 1. `skim` is a binary as well as a library while fzf is only a binary.
 2. `skim` has an interactive mode.
 3. `skim` supports pre-selection
 4. The fuzzy search algorithm is different.
 5. ~~UI of showing matched items. `fzf` will show only the range matched while
    `skim` will show each character matched.~~ (fzf has this now)
 6. ~~`skim`'s range syntax is Git style~~: now it is the same with fzf.
 .
 # How to contribute
 .
 [Create new issues](https://github.com/lotabout/skim/issues/new) if you meet
 any bugs
 or have any ideas. Pull requests are warmly welcomed.
 .
 # Troubleshooting
 .
 ## No line feed issues with nix , FreeBSD, termux
 .
 If you encounter display issues like:
 .
 ```bash
 $ for n in {1..10}; do echo "$n"; done | sk
   0/10 0/0.> 10/10  10  9  8  7  6  5  4  3  2> 1
 ```
 .
 For example
 .
 - <https://github.com/lotabout/skim/issues/412>
 - <https://github.com/lotabout/skim/issues/455>
 .
 You need to set TERMINFO or TERMINFO_DIRS to the path to a correct terminfo
 database path
 .
 For example, with termux, you can add in your bashr:
 .
 ```
 export TERMINFO=/data/data/com.termux/files/usr/share/terminfo
 ```
Vcs-Browser: https://github.com/kimono-koans/two_percent
Vcs-Git: https://github.com/kimono-koans/two_percent

Package: two-percent
Version: 0.11.19-1
Architecture: amd64
Maintainer: Zhang Jinzhou <lotabout@gmail.com>
Installed-Size: 5134
Depends: libc6 (>= 2.29)
Filename: ./two-percent_0.11.19-1_amd64.deb
Size: 1446056
MD5sum: 2b6a25e5aefb01b06f415b23fbdf28cc
SHA1: fbc1005bca0a6888da409404c35a46f068829797
SHA256: 924748b8dbd73f16bd9f6c1b28dda57322d7d76f01f69dca2d7c8cbb6bcecb05
Priority: optional
Homepage: https://github.com/kimono-koans/two_percent
Description: Fuzzy Finder in rust!
 <p align="center">
   <a href="https://crates.io/crates/skim">
     <img src="https://img.shields.io/crates/v/skim.svg" alt="Crates.io" />
   </a>
   <a
 href="https://github.com/lotabout/skim/actions?query=workflow%3A%22Build+%26+Test%22">
     <img
 src="https://github.com/lotabout/skim/workflows/Build%20&%20Test/badge.svg"
 alt="Build & Test" />
   </a>
   <a href="https://repology.org/project/skim/versions">
     <img src="https://repology.org/badge/tiny-repos/skim.svg" alt="Packaging
 status" />
   </a>
   <a href="https://discord.gg/23PuxttufP">
     <img alt="Skim Discord"
 src="https://img.shields.io/discord/1031830957432504361?label=&color=7389d8&labelColor=6a7ec2&logoColor=ffffff&logo=discord"
 />
   </a>
 </p>
 .
 *Note: `two_percent` is a fork of
 [skim](https://github.com/lotabout/skim/tree/291fc34c58b1670a5e8c95f1e8f930b82c030b19)
 for use with [httm](https://github.com/kimono-koans/httm).*
 .
 > Life is short, skim!
 .
 Half of our life is spent on navigation: files, lines, commands… You need
 skim!
 It is a general fuzzy finder that saves you time.
 .
 [![skim
 demo](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm.svg)](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm)
 .
 skim provides a single executable: `sk`. Basically anywhere you would want to
 use
 `grep`, try `sk` instead.
 .
 # Table of contents
 .
 - [Installation](#installation)
 - [Usage](#usage)
   - [As Filter](#as-filter)
   - [As Interactive Interface](#as-interactive-interface)
   - [Key Bindings](#key-bindings)
   - [Search Syntax](#search-syntax)
   - [Exit code](#exit-code)
 - [Customization](#customization)
   - [Keymap to redefine](#keymap)
   - [Sort Criteria](#sort-criteria)
   - [Color Scheme](#color-scheme)
   - [Misc](#misc)
 - [Advance Topics](#advance-topics)
   - [Interactive Mode](#interactive-mode)
   - [Executing external programs](#executing-external-programs)
   - [Preview Window](#preview-window)
   - [Fields Support](#fields-support)
   - [Use as a Library](#use-as-a-library)
 - [FAQ](#faq)
   - [How to ignore files?](#how-to-ignore-files)
   - [Some files are not shown in vim
 plugin](#some-files-are-not-shown-in-vim-plugin)
 - [Differences to fzf](#differences-to-fzf)
 - [How to contribute](#how-to-contribute)
 .
 # Installation
 .
 The skim project contains several components:
 .
 1. `sk` executable -- the core.
 2. `sk-tmux` -- script for launching `sk` in a tmux pane.
 3. Vim/Nvim plugin -- to call `sk` inside Vim/Nvim. check
 [skim.vim](https://github.com/lotabout/skim.vim) for more Vim support.
 .
 ## Package Managers
 .
 | Distribution   | Package Manager   | Command                      |
 | -------------- | ----------------- | ---------------------------- |
 | macOS          | Homebrew          | `brew install sk`            |
 | macOS          | MacPorts          | `sudo port install skim`     |
 | Fedora         | dnf               | `dnf install skim`           |
 | Alpine         | apk               | `apk add skim`               |
 | Arch           | pacman            | `pacman -S skim`             |
 | Gentoo         | Portage           | `emerge --ask app-misc/skim` |
 .
 See [repology](https://repology.org/project/skim/versions) for a comprehensive
 overview of package availability.
 .
 ## Install as Vim plugin
 .
 Via vim-plug (recommended):
 .
 ```vim
 Plug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install' }
 ```
 .
 ## Hard Core
 .
 Any of the following applies:
 .
 - Using Git
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     ~/.skim/install
     ```
 .
 - Using Binary: directly [download the sk
 executable](https://github.com/lotabout/skim/releases).
 - Install from [crates.io](https://crates.io/): `cargo install skim`
 - Build Manually
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     cd ~/.skim
     cargo install
     cargo build --release
     # put the resulting `target/release/sk` executable on your PATH.
     ```
 .
 # Usage
 .
 skim can be used as a general filter (like `grep`) or as an interactive
 interface for invoking commands.
 .
 ## As filter
 .
 Try the following
 .
 ```bash
 # directly invoke skim
 sk
 .
 # or pipe some input to it: (press TAB key select multiple items with -m
 enabled)
 vim $(find . -name "*.rs" | sk -m)
 ```
 .
 The above command will allow you to select files with ".rs" extension and open
 the ones you selected in Vim.
 .
 ## As Interactive Interface
 .
 `skim` can invoke other commands dynamically. Normally you would want to
 integrate it with [grep](https://www.gnu.org/software/grep/),
 [ack](https://github.com/petdance/ack2),
 [ag](https://github.com/ggreer/the_silver_searcher), or
 [rg](https://github.com/BurntSushi/ripgrep) for searching contents in a
 project directory:
 .
 ```sh
 # works with grep
 sk --ansi -i -c 'grep -rI --color=always --line-number "{}" .'
 # works with ack
 sk --ansi -i -c 'ack --color "{}"'
 # works with ag
 sk --ansi -i -c 'ag --color "{}"'
 # works with rg
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 ![interactive mode
 demo](https://cloud.githubusercontent.com/assets/1527040/21603930/655d859a-d1db-11e6-9fec-c25099d30a12.gif)
 .
 ## Key Bindings
 .
 Some commonly used key bindings:
 .
 | Key               | Action                                     |
 |------------------:|--------------------------------------------|
 | Enter             | Accept (select current one and quit)       |
 | ESC/Ctrl-G        | Abort                                      |
 | Ctrl-P/Up         | Move cursor up                             |
 | Ctrl-N/Down       | Move cursor Down                           |
 | TAB               | Toggle selection and move down (with `-m`) |
 | Shift-TAB         | Toggle selection and move up (with `-m`)   |
 .
 For full list of key bindings, check out the [man
 page](https://github.com/lotabout/skim/blob/master/man/man1/sk.1) (`man sk`).
 .
 ## Search Syntax
 .
 `skim` borrowed `fzf`'s syntax for matching items:
 .
 | Token    | Match type                 | Description                       |
 |----------|----------------------------|-----------------------------------|
 | `text`   | fuzzy-match                | items that match `text`           |
 | `^music` | prefix-exact-match         | items that start with `music`     |
 | `.mp3$`  | suffix-exact-match         | items that end with `.mp3`        |
 | `'wild`  | exact-match (quoted)       | items that include `wild`         |
 | `!fire`  | inverse-exact-match        | items that do not include `fire`  |
 | `!.mp3$` | inverse-suffix-exact-match | items that do not end with `.mp3` |
 .
 `skim` also supports the combination of tokens.
 .
 - Whitespace has the meaning of `AND`. With the term `src main`, `skim` will
 search
     for items that match **both** `src` and `main`.
 - ` | ` means `OR` (note the spaces around `|`). With the term `.md$ |
     .markdown$`, `skim` will search for items ends with either `.md` or
     `.markdown`.
 - `OR` has higher precedence. So `readme .md$ | .markdown$` is grouped into
     `readme AND (.md$ OR .markdown$)`.
 .
 In case that you want to use regular expressions, `skim` provides `regex` mode:
 .
 ```sh
 sk --regex
 ```
 .
 You can switch to `regex` mode dynamically by pressing `Ctrl-R` (Rotate Mode).
 .
 ## exit code
 .
 | Exit Code | Meaning                           |
 |-----------|-----------------------------------|
 | 0         | Exit normally                     |
 | 1         | No Match found                    |
 | 130       | Abort by Ctrl-C/Ctrl-G/ESC/etc... |
 .
 # Customization
 .
 The doc here is only a preview, please check the man page (`man sk`) for a full
 list of options.
 .
 ## Keymap
 .
 Specify the bindings with comma separated pairs (no space allowed), example:
 .
 ```sh
 sk --bind 'alt-a:select-all,alt-d:deselect-all'
 ```
 .
 Additionally, use `+` to concatenate actions, such as `execute-silent(echo {} |
 pbcopy)+abort`.
 .
 See the *KEY BINDINGS* section of the man page for details.
 .
 ## Sort Criteria
 .
 There are five sort keys for results: `score, index, begin, end, length`, you
 can
 specify how the records are sorted by `sk --tiebreak score,index,-begin` or any
 other order you want.
 .
 ## Color Scheme
 .
 It is a high chance that you are a better artist than me. Luckily you won't
 be stuck with the default colors, `skim` supports customization of the color
 scheme.
 .
 ```sh
 --color=[BASE_SCHEME][,COLOR:ANSI]
 ```
 .
 The configuration of colors starts with the name of the base color scheme,
 followed by custom color mappings. For example:
 .
 ```sh
 sk --color=current_bg:24
 sk --color=light,fg:232,bg:255,current_bg:116,info:27
 ```
 .
 See `--color` option in the man page for details.
 .
 ## Misc
 .
 - `--ansi`: to parse ANSI color codes (e.g., `\e[32mABC`) of the data source
 - `--regex`: use the query as regular expression to match the data source
 .
 # Advanced Topics
 .
 ## Interactive mode
 .
 With "interactive mode", you could invoke command dynamically. Try out:
 .
 ```sh
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 How it works?
 .
 ![skim's interactive
 mode](https://user-images.githubusercontent.com/1527040/53381293-461ce380-39ab-11e9-8e86-7c3bbfd557bc.png)
 .
 - Skim could accept two kinds of source: command output or piped input
 - Skim has two kinds of prompts: A query prompt to specify the query pattern
 and a
     command prompt to specify the "arguments" of the command
 - `-c` is used to specify the command to execute while defaults to
 `SKIM_DEFAULT_COMMAND`
 - `-i` is to tell skim open command prompt on startup, which will show `c>` by
 default.
 .
 If you want to further narrow down the results returned by the command, press
 `Ctrl-Q` to toggle interactive mode.
 .
 ## Executing external programs
 .
 You can set up key bindings for starting external processes without leaving
 skim (`execute`, `execute-silent`).
 .
 ```sh
 # Press F1 to open the file with less without leaving skim
 # Press CTRL-Y to copy the line to clipboard and aborts skim (requires pbcopy)
 sk --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} |
 pbcopy)+abort'
 ```
 .
 ## Preview Window
 .
 This is a great feature of fzf that skim borrows. For example, we use 'ag' to
 find the matched lines, once we narrow down to the target lines, we want to
 finally decide which lines to pick by checking the context around the line.
 `grep` and `ag` has an option `--context`, skim can do better with preview
 window. For example:
 .
 ```sh
 sk --ansi -i -c 'ag --color "{}"' --preview "preview.sh {}"
 ```
 .
 (Note the
 [preview.sh](https://github.com/junegunn/fzf.vim/blob/master/bin/preview.sh) is
 a script to print the context given filename:lines:columns)
 You got things like this:
 .
 ![preview
 demo](https://user-images.githubusercontent.com/1527040/30677573-0cee622e-9ebf-11e7-8316-c741324ecb3a.png)
 .
 ### How does it work?
 .
 If the preview command is given by the `--preview` option, skim will replace
 the
 `{}` with the current highlighted line surrounded by single quotes, call the
 command to get the output, and print the output on the preview window.
 .
 Sometimes you don't need the whole line for invoking the command. In this case
 you can use `{}`, `{1..}`, `{..3}` or `{1..5}` to select the fields. The
 syntax is explained in the section "Fields Support".
 .
 Last, you might want to configure the position of preview windows, use
 `--preview-window`.
 .
 - `--preview-window up:30%` to put the window in the up position with height
     30% of the total height of skim.
 - `--preview-window left:10:wrap`, to specify the `wrap` allows the preview
     window to wrap the output of the preview command.
 - `--preview-window wrap:hidden` to hide the preview window at startup, later
     it can be shown by the action `toggle-preview`.
 .
 ## Fields support
 .
 Normally only plugin users need to understand this.
 .
 For example, you have the data source with the format:
 .
 ```sh
 <filename>:<line number>:<column number>
 ```
 .
 However, you want to search `<filename>` only when typing in queries. That
 means when you type `21`, you want to find a `<filename>` that contains `21`,
 but not matching line number or column number.
 .
 You can use `sk --delimiter ':' --nth 1` to achieve this.
 .
 Also you can use `--with-nth` to re-arrange the order of fields.
 .
 **Range Syntax**
 .
 - `<num>` -- to specify the `num`-th fields, starting with 1.
 - `start..` -- starting from the `start`-th fields, and the rest.
 - `..end` -- starting from the `0`-th field, all the way to `end`-th field,
     including `end`.
 - `start..end` -- starting from `start`-th field, all the way to `end`-th
     field, including `end`.
 .
 ## Use as a library
 .
 Skim can be used as a library in your Rust crates.
 .
 First, add skim into your `Cargo.toml`:
 .
 ```toml
 [dependencies]
 skim = "*"
 ```
 .
 Then try to run this simple example:
 .
 ```rust
 extern crate skim;
 use skim::prelude::*;
 use std::io::Cursor;
 .
 pub fn main() {
     let options = SkimOptionsBuilder::default()
         .height(Some("50%"))
         .multi(true)
         .build()
         .unwrap();
 .
     let input = "aaaaa\nbbbb\nccc".to_string();
 .
     // `SkimItemReader` is a helper to turn any `BufRead` into a stream of
 `SkimItem`
     // `SkimItem` was implemented for `AsRef<str>` by default
     let item_reader = SkimItemReader::default();
     let items = item_reader.of_bufread(Cursor::new(input));
 .
     // `run_with` would read and show items from the stream
     let selected_items = Skim::run_with(&options, Some(items))
         .map(|out| out.selected_items)
         .unwrap_or_else(|| Vec::new());
 .
     for item in selected_items.iter() {
         print!("{}{}", item.output(), "\n");
     }
 }
 ```
 .
 Given an `Option<SkimItemReceiver>`, skim will read items accordingly, do its
 job and bring us back the user selection including the selected items, the
 query, etc. Note that:
 .
 - `SkimItemReceiver` is `crossbeam::channel::Receiver<Arc<dyn SkimItem>>`
 - If it is none, it will invoke the given command and read items from command
 output
 - Otherwise, it will read the items from the (crossbeam) channel.
 .
 Trait `SkimItem` is provided to customize how a line could be displayed,
 compared and previewed. It is implemented by default for `AsRef<str>`
 .
 Plus, `SkimItemReader` is a helper to convert a `BufRead` into
 `SkimItemReceiver` (we can easily turn a `File` for `String` into `BufRead`).
 So that you could deal with strings or files easily.
 .
 Check more examples under
 [examples/](https://github.com/lotabout/skim/tree/master/examples) directory.
 .
 # FAQ
 .
 ## How to ignore files?
 .
 Skim invokes `find .` to fetch a list of files for filtering. You can override
 that by setting the environment variable `SKIM_DEFAULT_COMMAND`. For example:
 .
 ```sh
 SKIM_DEFAULT_COMMAND="fd --type f || git ls-tree -r --name-only HEAD || rg
 --files || find ."
 sk
 ```
 .
 You could put it in your `.bashrc` or `.zshrc` if you like it to be default.
 .
 ## Some files are not shown in Vim plugin
 .
 If you use the Vim plugin and execute the `:SK` command, you might find some
 of your files not shown.
 .
 As described in [#3](https://github.com/lotabout/skim/issues/3), in the Vim
 plugin, `SKIM_DEFAULT_COMMAND` is set to the command by default:
 .
 ```vim
 let $SKIM_DEFAULT_COMMAND = "git ls-tree -r --name-only HEAD || rg --files ||
 ag -l -g \"\" || find ."
 ```
 .
 That means, the files not recognized by git will not shown. Either override the
 default with `let $SKIM_DEFAULT_COMMAND = ''` or find the missing file by
 yourself.
 .
 # Differences to fzf
 .
 [fzf](https://github.com/junegunn/fzf) is a command-line fuzzy finder written
 in Go and [skim](https://github.com/lotabout/skim) tries to implement a new one
 in Rust!
 .
 This project is written from scratch. Some decisions of implementation are
 different from fzf. For example:
 .
 1. `skim` is a binary as well as a library while fzf is only a binary.
 2. `skim` has an interactive mode.
 3. `skim` supports pre-selection
 4. The fuzzy search algorithm is different.
 5. ~~UI of showing matched items. `fzf` will show only the range matched while
    `skim` will show each character matched.~~ (fzf has this now)
 6. ~~`skim`'s range syntax is Git style~~: now it is the same with fzf.
 .
 # How to contribute
 .
 [Create new issues](https://github.com/lotabout/skim/issues/new) if you meet
 any bugs
 or have any ideas. Pull requests are warmly welcomed.
 .
 # Troubleshooting
 .
 ## No line feed issues with nix , FreeBSD, termux
 .
 If you encounter display issues like:
 .
 ```bash
 $ for n in {1..10}; do echo "$n"; done | sk
   0/10 0/0.> 10/10  10  9  8  7  6  5  4  3  2> 1
 ```
 .
 For example
 .
 - <https://github.com/lotabout/skim/issues/412>
 - <https://github.com/lotabout/skim/issues/455>
 .
 You need to set TERMINFO or TERMINFO_DIRS to the path to a correct terminfo
 database path
 .
 For example, with termux, you can add in your bashr:
 .
 ```
 export TERMINFO=/data/data/com.termux/files/usr/share/terminfo
 ```
Vcs-Browser: https://github.com/kimono-koans/two_percent
Vcs-Git: https://github.com/kimono-koans/two_percent

Package: two-percent
Version: 0.11.21-1
Architecture: amd64
Maintainer: Zhang Jinzhou <lotabout@gmail.com>
Installed-Size: 5124
Depends: libc6 (>= 2.29)
Filename: ./two-percent_0.11.21-1_amd64.deb
Size: 1444436
MD5sum: 496da27ca4ab0b9976d14152a7d5e227
SHA1: ace37c7bef7bb468df924df7e3b4350308602724
SHA256: 5c648e5127bcdb4065458510ec79b9bd0e9dab3d23658761d5205829335834c3
Priority: optional
Homepage: https://github.com/kimono-koans/two_percent
Description: Fuzzy Finder in rust!
 <p align="center">
   <a href="https://crates.io/crates/skim">
     <img src="https://img.shields.io/crates/v/skim.svg" alt="Crates.io" />
   </a>
   <a
 href="https://github.com/lotabout/skim/actions?query=workflow%3A%22Build+%26+Test%22">
     <img
 src="https://github.com/lotabout/skim/workflows/Build%20&%20Test/badge.svg"
 alt="Build & Test" />
   </a>
   <a href="https://repology.org/project/skim/versions">
     <img src="https://repology.org/badge/tiny-repos/skim.svg" alt="Packaging
 status" />
   </a>
   <a href="https://discord.gg/23PuxttufP">
     <img alt="Skim Discord"
 src="https://img.shields.io/discord/1031830957432504361?label=&color=7389d8&labelColor=6a7ec2&logoColor=ffffff&logo=discord"
 />
   </a>
 </p>
 .
 *Note: `two_percent` is a fork of
 [skim](https://github.com/lotabout/skim/tree/291fc34c58b1670a5e8c95f1e8f930b82c030b19)
 for use with [httm](https://github.com/kimono-koans/httm).*
 .
 > Life is short, skim!
 .
 Half of our life is spent on navigation: files, lines, commands… You need
 skim!
 It is a general fuzzy finder that saves you time.
 .
 [![skim
 demo](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm.svg)](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm)
 .
 skim provides a single executable: `sk`. Basically anywhere you would want to
 use
 `grep`, try `sk` instead.
 .
 # Table of contents
 .
 - [Installation](#installation)
 - [Usage](#usage)
   - [As Filter](#as-filter)
   - [As Interactive Interface](#as-interactive-interface)
   - [Key Bindings](#key-bindings)
   - [Search Syntax](#search-syntax)
   - [Exit code](#exit-code)
 - [Customization](#customization)
   - [Keymap to redefine](#keymap)
   - [Sort Criteria](#sort-criteria)
   - [Color Scheme](#color-scheme)
   - [Misc](#misc)
 - [Advance Topics](#advance-topics)
   - [Interactive Mode](#interactive-mode)
   - [Executing external programs](#executing-external-programs)
   - [Preview Window](#preview-window)
   - [Fields Support](#fields-support)
   - [Use as a Library](#use-as-a-library)
 - [FAQ](#faq)
   - [How to ignore files?](#how-to-ignore-files)
   - [Some files are not shown in vim
 plugin](#some-files-are-not-shown-in-vim-plugin)
 - [Differences to fzf](#differences-to-fzf)
 - [How to contribute](#how-to-contribute)
 .
 # Installation
 .
 The skim project contains several components:
 .
 1. `sk` executable -- the core.
 2. `sk-tmux` -- script for launching `sk` in a tmux pane.
 3. Vim/Nvim plugin -- to call `sk` inside Vim/Nvim. check
 [skim.vim](https://github.com/lotabout/skim.vim) for more Vim support.
 .
 ## Package Managers
 .
 | Distribution   | Package Manager   | Command                      |
 | -------------- | ----------------- | ---------------------------- |
 | macOS          | Homebrew          | `brew install sk`            |
 | macOS          | MacPorts          | `sudo port install skim`     |
 | Fedora         | dnf               | `dnf install skim`           |
 | Alpine         | apk               | `apk add skim`               |
 | Arch           | pacman            | `pacman -S skim`             |
 | Gentoo         | Portage           | `emerge --ask app-misc/skim` |
 .
 See [repology](https://repology.org/project/skim/versions) for a comprehensive
 overview of package availability.
 .
 ## Install as Vim plugin
 .
 Via vim-plug (recommended):
 .
 ```vim
 Plug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install' }
 ```
 .
 ## Hard Core
 .
 Any of the following applies:
 .
 - Using Git
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     ~/.skim/install
     ```
 .
 - Using Binary: directly [download the sk
 executable](https://github.com/lotabout/skim/releases).
 - Install from [crates.io](https://crates.io/): `cargo install skim`
 - Build Manually
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     cd ~/.skim
     cargo install
     cargo build --release
     # put the resulting `target/release/sk` executable on your PATH.
     ```
 .
 # Usage
 .
 skim can be used as a general filter (like `grep`) or as an interactive
 interface for invoking commands.
 .
 ## As filter
 .
 Try the following
 .
 ```bash
 # directly invoke skim
 sk
 .
 # or pipe some input to it: (press TAB key select multiple items with -m
 enabled)
 vim $(find . -name "*.rs" | sk -m)
 ```
 .
 The above command will allow you to select files with ".rs" extension and open
 the ones you selected in Vim.
 .
 ## As Interactive Interface
 .
 `skim` can invoke other commands dynamically. Normally you would want to
 integrate it with [grep](https://www.gnu.org/software/grep/),
 [ack](https://github.com/petdance/ack2),
 [ag](https://github.com/ggreer/the_silver_searcher), or
 [rg](https://github.com/BurntSushi/ripgrep) for searching contents in a
 project directory:
 .
 ```sh
 # works with grep
 sk --ansi -i -c 'grep -rI --color=always --line-number "{}" .'
 # works with ack
 sk --ansi -i -c 'ack --color "{}"'
 # works with ag
 sk --ansi -i -c 'ag --color "{}"'
 # works with rg
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 ![interactive mode
 demo](https://cloud.githubusercontent.com/assets/1527040/21603930/655d859a-d1db-11e6-9fec-c25099d30a12.gif)
 .
 ## Key Bindings
 .
 Some commonly used key bindings:
 .
 | Key               | Action                                     |
 |------------------:|--------------------------------------------|
 | Enter             | Accept (select current one and quit)       |
 | ESC/Ctrl-G        | Abort                                      |
 | Ctrl-P/Up         | Move cursor up                             |
 | Ctrl-N/Down       | Move cursor Down                           |
 | TAB               | Toggle selection and move down (with `-m`) |
 | Shift-TAB         | Toggle selection and move up (with `-m`)   |
 .
 For full list of key bindings, check out the [man
 page](https://github.com/lotabout/skim/blob/master/man/man1/sk.1) (`man sk`).
 .
 ## Search Syntax
 .
 `skim` borrowed `fzf`'s syntax for matching items:
 .
 | Token    | Match type                 | Description                       |
 |----------|----------------------------|-----------------------------------|
 | `text`   | fuzzy-match                | items that match `text`           |
 | `^music` | prefix-exact-match         | items that start with `music`     |
 | `.mp3$`  | suffix-exact-match         | items that end with `.mp3`        |
 | `'wild`  | exact-match (quoted)       | items that include `wild`         |
 | `!fire`  | inverse-exact-match        | items that do not include `fire`  |
 | `!.mp3$` | inverse-suffix-exact-match | items that do not end with `.mp3` |
 .
 `skim` also supports the combination of tokens.
 .
 - Whitespace has the meaning of `AND`. With the term `src main`, `skim` will
 search
     for items that match **both** `src` and `main`.
 - ` | ` means `OR` (note the spaces around `|`). With the term `.md$ |
     .markdown$`, `skim` will search for items ends with either `.md` or
     `.markdown`.
 - `OR` has higher precedence. So `readme .md$ | .markdown$` is grouped into
     `readme AND (.md$ OR .markdown$)`.
 .
 In case that you want to use regular expressions, `skim` provides `regex` mode:
 .
 ```sh
 sk --regex
 ```
 .
 You can switch to `regex` mode dynamically by pressing `Ctrl-R` (Rotate Mode).
 .
 ## exit code
 .
 | Exit Code | Meaning                           |
 |-----------|-----------------------------------|
 | 0         | Exit normally                     |
 | 1         | No Match found                    |
 | 130       | Abort by Ctrl-C/Ctrl-G/ESC/etc... |
 .
 # Customization
 .
 The doc here is only a preview, please check the man page (`man sk`) for a full
 list of options.
 .
 ## Keymap
 .
 Specify the bindings with comma separated pairs (no space allowed), example:
 .
 ```sh
 sk --bind 'alt-a:select-all,alt-d:deselect-all'
 ```
 .
 Additionally, use `+` to concatenate actions, such as `execute-silent(echo {} |
 pbcopy)+abort`.
 .
 See the *KEY BINDINGS* section of the man page for details.
 .
 ## Sort Criteria
 .
 There are five sort keys for results: `score, index, begin, end, length`, you
 can
 specify how the records are sorted by `sk --tiebreak score,index,-begin` or any
 other order you want.
 .
 ## Color Scheme
 .
 It is a high chance that you are a better artist than me. Luckily you won't
 be stuck with the default colors, `skim` supports customization of the color
 scheme.
 .
 ```sh
 --color=[BASE_SCHEME][,COLOR:ANSI]
 ```
 .
 The configuration of colors starts with the name of the base color scheme,
 followed by custom color mappings. For example:
 .
 ```sh
 sk --color=current_bg:24
 sk --color=light,fg:232,bg:255,current_bg:116,info:27
 ```
 .
 See `--color` option in the man page for details.
 .
 ## Misc
 .
 - `--ansi`: to parse ANSI color codes (e.g., `\e[32mABC`) of the data source
 - `--regex`: use the query as regular expression to match the data source
 .
 # Advanced Topics
 .
 ## Interactive mode
 .
 With "interactive mode", you could invoke command dynamically. Try out:
 .
 ```sh
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 How it works?
 .
 ![skim's interactive
 mode](https://user-images.githubusercontent.com/1527040/53381293-461ce380-39ab-11e9-8e86-7c3bbfd557bc.png)
 .
 - Skim could accept two kinds of source: command output or piped input
 - Skim has two kinds of prompts: A query prompt to specify the query pattern
 and a
     command prompt to specify the "arguments" of the command
 - `-c` is used to specify the command to execute while defaults to
 `SKIM_DEFAULT_COMMAND`
 - `-i` is to tell skim open command prompt on startup, which will show `c>` by
 default.
 .
 If you want to further narrow down the results returned by the command, press
 `Ctrl-Q` to toggle interactive mode.
 .
 ## Executing external programs
 .
 You can set up key bindings for starting external processes without leaving
 skim (`execute`, `execute-silent`).
 .
 ```sh
 # Press F1 to open the file with less without leaving skim
 # Press CTRL-Y to copy the line to clipboard and aborts skim (requires pbcopy)
 sk --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} |
 pbcopy)+abort'
 ```
 .
 ## Preview Window
 .
 This is a great feature of fzf that skim borrows. For example, we use 'ag' to
 find the matched lines, once we narrow down to the target lines, we want to
 finally decide which lines to pick by checking the context around the line.
 `grep` and `ag` has an option `--context`, skim can do better with preview
 window. For example:
 .
 ```sh
 sk --ansi -i -c 'ag --color "{}"' --preview "preview.sh {}"
 ```
 .
 (Note the
 [preview.sh](https://github.com/junegunn/fzf.vim/blob/master/bin/preview.sh) is
 a script to print the context given filename:lines:columns)
 You got things like this:
 .
 ![preview
 demo](https://user-images.githubusercontent.com/1527040/30677573-0cee622e-9ebf-11e7-8316-c741324ecb3a.png)
 .
 ### How does it work?
 .
 If the preview command is given by the `--preview` option, skim will replace
 the
 `{}` with the current highlighted line surrounded by single quotes, call the
 command to get the output, and print the output on the preview window.
 .
 Sometimes you don't need the whole line for invoking the command. In this case
 you can use `{}`, `{1..}`, `{..3}` or `{1..5}` to select the fields. The
 syntax is explained in the section "Fields Support".
 .
 Last, you might want to configure the position of preview windows, use
 `--preview-window`.
 .
 - `--preview-window up:30%` to put the window in the up position with height
     30% of the total height of skim.
 - `--preview-window left:10:wrap`, to specify the `wrap` allows the preview
     window to wrap the output of the preview command.
 - `--preview-window wrap:hidden` to hide the preview window at startup, later
     it can be shown by the action `toggle-preview`.
 .
 ## Fields support
 .
 Normally only plugin users need to understand this.
 .
 For example, you have the data source with the format:
 .
 ```sh
 <filename>:<line number>:<column number>
 ```
 .
 However, you want to search `<filename>` only when typing in queries. That
 means when you type `21`, you want to find a `<filename>` that contains `21`,
 but not matching line number or column number.
 .
 You can use `sk --delimiter ':' --nth 1` to achieve this.
 .
 Also you can use `--with-nth` to re-arrange the order of fields.
 .
 **Range Syntax**
 .
 - `<num>` -- to specify the `num`-th fields, starting with 1.
 - `start..` -- starting from the `start`-th fields, and the rest.
 - `..end` -- starting from the `0`-th field, all the way to `end`-th field,
     including `end`.
 - `start..end` -- starting from `start`-th field, all the way to `end`-th
     field, including `end`.
 .
 ## Use as a library
 .
 Skim can be used as a library in your Rust crates.
 .
 First, add skim into your `Cargo.toml`:
 .
 ```toml
 [dependencies]
 skim = "*"
 ```
 .
 Then try to run this simple example:
 .
 ```rust
 extern crate skim;
 use skim::prelude::*;
 use std::io::Cursor;
 .
 pub fn main() {
     let options = SkimOptionsBuilder::default()
         .height(Some("50%"))
         .multi(true)
         .build()
         .unwrap();
 .
     let input = "aaaaa\nbbbb\nccc".to_string();
 .
     // `SkimItemReader` is a helper to turn any `BufRead` into a stream of
 `SkimItem`
     // `SkimItem` was implemented for `AsRef<str>` by default
     let item_reader = SkimItemReader::default();
     let items = item_reader.of_bufread(Cursor::new(input));
 .
     // `run_with` would read and show items from the stream
     let selected_items = Skim::run_with(&options, Some(items))
         .map(|out| out.selected_items)
         .unwrap_or_else(|| Vec::new());
 .
     for item in selected_items.iter() {
         print!("{}{}", item.output(), "\n");
     }
 }
 ```
 .
 Given an `Option<SkimItemReceiver>`, skim will read items accordingly, do its
 job and bring us back the user selection including the selected items, the
 query, etc. Note that:
 .
 - `SkimItemReceiver` is `crossbeam::channel::Receiver<Arc<dyn SkimItem>>`
 - If it is none, it will invoke the given command and read items from command
 output
 - Otherwise, it will read the items from the (crossbeam) channel.
 .
 Trait `SkimItem` is provided to customize how a line could be displayed,
 compared and previewed. It is implemented by default for `AsRef<str>`
 .
 Plus, `SkimItemReader` is a helper to convert a `BufRead` into
 `SkimItemReceiver` (we can easily turn a `File` for `String` into `BufRead`).
 So that you could deal with strings or files easily.
 .
 Check more examples under
 [examples/](https://github.com/lotabout/skim/tree/master/examples) directory.
 .
 # FAQ
 .
 ## How to ignore files?
 .
 Skim invokes `find .` to fetch a list of files for filtering. You can override
 that by setting the environment variable `SKIM_DEFAULT_COMMAND`. For example:
 .
 ```sh
 SKIM_DEFAULT_COMMAND="fd --type f || git ls-tree -r --name-only HEAD || rg
 --files || find ."
 sk
 ```
 .
 You could put it in your `.bashrc` or `.zshrc` if you like it to be default.
 .
 ## Some files are not shown in Vim plugin
 .
 If you use the Vim plugin and execute the `:SK` command, you might find some
 of your files not shown.
 .
 As described in [#3](https://github.com/lotabout/skim/issues/3), in the Vim
 plugin, `SKIM_DEFAULT_COMMAND` is set to the command by default:
 .
 ```vim
 let $SKIM_DEFAULT_COMMAND = "git ls-tree -r --name-only HEAD || rg --files ||
 ag -l -g \"\" || find ."
 ```
 .
 That means, the files not recognized by git will not shown. Either override the
 default with `let $SKIM_DEFAULT_COMMAND = ''` or find the missing file by
 yourself.
 .
 # Differences to fzf
 .
 [fzf](https://github.com/junegunn/fzf) is a command-line fuzzy finder written
 in Go and [skim](https://github.com/lotabout/skim) tries to implement a new one
 in Rust!
 .
 This project is written from scratch. Some decisions of implementation are
 different from fzf. For example:
 .
 1. `skim` is a binary as well as a library while fzf is only a binary.
 2. `skim` has an interactive mode.
 3. `skim` supports pre-selection
 4. The fuzzy search algorithm is different.
 5. ~~UI of showing matched items. `fzf` will show only the range matched while
    `skim` will show each character matched.~~ (fzf has this now)
 6. ~~`skim`'s range syntax is Git style~~: now it is the same with fzf.
 .
 # How to contribute
 .
 [Create new issues](https://github.com/lotabout/skim/issues/new) if you meet
 any bugs
 or have any ideas. Pull requests are warmly welcomed.
 .
 # Troubleshooting
 .
 ## No line feed issues with nix , FreeBSD, termux
 .
 If you encounter display issues like:
 .
 ```bash
 $ for n in {1..10}; do echo "$n"; done | sk
   0/10 0/0.> 10/10  10  9  8  7  6  5  4  3  2> 1
 ```
 .
 For example
 .
 - <https://github.com/lotabout/skim/issues/412>
 - <https://github.com/lotabout/skim/issues/455>
 .
 You need to set TERMINFO or TERMINFO_DIRS to the path to a correct terminfo
 database path
 .
 For example, with termux, you can add in your bashr:
 .
 ```
 export TERMINFO=/data/data/com.termux/files/usr/share/terminfo
 ```
Vcs-Browser: https://github.com/kimono-koans/two_percent
Vcs-Git: https://github.com/kimono-koans/two_percent

Package: two-percent
Version: 0.11.22-1
Architecture: amd64
Maintainer: Zhang Jinzhou <lotabout@gmail.com>
Installed-Size: 5138
Depends: libc6 (>= 2.29)
Filename: ./two-percent_0.11.22-1_amd64.deb
Size: 1450728
MD5sum: ef0babe33cf6f4a0349e09986cd08520
SHA1: abad50c0f0351b64ddd10b19d859c8cfcdf94df2
SHA256: 74882d3a30ceb89763528e9173c8c6e4774013399ada1a35b9d03d82129ae40a
Priority: optional
Homepage: https://github.com/kimono-koans/two_percent
Description: Fuzzy Finder in rust!
 <p align="center">
   <a href="https://crates.io/crates/skim">
     <img src="https://img.shields.io/crates/v/skim.svg" alt="Crates.io" />
   </a>
   <a
 href="https://github.com/lotabout/skim/actions?query=workflow%3A%22Build+%26+Test%22">
     <img
 src="https://github.com/lotabout/skim/workflows/Build%20&%20Test/badge.svg"
 alt="Build & Test" />
   </a>
   <a href="https://repology.org/project/skim/versions">
     <img src="https://repology.org/badge/tiny-repos/skim.svg" alt="Packaging
 status" />
   </a>
   <a href="https://discord.gg/23PuxttufP">
     <img alt="Skim Discord"
 src="https://img.shields.io/discord/1031830957432504361?label=&color=7389d8&labelColor=6a7ec2&logoColor=ffffff&logo=discord"
 />
   </a>
 </p>
 .
 *Note: `two_percent` is a fork of
 [skim](https://github.com/lotabout/skim/tree/291fc34c58b1670a5e8c95f1e8f930b82c030b19)
 for use with [httm](https://github.com/kimono-koans/httm).*
 .
 > Life is short, skim!
 .
 Half of our life is spent on navigation: files, lines, commands… You need
 skim!
 It is a general fuzzy finder that saves you time.
 .
 [![skim
 demo](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm.svg)](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm)
 .
 skim provides a single executable: `sk`. Basically anywhere you would want to
 use
 `grep`, try `sk` instead.
 .
 # Table of contents
 .
 - [Installation](#installation)
 - [Usage](#usage)
   - [As Filter](#as-filter)
   - [As Interactive Interface](#as-interactive-interface)
   - [Key Bindings](#key-bindings)
   - [Search Syntax](#search-syntax)
   - [Exit code](#exit-code)
 - [Customization](#customization)
   - [Keymap to redefine](#keymap)
   - [Sort Criteria](#sort-criteria)
   - [Color Scheme](#color-scheme)
   - [Misc](#misc)
 - [Advance Topics](#advance-topics)
   - [Interactive Mode](#interactive-mode)
   - [Executing external programs](#executing-external-programs)
   - [Preview Window](#preview-window)
   - [Fields Support](#fields-support)
   - [Use as a Library](#use-as-a-library)
 - [FAQ](#faq)
   - [How to ignore files?](#how-to-ignore-files)
   - [Some files are not shown in vim
 plugin](#some-files-are-not-shown-in-vim-plugin)
 - [Differences to fzf](#differences-to-fzf)
 - [How to contribute](#how-to-contribute)
 .
 # Installation
 .
 The skim project contains several components:
 .
 1. `sk` executable -- the core.
 2. `sk-tmux` -- script for launching `sk` in a tmux pane.
 3. Vim/Nvim plugin -- to call `sk` inside Vim/Nvim. check
 [skim.vim](https://github.com/lotabout/skim.vim) for more Vim support.
 .
 ## Package Managers
 .
 | Distribution   | Package Manager   | Command                      |
 | -------------- | ----------------- | ---------------------------- |
 | macOS          | Homebrew          | `brew install sk`            |
 | macOS          | MacPorts          | `sudo port install skim`     |
 | Fedora         | dnf               | `dnf install skim`           |
 | Alpine         | apk               | `apk add skim`               |
 | Arch           | pacman            | `pacman -S skim`             |
 | Gentoo         | Portage           | `emerge --ask app-misc/skim` |
 .
 See [repology](https://repology.org/project/skim/versions) for a comprehensive
 overview of package availability.
 .
 ## Install as Vim plugin
 .
 Via vim-plug (recommended):
 .
 ```vim
 Plug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install' }
 ```
 .
 ## Hard Core
 .
 Any of the following applies:
 .
 - Using Git
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     ~/.skim/install
     ```
 .
 - Using Binary: directly [download the sk
 executable](https://github.com/lotabout/skim/releases).
 - Install from [crates.io](https://crates.io/): `cargo install skim`
 - Build Manually
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     cd ~/.skim
     cargo install
     cargo build --release
     # put the resulting `target/release/sk` executable on your PATH.
     ```
 .
 # Usage
 .
 skim can be used as a general filter (like `grep`) or as an interactive
 interface for invoking commands.
 .
 ## As filter
 .
 Try the following
 .
 ```bash
 # directly invoke skim
 sk
 .
 # or pipe some input to it: (press TAB key select multiple items with -m
 enabled)
 vim $(find . -name "*.rs" | sk -m)
 ```
 .
 The above command will allow you to select files with ".rs" extension and open
 the ones you selected in Vim.
 .
 ## As Interactive Interface
 .
 `skim` can invoke other commands dynamically. Normally you would want to
 integrate it with [grep](https://www.gnu.org/software/grep/),
 [ack](https://github.com/petdance/ack2),
 [ag](https://github.com/ggreer/the_silver_searcher), or
 [rg](https://github.com/BurntSushi/ripgrep) for searching contents in a
 project directory:
 .
 ```sh
 # works with grep
 sk --ansi -i -c 'grep -rI --color=always --line-number "{}" .'
 # works with ack
 sk --ansi -i -c 'ack --color "{}"'
 # works with ag
 sk --ansi -i -c 'ag --color "{}"'
 # works with rg
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 ![interactive mode
 demo](https://cloud.githubusercontent.com/assets/1527040/21603930/655d859a-d1db-11e6-9fec-c25099d30a12.gif)
 .
 ## Key Bindings
 .
 Some commonly used key bindings:
 .
 | Key               | Action                                     |
 |------------------:|--------------------------------------------|
 | Enter             | Accept (select current one and quit)       |
 | ESC/Ctrl-G        | Abort                                      |
 | Ctrl-P/Up         | Move cursor up                             |
 | Ctrl-N/Down       | Move cursor Down                           |
 | TAB               | Toggle selection and move down (with `-m`) |
 | Shift-TAB         | Toggle selection and move up (with `-m`)   |
 .
 For full list of key bindings, check out the [man
 page](https://github.com/lotabout/skim/blob/master/man/man1/sk.1) (`man sk`).
 .
 ## Search Syntax
 .
 `skim` borrowed `fzf`'s syntax for matching items:
 .
 | Token    | Match type                 | Description                       |
 |----------|----------------------------|-----------------------------------|
 | `text`   | fuzzy-match                | items that match `text`           |
 | `^music` | prefix-exact-match         | items that start with `music`     |
 | `.mp3$`  | suffix-exact-match         | items that end with `.mp3`        |
 | `'wild`  | exact-match (quoted)       | items that include `wild`         |
 | `!fire`  | inverse-exact-match        | items that do not include `fire`  |
 | `!.mp3$` | inverse-suffix-exact-match | items that do not end with `.mp3` |
 .
 `skim` also supports the combination of tokens.
 .
 - Whitespace has the meaning of `AND`. With the term `src main`, `skim` will
 search
     for items that match **both** `src` and `main`.
 - ` | ` means `OR` (note the spaces around `|`). With the term `.md$ |
     .markdown$`, `skim` will search for items ends with either `.md` or
     `.markdown`.
 - `OR` has higher precedence. So `readme .md$ | .markdown$` is grouped into
     `readme AND (.md$ OR .markdown$)`.
 .
 In case that you want to use regular expressions, `skim` provides `regex` mode:
 .
 ```sh
 sk --regex
 ```
 .
 You can switch to `regex` mode dynamically by pressing `Ctrl-R` (Rotate Mode).
 .
 ## exit code
 .
 | Exit Code | Meaning                           |
 |-----------|-----------------------------------|
 | 0         | Exit normally                     |
 | 1         | No Match found                    |
 | 130       | Abort by Ctrl-C/Ctrl-G/ESC/etc... |
 .
 # Customization
 .
 The doc here is only a preview, please check the man page (`man sk`) for a full
 list of options.
 .
 ## Keymap
 .
 Specify the bindings with comma separated pairs (no space allowed), example:
 .
 ```sh
 sk --bind 'alt-a:select-all,alt-d:deselect-all'
 ```
 .
 Additionally, use `+` to concatenate actions, such as `execute-silent(echo {} |
 pbcopy)+abort`.
 .
 See the *KEY BINDINGS* section of the man page for details.
 .
 ## Sort Criteria
 .
 There are five sort keys for results: `score, index, begin, end, length`, you
 can
 specify how the records are sorted by `sk --tiebreak score,index,-begin` or any
 other order you want.
 .
 ## Color Scheme
 .
 It is a high chance that you are a better artist than me. Luckily you won't
 be stuck with the default colors, `skim` supports customization of the color
 scheme.
 .
 ```sh
 --color=[BASE_SCHEME][,COLOR:ANSI]
 ```
 .
 The configuration of colors starts with the name of the base color scheme,
 followed by custom color mappings. For example:
 .
 ```sh
 sk --color=current_bg:24
 sk --color=light,fg:232,bg:255,current_bg:116,info:27
 ```
 .
 See `--color` option in the man page for details.
 .
 ## Misc
 .
 - `--ansi`: to parse ANSI color codes (e.g., `\e[32mABC`) of the data source
 - `--regex`: use the query as regular expression to match the data source
 .
 # Advanced Topics
 .
 ## Interactive mode
 .
 With "interactive mode", you could invoke command dynamically. Try out:
 .
 ```sh
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 How it works?
 .
 ![skim's interactive
 mode](https://user-images.githubusercontent.com/1527040/53381293-461ce380-39ab-11e9-8e86-7c3bbfd557bc.png)
 .
 - Skim could accept two kinds of source: command output or piped input
 - Skim has two kinds of prompts: A query prompt to specify the query pattern
 and a
     command prompt to specify the "arguments" of the command
 - `-c` is used to specify the command to execute while defaults to
 `SKIM_DEFAULT_COMMAND`
 - `-i` is to tell skim open command prompt on startup, which will show `c>` by
 default.
 .
 If you want to further narrow down the results returned by the command, press
 `Ctrl-Q` to toggle interactive mode.
 .
 ## Executing external programs
 .
 You can set up key bindings for starting external processes without leaving
 skim (`execute`, `execute-silent`).
 .
 ```sh
 # Press F1 to open the file with less without leaving skim
 # Press CTRL-Y to copy the line to clipboard and aborts skim (requires pbcopy)
 sk --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} |
 pbcopy)+abort'
 ```
 .
 ## Preview Window
 .
 This is a great feature of fzf that skim borrows. For example, we use 'ag' to
 find the matched lines, once we narrow down to the target lines, we want to
 finally decide which lines to pick by checking the context around the line.
 `grep` and `ag` has an option `--context`, skim can do better with preview
 window. For example:
 .
 ```sh
 sk --ansi -i -c 'ag --color "{}"' --preview "preview.sh {}"
 ```
 .
 (Note the
 [preview.sh](https://github.com/junegunn/fzf.vim/blob/master/bin/preview.sh) is
 a script to print the context given filename:lines:columns)
 You got things like this:
 .
 ![preview
 demo](https://user-images.githubusercontent.com/1527040/30677573-0cee622e-9ebf-11e7-8316-c741324ecb3a.png)
 .
 ### How does it work?
 .
 If the preview command is given by the `--preview` option, skim will replace
 the
 `{}` with the current highlighted line surrounded by single quotes, call the
 command to get the output, and print the output on the preview window.
 .
 Sometimes you don't need the whole line for invoking the command. In this case
 you can use `{}`, `{1..}`, `{..3}` or `{1..5}` to select the fields. The
 syntax is explained in the section "Fields Support".
 .
 Last, you might want to configure the position of preview windows, use
 `--preview-window`.
 .
 - `--preview-window up:30%` to put the window in the up position with height
     30% of the total height of skim.
 - `--preview-window left:10:wrap`, to specify the `wrap` allows the preview
     window to wrap the output of the preview command.
 - `--preview-window wrap:hidden` to hide the preview window at startup, later
     it can be shown by the action `toggle-preview`.
 .
 ## Fields support
 .
 Normally only plugin users need to understand this.
 .
 For example, you have the data source with the format:
 .
 ```sh
 <filename>:<line number>:<column number>
 ```
 .
 However, you want to search `<filename>` only when typing in queries. That
 means when you type `21`, you want to find a `<filename>` that contains `21`,
 but not matching line number or column number.
 .
 You can use `sk --delimiter ':' --nth 1` to achieve this.
 .
 Also you can use `--with-nth` to re-arrange the order of fields.
 .
 **Range Syntax**
 .
 - `<num>` -- to specify the `num`-th fields, starting with 1.
 - `start..` -- starting from the `start`-th fields, and the rest.
 - `..end` -- starting from the `0`-th field, all the way to `end`-th field,
     including `end`.
 - `start..end` -- starting from `start`-th field, all the way to `end`-th
     field, including `end`.
 .
 ## Use as a library
 .
 Skim can be used as a library in your Rust crates.
 .
 First, add skim into your `Cargo.toml`:
 .
 ```toml
 [dependencies]
 skim = "*"
 ```
 .
 Then try to run this simple example:
 .
 ```rust
 extern crate skim;
 use skim::prelude::*;
 use std::io::Cursor;
 .
 pub fn main() {
     let options = SkimOptionsBuilder::default()
         .height(Some("50%"))
         .multi(true)
         .build()
         .unwrap();
 .
     let input = "aaaaa\nbbbb\nccc".to_string();
 .
     // `SkimItemReader` is a helper to turn any `BufRead` into a stream of
 `SkimItem`
     // `SkimItem` was implemented for `AsRef<str>` by default
     let item_reader = SkimItemReader::default();
     let items = item_reader.of_bufread(Cursor::new(input));
 .
     // `run_with` would read and show items from the stream
     let selected_items = Skim::run_with(&options, Some(items))
         .map(|out| out.selected_items)
         .unwrap_or_else(|| Vec::new());
 .
     for item in selected_items.iter() {
         print!("{}{}", item.output(), "\n");
     }
 }
 ```
 .
 Given an `Option<SkimItemReceiver>`, skim will read items accordingly, do its
 job and bring us back the user selection including the selected items, the
 query, etc. Note that:
 .
 - `SkimItemReceiver` is `crossbeam::channel::Receiver<Arc<dyn SkimItem>>`
 - If it is none, it will invoke the given command and read items from command
 output
 - Otherwise, it will read the items from the (crossbeam) channel.
 .
 Trait `SkimItem` is provided to customize how a line could be displayed,
 compared and previewed. It is implemented by default for `AsRef<str>`
 .
 Plus, `SkimItemReader` is a helper to convert a `BufRead` into
 `SkimItemReceiver` (we can easily turn a `File` for `String` into `BufRead`).
 So that you could deal with strings or files easily.
 .
 Check more examples under
 [examples/](https://github.com/lotabout/skim/tree/master/examples) directory.
 .
 # FAQ
 .
 ## How to ignore files?
 .
 Skim invokes `find .` to fetch a list of files for filtering. You can override
 that by setting the environment variable `SKIM_DEFAULT_COMMAND`. For example:
 .
 ```sh
 SKIM_DEFAULT_COMMAND="fd --type f || git ls-tree -r --name-only HEAD || rg
 --files || find ."
 sk
 ```
 .
 You could put it in your `.bashrc` or `.zshrc` if you like it to be default.
 .
 ## Some files are not shown in Vim plugin
 .
 If you use the Vim plugin and execute the `:SK` command, you might find some
 of your files not shown.
 .
 As described in [#3](https://github.com/lotabout/skim/issues/3), in the Vim
 plugin, `SKIM_DEFAULT_COMMAND` is set to the command by default:
 .
 ```vim
 let $SKIM_DEFAULT_COMMAND = "git ls-tree -r --name-only HEAD || rg --files ||
 ag -l -g \"\" || find ."
 ```
 .
 That means, the files not recognized by git will not shown. Either override the
 default with `let $SKIM_DEFAULT_COMMAND = ''` or find the missing file by
 yourself.
 .
 # Differences to fzf
 .
 [fzf](https://github.com/junegunn/fzf) is a command-line fuzzy finder written
 in Go and [skim](https://github.com/lotabout/skim) tries to implement a new one
 in Rust!
 .
 This project is written from scratch. Some decisions of implementation are
 different from fzf. For example:
 .
 1. `skim` is a binary as well as a library while fzf is only a binary.
 2. `skim` has an interactive mode.
 3. `skim` supports pre-selection
 4. The fuzzy search algorithm is different.
 5. ~~UI of showing matched items. `fzf` will show only the range matched while
    `skim` will show each character matched.~~ (fzf has this now)
 6. ~~`skim`'s range syntax is Git style~~: now it is the same with fzf.
 .
 # How to contribute
 .
 [Create new issues](https://github.com/lotabout/skim/issues/new) if you meet
 any bugs
 or have any ideas. Pull requests are warmly welcomed.
 .
 # Troubleshooting
 .
 ## No line feed issues with nix , FreeBSD, termux
 .
 If you encounter display issues like:
 .
 ```bash
 $ for n in {1..10}; do echo "$n"; done | sk
   0/10 0/0.> 10/10  10  9  8  7  6  5  4  3  2> 1
 ```
 .
 For example
 .
 - <https://github.com/lotabout/skim/issues/412>
 - <https://github.com/lotabout/skim/issues/455>
 .
 You need to set TERMINFO or TERMINFO_DIRS to the path to a correct terminfo
 database path
 .
 For example, with termux, you can add in your bashr:
 .
 ```
 export TERMINFO=/data/data/com.termux/files/usr/share/terminfo
 ```
Vcs-Browser: https://github.com/kimono-koans/two_percent
Vcs-Git: https://github.com/kimono-koans/two_percent

Package: two-percent
Version: 0.11.23-1
Architecture: amd64
Maintainer: Zhang Jinzhou <lotabout@gmail.com>
Installed-Size: 4308
Depends: libc6 (>= 2.29)
Filename: ./two-percent_0.11.23-1_amd64.deb
Size: 1364532
MD5sum: cbde772b57dc29793cb0cb7eae8350e5
SHA1: 70395e43e5beccbf5a50508ef631dc206177a544
SHA256: d35c758ae8f45662b26b92b7f900c410a533d6be43aea046d005f20aa37cd4c4
Priority: optional
Homepage: https://github.com/kimono-koans/two_percent
Description: Fuzzy Finder in rust!
 <p align="center">
   <a href="https://crates.io/crates/skim">
     <img src="https://img.shields.io/crates/v/skim.svg" alt="Crates.io" />
   </a>
   <a
 href="https://github.com/lotabout/skim/actions?query=workflow%3A%22Build+%26+Test%22">
     <img
 src="https://github.com/lotabout/skim/workflows/Build%20&%20Test/badge.svg"
 alt="Build & Test" />
   </a>
   <a href="https://repology.org/project/skim/versions">
     <img src="https://repology.org/badge/tiny-repos/skim.svg" alt="Packaging
 status" />
   </a>
   <a href="https://discord.gg/23PuxttufP">
     <img alt="Skim Discord"
 src="https://img.shields.io/discord/1031830957432504361?label=&color=7389d8&labelColor=6a7ec2&logoColor=ffffff&logo=discord"
 />
   </a>
 </p>
 .
 *Note: `two_percent` is a fork of
 [skim](https://github.com/lotabout/skim/tree/291fc34c58b1670a5e8c95f1e8f930b82c030b19)
 for use with [httm](https://github.com/kimono-koans/httm).*
 .
 > Life is short, skim!
 .
 Half of our life is spent on navigation: files, lines, commands… You need
 skim!
 It is a general fuzzy finder that saves you time.
 .
 [![skim
 demo](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm.svg)](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm)
 .
 skim provides a single executable: `sk`. Basically anywhere you would want to
 use
 `grep`, try `sk` instead.
 .
 # Table of contents
 .
 - [Installation](#installation)
 - [Usage](#usage)
   - [As Filter](#as-filter)
   - [As Interactive Interface](#as-interactive-interface)
   - [Key Bindings](#key-bindings)
   - [Search Syntax](#search-syntax)
   - [Exit code](#exit-code)
 - [Customization](#customization)
   - [Keymap to redefine](#keymap)
   - [Sort Criteria](#sort-criteria)
   - [Color Scheme](#color-scheme)
   - [Misc](#misc)
 - [Advance Topics](#advance-topics)
   - [Interactive Mode](#interactive-mode)
   - [Executing external programs](#executing-external-programs)
   - [Preview Window](#preview-window)
   - [Fields Support](#fields-support)
   - [Use as a Library](#use-as-a-library)
 - [FAQ](#faq)
   - [How to ignore files?](#how-to-ignore-files)
   - [Some files are not shown in vim
 plugin](#some-files-are-not-shown-in-vim-plugin)
 - [Differences to fzf](#differences-to-fzf)
 - [How to contribute](#how-to-contribute)
 .
 # Installation
 .
 The skim project contains several components:
 .
 1. `sk` executable -- the core.
 2. `sk-tmux` -- script for launching `sk` in a tmux pane.
 3. Vim/Nvim plugin -- to call `sk` inside Vim/Nvim. check
 [skim.vim](https://github.com/lotabout/skim.vim) for more Vim support.
 .
 ## Package Managers
 .
 | Distribution   | Package Manager   | Command                      |
 | -------------- | ----------------- | ---------------------------- |
 | macOS          | Homebrew          | `brew install sk`            |
 | macOS          | MacPorts          | `sudo port install skim`     |
 | Fedora         | dnf               | `dnf install skim`           |
 | Alpine         | apk               | `apk add skim`               |
 | Arch           | pacman            | `pacman -S skim`             |
 | Gentoo         | Portage           | `emerge --ask app-misc/skim` |
 .
 See [repology](https://repology.org/project/skim/versions) for a comprehensive
 overview of package availability.
 .
 ## Install as Vim plugin
 .
 Via vim-plug (recommended):
 .
 ```vim
 Plug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install' }
 ```
 .
 ## Hard Core
 .
 Any of the following applies:
 .
 - Using Git
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     ~/.skim/install
     ```
 .
 - Using Binary: directly [download the sk
 executable](https://github.com/lotabout/skim/releases).
 - Install from [crates.io](https://crates.io/): `cargo install skim`
 - Build Manually
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     cd ~/.skim
     cargo install
     cargo build --release
     # put the resulting `target/release/sk` executable on your PATH.
     ```
 .
 # Usage
 .
 skim can be used as a general filter (like `grep`) or as an interactive
 interface for invoking commands.
 .
 ## As filter
 .
 Try the following
 .
 ```bash
 # directly invoke skim
 sk
 .
 # or pipe some input to it: (press TAB key select multiple items with -m
 enabled)
 vim $(find . -name "*.rs" | sk -m)
 ```
 .
 The above command will allow you to select files with ".rs" extension and open
 the ones you selected in Vim.
 .
 ## As Interactive Interface
 .
 `skim` can invoke other commands dynamically. Normally you would want to
 integrate it with [grep](https://www.gnu.org/software/grep/),
 [ack](https://github.com/petdance/ack2),
 [ag](https://github.com/ggreer/the_silver_searcher), or
 [rg](https://github.com/BurntSushi/ripgrep) for searching contents in a
 project directory:
 .
 ```sh
 # works with grep
 sk --ansi -i -c 'grep -rI --color=always --line-number "{}" .'
 # works with ack
 sk --ansi -i -c 'ack --color "{}"'
 # works with ag
 sk --ansi -i -c 'ag --color "{}"'
 # works with rg
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 ![interactive mode
 demo](https://cloud.githubusercontent.com/assets/1527040/21603930/655d859a-d1db-11e6-9fec-c25099d30a12.gif)
 .
 ## Key Bindings
 .
 Some commonly used key bindings:
 .
 | Key               | Action                                     |
 |------------------:|--------------------------------------------|
 | Enter             | Accept (select current one and quit)       |
 | ESC/Ctrl-G        | Abort                                      |
 | Ctrl-P/Up         | Move cursor up                             |
 | Ctrl-N/Down       | Move cursor Down                           |
 | TAB               | Toggle selection and move down (with `-m`) |
 | Shift-TAB         | Toggle selection and move up (with `-m`)   |
 .
 For full list of key bindings, check out the [man
 page](https://github.com/lotabout/skim/blob/master/man/man1/sk.1) (`man sk`).
 .
 ## Search Syntax
 .
 `skim` borrowed `fzf`'s syntax for matching items:
 .
 | Token    | Match type                 | Description                       |
 |----------|----------------------------|-----------------------------------|
 | `text`   | fuzzy-match                | items that match `text`           |
 | `^music` | prefix-exact-match         | items that start with `music`     |
 | `.mp3$`  | suffix-exact-match         | items that end with `.mp3`        |
 | `'wild`  | exact-match (quoted)       | items that include `wild`         |
 | `!fire`  | inverse-exact-match        | items that do not include `fire`  |
 | `!.mp3$` | inverse-suffix-exact-match | items that do not end with `.mp3` |
 .
 `skim` also supports the combination of tokens.
 .
 - Whitespace has the meaning of `AND`. With the term `src main`, `skim` will
 search
     for items that match **both** `src` and `main`.
 - ` | ` means `OR` (note the spaces around `|`). With the term `.md$ |
     .markdown$`, `skim` will search for items ends with either `.md` or
     `.markdown`.
 - `OR` has higher precedence. So `readme .md$ | .markdown$` is grouped into
     `readme AND (.md$ OR .markdown$)`.
 .
 In case that you want to use regular expressions, `skim` provides `regex` mode:
 .
 ```sh
 sk --regex
 ```
 .
 You can switch to `regex` mode dynamically by pressing `Ctrl-R` (Rotate Mode).
 .
 ## exit code
 .
 | Exit Code | Meaning                           |
 |-----------|-----------------------------------|
 | 0         | Exit normally                     |
 | 1         | No Match found                    |
 | 130       | Abort by Ctrl-C/Ctrl-G/ESC/etc... |
 .
 # Customization
 .
 The doc here is only a preview, please check the man page (`man sk`) for a full
 list of options.
 .
 ## Keymap
 .
 Specify the bindings with comma separated pairs (no space allowed), example:
 .
 ```sh
 sk --bind 'alt-a:select-all,alt-d:deselect-all'
 ```
 .
 Additionally, use `+` to concatenate actions, such as `execute-silent(echo {} |
 pbcopy)+abort`.
 .
 See the *KEY BINDINGS* section of the man page for details.
 .
 ## Sort Criteria
 .
 There are five sort keys for results: `score, index, begin, end, length`, you
 can
 specify how the records are sorted by `sk --tiebreak score,index,-begin` or any
 other order you want.
 .
 ## Color Scheme
 .
 It is a high chance that you are a better artist than me. Luckily you won't
 be stuck with the default colors, `skim` supports customization of the color
 scheme.
 .
 ```sh
 --color=[BASE_SCHEME][,COLOR:ANSI]
 ```
 .
 The configuration of colors starts with the name of the base color scheme,
 followed by custom color mappings. For example:
 .
 ```sh
 sk --color=current_bg:24
 sk --color=light,fg:232,bg:255,current_bg:116,info:27
 ```
 .
 See `--color` option in the man page for details.
 .
 ## Misc
 .
 - `--ansi`: to parse ANSI color codes (e.g., `\e[32mABC`) of the data source
 - `--regex`: use the query as regular expression to match the data source
 .
 # Advanced Topics
 .
 ## Interactive mode
 .
 With "interactive mode", you could invoke command dynamically. Try out:
 .
 ```sh
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 How it works?
 .
 ![skim's interactive
 mode](https://user-images.githubusercontent.com/1527040/53381293-461ce380-39ab-11e9-8e86-7c3bbfd557bc.png)
 .
 - Skim could accept two kinds of source: command output or piped input
 - Skim has two kinds of prompts: A query prompt to specify the query pattern
 and a
     command prompt to specify the "arguments" of the command
 - `-c` is used to specify the command to execute while defaults to
 `SKIM_DEFAULT_COMMAND`
 - `-i` is to tell skim open command prompt on startup, which will show `c>` by
 default.
 .
 If you want to further narrow down the results returned by the command, press
 `Ctrl-Q` to toggle interactive mode.
 .
 ## Executing external programs
 .
 You can set up key bindings for starting external processes without leaving
 skim (`execute`, `execute-silent`).
 .
 ```sh
 # Press F1 to open the file with less without leaving skim
 # Press CTRL-Y to copy the line to clipboard and aborts skim (requires pbcopy)
 sk --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} |
 pbcopy)+abort'
 ```
 .
 ## Preview Window
 .
 This is a great feature of fzf that skim borrows. For example, we use 'ag' to
 find the matched lines, once we narrow down to the target lines, we want to
 finally decide which lines to pick by checking the context around the line.
 `grep` and `ag` has an option `--context`, skim can do better with preview
 window. For example:
 .
 ```sh
 sk --ansi -i -c 'ag --color "{}"' --preview "preview.sh {}"
 ```
 .
 (Note the
 [preview.sh](https://github.com/junegunn/fzf.vim/blob/master/bin/preview.sh) is
 a script to print the context given filename:lines:columns)
 You got things like this:
 .
 ![preview
 demo](https://user-images.githubusercontent.com/1527040/30677573-0cee622e-9ebf-11e7-8316-c741324ecb3a.png)
 .
 ### How does it work?
 .
 If the preview command is given by the `--preview` option, skim will replace
 the
 `{}` with the current highlighted line surrounded by single quotes, call the
 command to get the output, and print the output on the preview window.
 .
 Sometimes you don't need the whole line for invoking the command. In this case
 you can use `{}`, `{1..}`, `{..3}` or `{1..5}` to select the fields. The
 syntax is explained in the section "Fields Support".
 .
 Last, you might want to configure the position of preview windows, use
 `--preview-window`.
 .
 - `--preview-window up:30%` to put the window in the up position with height
     30% of the total height of skim.
 - `--preview-window left:10:wrap`, to specify the `wrap` allows the preview
     window to wrap the output of the preview command.
 - `--preview-window wrap:hidden` to hide the preview window at startup, later
     it can be shown by the action `toggle-preview`.
 .
 ## Fields support
 .
 Normally only plugin users need to understand this.
 .
 For example, you have the data source with the format:
 .
 ```sh
 <filename>:<line number>:<column number>
 ```
 .
 However, you want to search `<filename>` only when typing in queries. That
 means when you type `21`, you want to find a `<filename>` that contains `21`,
 but not matching line number or column number.
 .
 You can use `sk --delimiter ':' --nth 1` to achieve this.
 .
 Also you can use `--with-nth` to re-arrange the order of fields.
 .
 **Range Syntax**
 .
 - `<num>` -- to specify the `num`-th fields, starting with 1.
 - `start..` -- starting from the `start`-th fields, and the rest.
 - `..end` -- starting from the `0`-th field, all the way to `end`-th field,
     including `end`.
 - `start..end` -- starting from `start`-th field, all the way to `end`-th
     field, including `end`.
 .
 ## Use as a library
 .
 Skim can be used as a library in your Rust crates.
 .
 First, add skim into your `Cargo.toml`:
 .
 ```toml
 [dependencies]
 skim = "*"
 ```
 .
 Then try to run this simple example:
 .
 ```rust
 extern crate skim;
 use skim::prelude::*;
 use std::io::Cursor;
 .
 pub fn main() {
     let options = SkimOptionsBuilder::default()
         .height(Some("50%"))
         .multi(true)
         .build()
         .unwrap();
 .
     let input = "aaaaa\nbbbb\nccc".to_string();
 .
     // `SkimItemReader` is a helper to turn any `BufRead` into a stream of
 `SkimItem`
     // `SkimItem` was implemented for `AsRef<str>` by default
     let item_reader = SkimItemReader::default();
     let items = item_reader.of_bufread(Cursor::new(input));
 .
     // `run_with` would read and show items from the stream
     let selected_items = Skim::run_with(&options, Some(items))
         .map(|out| out.selected_items)
         .unwrap_or_else(|| Vec::new());
 .
     for item in selected_items.iter() {
         print!("{}{}", item.output(), "\n");
     }
 }
 ```
 .
 Given an `Option<SkimItemReceiver>`, skim will read items accordingly, do its
 job and bring us back the user selection including the selected items, the
 query, etc. Note that:
 .
 - `SkimItemReceiver` is `crossbeam::channel::Receiver<Arc<dyn SkimItem>>`
 - If it is none, it will invoke the given command and read items from command
 output
 - Otherwise, it will read the items from the (crossbeam) channel.
 .
 Trait `SkimItem` is provided to customize how a line could be displayed,
 compared and previewed. It is implemented by default for `AsRef<str>`
 .
 Plus, `SkimItemReader` is a helper to convert a `BufRead` into
 `SkimItemReceiver` (we can easily turn a `File` for `String` into `BufRead`).
 So that you could deal with strings or files easily.
 .
 Check more examples under
 [examples/](https://github.com/lotabout/skim/tree/master/examples) directory.
 .
 # FAQ
 .
 ## How to ignore files?
 .
 Skim invokes `find .` to fetch a list of files for filtering. You can override
 that by setting the environment variable `SKIM_DEFAULT_COMMAND`. For example:
 .
 ```sh
 SKIM_DEFAULT_COMMAND="fd --type f || git ls-tree -r --name-only HEAD || rg
 --files || find ."
 sk
 ```
 .
 You could put it in your `.bashrc` or `.zshrc` if you like it to be default.
 .
 ## Some files are not shown in Vim plugin
 .
 If you use the Vim plugin and execute the `:SK` command, you might find some
 of your files not shown.
 .
 As described in [#3](https://github.com/lotabout/skim/issues/3), in the Vim
 plugin, `SKIM_DEFAULT_COMMAND` is set to the command by default:
 .
 ```vim
 let $SKIM_DEFAULT_COMMAND = "git ls-tree -r --name-only HEAD || rg --files ||
 ag -l -g \"\" || find ."
 ```
 .
 That means, the files not recognized by git will not shown. Either override the
 default with `let $SKIM_DEFAULT_COMMAND = ''` or find the missing file by
 yourself.
 .
 # Differences to fzf
 .
 [fzf](https://github.com/junegunn/fzf) is a command-line fuzzy finder written
 in Go and [skim](https://github.com/lotabout/skim) tries to implement a new one
 in Rust!
 .
 This project is written from scratch. Some decisions of implementation are
 different from fzf. For example:
 .
 1. `skim` is a binary as well as a library while fzf is only a binary.
 2. `skim` has an interactive mode.
 3. `skim` supports pre-selection
 4. The fuzzy search algorithm is different.
 5. ~~UI of showing matched items. `fzf` will show only the range matched while
    `skim` will show each character matched.~~ (fzf has this now)
 6. ~~`skim`'s range syntax is Git style~~: now it is the same with fzf.
 .
 # How to contribute
 .
 [Create new issues](https://github.com/lotabout/skim/issues/new) if you meet
 any bugs
 or have any ideas. Pull requests are warmly welcomed.
 .
 # Troubleshooting
 .
 ## No line feed issues with nix , FreeBSD, termux
 .
 If you encounter display issues like:
 .
 ```bash
 $ for n in {1..10}; do echo "$n"; done | sk
   0/10 0/0.> 10/10  10  9  8  7  6  5  4  3  2> 1
 ```
 .
 For example
 .
 - <https://github.com/lotabout/skim/issues/412>
 - <https://github.com/lotabout/skim/issues/455>
 .
 You need to set TERMINFO or TERMINFO_DIRS to the path to a correct terminfo
 database path
 .
 For example, with termux, you can add in your bashr:
 .
 ```
 export TERMINFO=/data/data/com.termux/files/usr/share/terminfo
 ```
Vcs-Browser: https://github.com/kimono-koans/two_percent
Vcs-Git: https://github.com/kimono-koans/two_percent

Package: two-percent
Version: 0.11.24-1
Architecture: amd64
Maintainer: Zhang Jinzhou <lotabout@gmail.com>
Installed-Size: 4855
Depends: libc6 (>= 2.29)
Filename: ./two-percent_0.11.24-1_amd64.deb
Size: 1410956
MD5sum: 14af81a1286e683fbdd1885f8d4dbda9
SHA1: 4ea84128e0a63166d70ad7589ae3ae8c2f112270
SHA256: b1052bb2aafa5f0bd1531ae7879c767406025f50c779a194ed087058b7d86b08
Priority: optional
Homepage: https://github.com/kimono-koans/two_percent
Description: Fuzzy Finder in rust!
 <p align="center">
   <a href="https://crates.io/crates/skim">
     <img src="https://img.shields.io/crates/v/skim.svg" alt="Crates.io" />
   </a>
   <a
 href="https://github.com/lotabout/skim/actions?query=workflow%3A%22Build+%26+Test%22">
     <img
 src="https://github.com/lotabout/skim/workflows/Build%20&%20Test/badge.svg"
 alt="Build & Test" />
   </a>
   <a href="https://repology.org/project/skim/versions">
     <img src="https://repology.org/badge/tiny-repos/skim.svg" alt="Packaging
 status" />
   </a>
   <a href="https://discord.gg/23PuxttufP">
     <img alt="Skim Discord"
 src="https://img.shields.io/discord/1031830957432504361?label=&color=7389d8&labelColor=6a7ec2&logoColor=ffffff&logo=discord"
 />
   </a>
 </p>
 .
 *Note: `two_percent` is a fork of
 [skim](https://github.com/lotabout/skim/tree/291fc34c58b1670a5e8c95f1e8f930b82c030b19)
 for use with [httm](https://github.com/kimono-koans/httm).*
 .
 > Life is short, skim!
 .
 Half of our life is spent on navigation: files, lines, commands… You need
 skim!
 It is a general fuzzy finder that saves you time.
 .
 [![skim
 demo](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm.svg)](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm)
 .
 skim provides a single executable: `sk`. Basically anywhere you would want to
 use
 `grep`, try `sk` instead.
 .
 # Table of contents
 .
 - [Installation](#installation)
 - [Usage](#usage)
   - [As Filter](#as-filter)
   - [As Interactive Interface](#as-interactive-interface)
   - [Key Bindings](#key-bindings)
   - [Search Syntax](#search-syntax)
   - [Exit code](#exit-code)
 - [Customization](#customization)
   - [Keymap to redefine](#keymap)
   - [Sort Criteria](#sort-criteria)
   - [Color Scheme](#color-scheme)
   - [Misc](#misc)
 - [Advance Topics](#advance-topics)
   - [Interactive Mode](#interactive-mode)
   - [Executing external programs](#executing-external-programs)
   - [Preview Window](#preview-window)
   - [Fields Support](#fields-support)
   - [Use as a Library](#use-as-a-library)
 - [FAQ](#faq)
   - [How to ignore files?](#how-to-ignore-files)
   - [Some files are not shown in vim
 plugin](#some-files-are-not-shown-in-vim-plugin)
 - [Differences to fzf](#differences-to-fzf)
 - [How to contribute](#how-to-contribute)
 .
 # Installation
 .
 The skim project contains several components:
 .
 1. `sk` executable -- the core.
 2. `sk-tmux` -- script for launching `sk` in a tmux pane.
 3. Vim/Nvim plugin -- to call `sk` inside Vim/Nvim. check
 [skim.vim](https://github.com/lotabout/skim.vim) for more Vim support.
 .
 ## Package Managers
 .
 | Distribution   | Package Manager   | Command                      |
 | -------------- | ----------------- | ---------------------------- |
 | macOS          | Homebrew          | `brew install sk`            |
 | macOS          | MacPorts          | `sudo port install skim`     |
 | Fedora         | dnf               | `dnf install skim`           |
 | Alpine         | apk               | `apk add skim`               |
 | Arch           | pacman            | `pacman -S skim`             |
 | Gentoo         | Portage           | `emerge --ask app-misc/skim` |
 .
 See [repology](https://repology.org/project/skim/versions) for a comprehensive
 overview of package availability.
 .
 ## Install as Vim plugin
 .
 Via vim-plug (recommended):
 .
 ```vim
 Plug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install' }
 ```
 .
 ## Hard Core
 .
 Any of the following applies:
 .
 - Using Git
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     ~/.skim/install
     ```
 .
 - Using Binary: directly [download the sk
 executable](https://github.com/lotabout/skim/releases).
 - Install from [crates.io](https://crates.io/): `cargo install skim`
 - Build Manually
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     cd ~/.skim
     cargo install
     cargo build --release
     # put the resulting `target/release/sk` executable on your PATH.
     ```
 .
 # Usage
 .
 skim can be used as a general filter (like `grep`) or as an interactive
 interface for invoking commands.
 .
 ## As filter
 .
 Try the following
 .
 ```bash
 # directly invoke skim
 sk
 .
 # or pipe some input to it: (press TAB key select multiple items with -m
 enabled)
 vim $(find . -name "*.rs" | sk -m)
 ```
 .
 The above command will allow you to select files with ".rs" extension and open
 the ones you selected in Vim.
 .
 ## As Interactive Interface
 .
 `skim` can invoke other commands dynamically. Normally you would want to
 integrate it with [grep](https://www.gnu.org/software/grep/),
 [ack](https://github.com/petdance/ack2),
 [ag](https://github.com/ggreer/the_silver_searcher), or
 [rg](https://github.com/BurntSushi/ripgrep) for searching contents in a
 project directory:
 .
 ```sh
 # works with grep
 sk --ansi -i -c 'grep -rI --color=always --line-number "{}" .'
 # works with ack
 sk --ansi -i -c 'ack --color "{}"'
 # works with ag
 sk --ansi -i -c 'ag --color "{}"'
 # works with rg
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 ![interactive mode
 demo](https://cloud.githubusercontent.com/assets/1527040/21603930/655d859a-d1db-11e6-9fec-c25099d30a12.gif)
 .
 ## Key Bindings
 .
 Some commonly used key bindings:
 .
 | Key               | Action                                     |
 |------------------:|--------------------------------------------|
 | Enter             | Accept (select current one and quit)       |
 | ESC/Ctrl-G        | Abort                                      |
 | Ctrl-P/Up         | Move cursor up                             |
 | Ctrl-N/Down       | Move cursor Down                           |
 | TAB               | Toggle selection and move down (with `-m`) |
 | Shift-TAB         | Toggle selection and move up (with `-m`)   |
 .
 For full list of key bindings, check out the [man
 page](https://github.com/lotabout/skim/blob/master/man/man1/sk.1) (`man sk`).
 .
 ## Search Syntax
 .
 `skim` borrowed `fzf`'s syntax for matching items:
 .
 | Token    | Match type                 | Description                       |
 |----------|----------------------------|-----------------------------------|
 | `text`   | fuzzy-match                | items that match `text`           |
 | `^music` | prefix-exact-match         | items that start with `music`     |
 | `.mp3$`  | suffix-exact-match         | items that end with `.mp3`        |
 | `'wild`  | exact-match (quoted)       | items that include `wild`         |
 | `!fire`  | inverse-exact-match        | items that do not include `fire`  |
 | `!.mp3$` | inverse-suffix-exact-match | items that do not end with `.mp3` |
 .
 `skim` also supports the combination of tokens.
 .
 - Whitespace has the meaning of `AND`. With the term `src main`, `skim` will
 search
     for items that match **both** `src` and `main`.
 - ` | ` means `OR` (note the spaces around `|`). With the term `.md$ |
     .markdown$`, `skim` will search for items ends with either `.md` or
     `.markdown`.
 - `OR` has higher precedence. So `readme .md$ | .markdown$` is grouped into
     `readme AND (.md$ OR .markdown$)`.
 .
 In case that you want to use regular expressions, `skim` provides `regex` mode:
 .
 ```sh
 sk --regex
 ```
 .
 You can switch to `regex` mode dynamically by pressing `Ctrl-R` (Rotate Mode).
 .
 ## exit code
 .
 | Exit Code | Meaning                           |
 |-----------|-----------------------------------|
 | 0         | Exit normally                     |
 | 1         | No Match found                    |
 | 130       | Abort by Ctrl-C/Ctrl-G/ESC/etc... |
 .
 # Customization
 .
 The doc here is only a preview, please check the man page (`man sk`) for a full
 list of options.
 .
 ## Keymap
 .
 Specify the bindings with comma separated pairs (no space allowed), example:
 .
 ```sh
 sk --bind 'alt-a:select-all,alt-d:deselect-all'
 ```
 .
 Additionally, use `+` to concatenate actions, such as `execute-silent(echo {} |
 pbcopy)+abort`.
 .
 See the *KEY BINDINGS* section of the man page for details.
 .
 ## Sort Criteria
 .
 There are five sort keys for results: `score, index, begin, end, length`, you
 can
 specify how the records are sorted by `sk --tiebreak score,index,-begin` or any
 other order you want.
 .
 ## Color Scheme
 .
 It is a high chance that you are a better artist than me. Luckily you won't
 be stuck with the default colors, `skim` supports customization of the color
 scheme.
 .
 ```sh
 --color=[BASE_SCHEME][,COLOR:ANSI]
 ```
 .
 The configuration of colors starts with the name of the base color scheme,
 followed by custom color mappings. For example:
 .
 ```sh
 sk --color=current_bg:24
 sk --color=light,fg:232,bg:255,current_bg:116,info:27
 ```
 .
 See `--color` option in the man page for details.
 .
 ## Misc
 .
 - `--ansi`: to parse ANSI color codes (e.g., `\e[32mABC`) of the data source
 - `--regex`: use the query as regular expression to match the data source
 .
 # Advanced Topics
 .
 ## Interactive mode
 .
 With "interactive mode", you could invoke command dynamically. Try out:
 .
 ```sh
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 How it works?
 .
 ![skim's interactive
 mode](https://user-images.githubusercontent.com/1527040/53381293-461ce380-39ab-11e9-8e86-7c3bbfd557bc.png)
 .
 - Skim could accept two kinds of source: command output or piped input
 - Skim has two kinds of prompts: A query prompt to specify the query pattern
 and a
     command prompt to specify the "arguments" of the command
 - `-c` is used to specify the command to execute while defaults to
 `SKIM_DEFAULT_COMMAND`
 - `-i` is to tell skim open command prompt on startup, which will show `c>` by
 default.
 .
 If you want to further narrow down the results returned by the command, press
 `Ctrl-Q` to toggle interactive mode.
 .
 ## Executing external programs
 .
 You can set up key bindings for starting external processes without leaving
 skim (`execute`, `execute-silent`).
 .
 ```sh
 # Press F1 to open the file with less without leaving skim
 # Press CTRL-Y to copy the line to clipboard and aborts skim (requires pbcopy)
 sk --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} |
 pbcopy)+abort'
 ```
 .
 ## Preview Window
 .
 This is a great feature of fzf that skim borrows. For example, we use 'ag' to
 find the matched lines, once we narrow down to the target lines, we want to
 finally decide which lines to pick by checking the context around the line.
 `grep` and `ag` has an option `--context`, skim can do better with preview
 window. For example:
 .
 ```sh
 sk --ansi -i -c 'ag --color "{}"' --preview "preview.sh {}"
 ```
 .
 (Note the
 [preview.sh](https://github.com/junegunn/fzf.vim/blob/master/bin/preview.sh) is
 a script to print the context given filename:lines:columns)
 You got things like this:
 .
 ![preview
 demo](https://user-images.githubusercontent.com/1527040/30677573-0cee622e-9ebf-11e7-8316-c741324ecb3a.png)
 .
 ### How does it work?
 .
 If the preview command is given by the `--preview` option, skim will replace
 the
 `{}` with the current highlighted line surrounded by single quotes, call the
 command to get the output, and print the output on the preview window.
 .
 Sometimes you don't need the whole line for invoking the command. In this case
 you can use `{}`, `{1..}`, `{..3}` or `{1..5}` to select the fields. The
 syntax is explained in the section "Fields Support".
 .
 Last, you might want to configure the position of preview windows, use
 `--preview-window`.
 .
 - `--preview-window up:30%` to put the window in the up position with height
     30% of the total height of skim.
 - `--preview-window left:10:wrap`, to specify the `wrap` allows the preview
     window to wrap the output of the preview command.
 - `--preview-window wrap:hidden` to hide the preview window at startup, later
     it can be shown by the action `toggle-preview`.
 .
 ## Fields support
 .
 Normally only plugin users need to understand this.
 .
 For example, you have the data source with the format:
 .
 ```sh
 <filename>:<line number>:<column number>
 ```
 .
 However, you want to search `<filename>` only when typing in queries. That
 means when you type `21`, you want to find a `<filename>` that contains `21`,
 but not matching line number or column number.
 .
 You can use `sk --delimiter ':' --nth 1` to achieve this.
 .
 Also you can use `--with-nth` to re-arrange the order of fields.
 .
 **Range Syntax**
 .
 - `<num>` -- to specify the `num`-th fields, starting with 1.
 - `start..` -- starting from the `start`-th fields, and the rest.
 - `..end` -- starting from the `0`-th field, all the way to `end`-th field,
     including `end`.
 - `start..end` -- starting from `start`-th field, all the way to `end`-th
     field, including `end`.
 .
 ## Use as a library
 .
 Skim can be used as a library in your Rust crates.
 .
 First, add skim into your `Cargo.toml`:
 .
 ```toml
 [dependencies]
 skim = "*"
 ```
 .
 Then try to run this simple example:
 .
 ```rust
 extern crate skim;
 use skim::prelude::*;
 use std::io::Cursor;
 .
 pub fn main() {
     let options = SkimOptionsBuilder::default()
         .height(Some("50%"))
         .multi(true)
         .build()
         .unwrap();
 .
     let input = "aaaaa\nbbbb\nccc".to_string();
 .
     // `SkimItemReader` is a helper to turn any `BufRead` into a stream of
 `SkimItem`
     // `SkimItem` was implemented for `AsRef<str>` by default
     let item_reader = SkimItemReader::default();
     let items = item_reader.of_bufread(Cursor::new(input));
 .
     // `run_with` would read and show items from the stream
     let selected_items = Skim::run_with(&options, Some(items))
         .map(|out| out.selected_items)
         .unwrap_or_else(|| Vec::new());
 .
     for item in selected_items.iter() {
         print!("{}{}", item.output(), "\n");
     }
 }
 ```
 .
 Given an `Option<SkimItemReceiver>`, skim will read items accordingly, do its
 job and bring us back the user selection including the selected items, the
 query, etc. Note that:
 .
 - `SkimItemReceiver` is `crossbeam::channel::Receiver<Arc<dyn SkimItem>>`
 - If it is none, it will invoke the given command and read items from command
 output
 - Otherwise, it will read the items from the (crossbeam) channel.
 .
 Trait `SkimItem` is provided to customize how a line could be displayed,
 compared and previewed. It is implemented by default for `AsRef<str>`
 .
 Plus, `SkimItemReader` is a helper to convert a `BufRead` into
 `SkimItemReceiver` (we can easily turn a `File` for `String` into `BufRead`).
 So that you could deal with strings or files easily.
 .
 Check more examples under
 [examples/](https://github.com/lotabout/skim/tree/master/examples) directory.
 .
 # FAQ
 .
 ## How to ignore files?
 .
 Skim invokes `find .` to fetch a list of files for filtering. You can override
 that by setting the environment variable `SKIM_DEFAULT_COMMAND`. For example:
 .
 ```sh
 SKIM_DEFAULT_COMMAND="fd --type f || git ls-tree -r --name-only HEAD || rg
 --files || find ."
 sk
 ```
 .
 You could put it in your `.bashrc` or `.zshrc` if you like it to be default.
 .
 ## Some files are not shown in Vim plugin
 .
 If you use the Vim plugin and execute the `:SK` command, you might find some
 of your files not shown.
 .
 As described in [#3](https://github.com/lotabout/skim/issues/3), in the Vim
 plugin, `SKIM_DEFAULT_COMMAND` is set to the command by default:
 .
 ```vim
 let $SKIM_DEFAULT_COMMAND = "git ls-tree -r --name-only HEAD || rg --files ||
 ag -l -g \"\" || find ."
 ```
 .
 That means, the files not recognized by git will not shown. Either override the
 default with `let $SKIM_DEFAULT_COMMAND = ''` or find the missing file by
 yourself.
 .
 # Differences to fzf
 .
 [fzf](https://github.com/junegunn/fzf) is a command-line fuzzy finder written
 in Go and [skim](https://github.com/lotabout/skim) tries to implement a new one
 in Rust!
 .
 This project is written from scratch. Some decisions of implementation are
 different from fzf. For example:
 .
 1. `skim` is a binary as well as a library while fzf is only a binary.
 2. `skim` has an interactive mode.
 3. `skim` supports pre-selection
 4. The fuzzy search algorithm is different.
 5. ~~UI of showing matched items. `fzf` will show only the range matched while
    `skim` will show each character matched.~~ (fzf has this now)
 6. ~~`skim`'s range syntax is Git style~~: now it is the same with fzf.
 .
 # How to contribute
 .
 [Create new issues](https://github.com/lotabout/skim/issues/new) if you meet
 any bugs
 or have any ideas. Pull requests are warmly welcomed.
 .
 # Troubleshooting
 .
 ## No line feed issues with nix , FreeBSD, termux
 .
 If you encounter display issues like:
 .
 ```bash
 $ for n in {1..10}; do echo "$n"; done | sk
   0/10 0/0.> 10/10  10  9  8  7  6  5  4  3  2> 1
 ```
 .
 For example
 .
 - <https://github.com/lotabout/skim/issues/412>
 - <https://github.com/lotabout/skim/issues/455>
 .
 You need to set TERMINFO or TERMINFO_DIRS to the path to a correct terminfo
 database path
 .
 For example, with termux, you can add in your bashr:
 .
 ```
 export TERMINFO=/data/data/com.termux/files/usr/share/terminfo
 ```
Vcs-Browser: https://github.com/kimono-koans/two_percent
Vcs-Git: https://github.com/kimono-koans/two_percent

Package: two-percent
Version: 0.11.27-1
Architecture: amd64
Maintainer: Zhang Jinzhou <lotabout@gmail.com>
Installed-Size: 4850
Depends: libc6 (>= 2.29)
Filename: ./two-percent_0.11.27-1_amd64.deb
Size: 1410116
MD5sum: 627b14a10f75810279bc5d7aad7a81a5
SHA1: a1c18ff89a129a0881349a646e2eaa6c34b84ce6
SHA256: de67ccad889d0cfd459514d440909e1abafbe5b14f72e27f1ef3dcfa57a9d331
Priority: optional
Homepage: https://github.com/kimono-koans/two_percent
Description: Fuzzy Finder in rust!
 <p align="center">
   <a href="https://crates.io/crates/skim">
     <img src="https://img.shields.io/crates/v/skim.svg" alt="Crates.io" />
   </a>
   <a
 href="https://github.com/lotabout/skim/actions?query=workflow%3A%22Build+%26+Test%22">
     <img
 src="https://github.com/lotabout/skim/workflows/Build%20&%20Test/badge.svg"
 alt="Build & Test" />
   </a>
   <a href="https://repology.org/project/skim/versions">
     <img src="https://repology.org/badge/tiny-repos/skim.svg" alt="Packaging
 status" />
   </a>
   <a href="https://discord.gg/23PuxttufP">
     <img alt="Skim Discord"
 src="https://img.shields.io/discord/1031830957432504361?label=&color=7389d8&labelColor=6a7ec2&logoColor=ffffff&logo=discord"
 />
   </a>
 </p>
 .
 *Note: `two_percent` is a fork of
 [skim](https://github.com/lotabout/skim/tree/291fc34c58b1670a5e8c95f1e8f930b82c030b19)
 for use with [httm](https://github.com/kimono-koans/httm).*
 .
 > Life is short, skim!
 .
 Half of our life is spent on navigation: files, lines, commands… You need
 skim!
 It is a general fuzzy finder that saves you time.
 .
 [![skim
 demo](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm.svg)](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm)
 .
 skim provides a single executable: `sk`. Basically anywhere you would want to
 use
 `grep`, try `sk` instead.
 .
 # Table of contents
 .
 - [Installation](#installation)
 - [Usage](#usage)
   - [As Filter](#as-filter)
   - [As Interactive Interface](#as-interactive-interface)
   - [Key Bindings](#key-bindings)
   - [Search Syntax](#search-syntax)
   - [Exit code](#exit-code)
 - [Customization](#customization)
   - [Keymap to redefine](#keymap)
   - [Sort Criteria](#sort-criteria)
   - [Color Scheme](#color-scheme)
   - [Misc](#misc)
 - [Advance Topics](#advance-topics)
   - [Interactive Mode](#interactive-mode)
   - [Executing external programs](#executing-external-programs)
   - [Preview Window](#preview-window)
   - [Fields Support](#fields-support)
   - [Use as a Library](#use-as-a-library)
 - [FAQ](#faq)
   - [How to ignore files?](#how-to-ignore-files)
   - [Some files are not shown in vim
 plugin](#some-files-are-not-shown-in-vim-plugin)
 - [Differences to fzf](#differences-to-fzf)
 - [How to contribute](#how-to-contribute)
 .
 # Installation
 .
 The skim project contains several components:
 .
 1. `sk` executable -- the core.
 2. `sk-tmux` -- script for launching `sk` in a tmux pane.
 3. Vim/Nvim plugin -- to call `sk` inside Vim/Nvim. check
 [skim.vim](https://github.com/lotabout/skim.vim) for more Vim support.
 .
 ## Package Managers
 .
 | Distribution   | Package Manager   | Command                      |
 | -------------- | ----------------- | ---------------------------- |
 | macOS          | Homebrew          | `brew install sk`            |
 | macOS          | MacPorts          | `sudo port install skim`     |
 | Fedora         | dnf               | `dnf install skim`           |
 | Alpine         | apk               | `apk add skim`               |
 | Arch           | pacman            | `pacman -S skim`             |
 | Gentoo         | Portage           | `emerge --ask app-misc/skim` |
 .
 See [repology](https://repology.org/project/skim/versions) for a comprehensive
 overview of package availability.
 .
 ## Install as Vim plugin
 .
 Via vim-plug (recommended):
 .
 ```vim
 Plug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install' }
 ```
 .
 ## Hard Core
 .
 Any of the following applies:
 .
 - Using Git
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     ~/.skim/install
     ```
 .
 - Using Binary: directly [download the sk
 executable](https://github.com/lotabout/skim/releases).
 - Install from [crates.io](https://crates.io/): `cargo install skim`
 - Build Manually
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     cd ~/.skim
     cargo install
     cargo build --release
     # put the resulting `target/release/sk` executable on your PATH.
     ```
 .
 # Usage
 .
 skim can be used as a general filter (like `grep`) or as an interactive
 interface for invoking commands.
 .
 ## As filter
 .
 Try the following
 .
 ```bash
 # directly invoke skim
 sk
 .
 # or pipe some input to it: (press TAB key select multiple items with -m
 enabled)
 vim $(find . -name "*.rs" | sk -m)
 ```
 .
 The above command will allow you to select files with ".rs" extension and open
 the ones you selected in Vim.
 .
 ## As Interactive Interface
 .
 `skim` can invoke other commands dynamically. Normally you would want to
 integrate it with [grep](https://www.gnu.org/software/grep/),
 [ack](https://github.com/petdance/ack2),
 [ag](https://github.com/ggreer/the_silver_searcher), or
 [rg](https://github.com/BurntSushi/ripgrep) for searching contents in a
 project directory:
 .
 ```sh
 # works with grep
 sk --ansi -i -c 'grep -rI --color=always --line-number "{}" .'
 # works with ack
 sk --ansi -i -c 'ack --color "{}"'
 # works with ag
 sk --ansi -i -c 'ag --color "{}"'
 # works with rg
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 ![interactive mode
 demo](https://cloud.githubusercontent.com/assets/1527040/21603930/655d859a-d1db-11e6-9fec-c25099d30a12.gif)
 .
 ## Key Bindings
 .
 Some commonly used key bindings:
 .
 | Key               | Action                                     |
 |------------------:|--------------------------------------------|
 | Enter             | Accept (select current one and quit)       |
 | ESC/Ctrl-G        | Abort                                      |
 | Ctrl-P/Up         | Move cursor up                             |
 | Ctrl-N/Down       | Move cursor Down                           |
 | TAB               | Toggle selection and move down (with `-m`) |
 | Shift-TAB         | Toggle selection and move up (with `-m`)   |
 .
 For full list of key bindings, check out the [man
 page](https://github.com/lotabout/skim/blob/master/man/man1/sk.1) (`man sk`).
 .
 ## Search Syntax
 .
 `skim` borrowed `fzf`'s syntax for matching items:
 .
 | Token    | Match type                 | Description                       |
 |----------|----------------------------|-----------------------------------|
 | `text`   | fuzzy-match                | items that match `text`           |
 | `^music` | prefix-exact-match         | items that start with `music`     |
 | `.mp3$`  | suffix-exact-match         | items that end with `.mp3`        |
 | `'wild`  | exact-match (quoted)       | items that include `wild`         |
 | `!fire`  | inverse-exact-match        | items that do not include `fire`  |
 | `!.mp3$` | inverse-suffix-exact-match | items that do not end with `.mp3` |
 .
 `skim` also supports the combination of tokens.
 .
 - Whitespace has the meaning of `AND`. With the term `src main`, `skim` will
 search
     for items that match **both** `src` and `main`.
 - ` | ` means `OR` (note the spaces around `|`). With the term `.md$ |
     .markdown$`, `skim` will search for items ends with either `.md` or
     `.markdown`.
 - `OR` has higher precedence. So `readme .md$ | .markdown$` is grouped into
     `readme AND (.md$ OR .markdown$)`.
 .
 In case that you want to use regular expressions, `skim` provides `regex` mode:
 .
 ```sh
 sk --regex
 ```
 .
 You can switch to `regex` mode dynamically by pressing `Ctrl-R` (Rotate Mode).
 .
 ## exit code
 .
 | Exit Code | Meaning                           |
 |-----------|-----------------------------------|
 | 0         | Exit normally                     |
 | 1         | No Match found                    |
 | 130       | Abort by Ctrl-C/Ctrl-G/ESC/etc... |
 .
 # Customization
 .
 The doc here is only a preview, please check the man page (`man sk`) for a full
 list of options.
 .
 ## Keymap
 .
 Specify the bindings with comma separated pairs (no space allowed), example:
 .
 ```sh
 sk --bind 'alt-a:select-all,alt-d:deselect-all'
 ```
 .
 Additionally, use `+` to concatenate actions, such as `execute-silent(echo {} |
 pbcopy)+abort`.
 .
 See the *KEY BINDINGS* section of the man page for details.
 .
 ## Sort Criteria
 .
 There are five sort keys for results: `score, index, begin, end, length`, you
 can
 specify how the records are sorted by `sk --tiebreak score,index,-begin` or any
 other order you want.
 .
 ## Color Scheme
 .
 It is a high chance that you are a better artist than me. Luckily you won't
 be stuck with the default colors, `skim` supports customization of the color
 scheme.
 .
 ```sh
 --color=[BASE_SCHEME][,COLOR:ANSI]
 ```
 .
 The configuration of colors starts with the name of the base color scheme,
 followed by custom color mappings. For example:
 .
 ```sh
 sk --color=current_bg:24
 sk --color=light,fg:232,bg:255,current_bg:116,info:27
 ```
 .
 See `--color` option in the man page for details.
 .
 ## Misc
 .
 - `--ansi`: to parse ANSI color codes (e.g., `\e[32mABC`) of the data source
 - `--regex`: use the query as regular expression to match the data source
 .
 # Advanced Topics
 .
 ## Interactive mode
 .
 With "interactive mode", you could invoke command dynamically. Try out:
 .
 ```sh
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 How it works?
 .
 ![skim's interactive
 mode](https://user-images.githubusercontent.com/1527040/53381293-461ce380-39ab-11e9-8e86-7c3bbfd557bc.png)
 .
 - Skim could accept two kinds of source: command output or piped input
 - Skim has two kinds of prompts: A query prompt to specify the query pattern
 and a
     command prompt to specify the "arguments" of the command
 - `-c` is used to specify the command to execute while defaults to
 `SKIM_DEFAULT_COMMAND`
 - `-i` is to tell skim open command prompt on startup, which will show `c>` by
 default.
 .
 If you want to further narrow down the results returned by the command, press
 `Ctrl-Q` to toggle interactive mode.
 .
 ## Executing external programs
 .
 You can set up key bindings for starting external processes without leaving
 skim (`execute`, `execute-silent`).
 .
 ```sh
 # Press F1 to open the file with less without leaving skim
 # Press CTRL-Y to copy the line to clipboard and aborts skim (requires pbcopy)
 sk --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} |
 pbcopy)+abort'
 ```
 .
 ## Preview Window
 .
 This is a great feature of fzf that skim borrows. For example, we use 'ag' to
 find the matched lines, once we narrow down to the target lines, we want to
 finally decide which lines to pick by checking the context around the line.
 `grep` and `ag` has an option `--context`, skim can do better with preview
 window. For example:
 .
 ```sh
 sk --ansi -i -c 'ag --color "{}"' --preview "preview.sh {}"
 ```
 .
 (Note the
 [preview.sh](https://github.com/junegunn/fzf.vim/blob/master/bin/preview.sh) is
 a script to print the context given filename:lines:columns)
 You got things like this:
 .
 ![preview
 demo](https://user-images.githubusercontent.com/1527040/30677573-0cee622e-9ebf-11e7-8316-c741324ecb3a.png)
 .
 ### How does it work?
 .
 If the preview command is given by the `--preview` option, skim will replace
 the
 `{}` with the current highlighted line surrounded by single quotes, call the
 command to get the output, and print the output on the preview window.
 .
 Sometimes you don't need the whole line for invoking the command. In this case
 you can use `{}`, `{1..}`, `{..3}` or `{1..5}` to select the fields. The
 syntax is explained in the section "Fields Support".
 .
 Last, you might want to configure the position of preview windows, use
 `--preview-window`.
 .
 - `--preview-window up:30%` to put the window in the up position with height
     30% of the total height of skim.
 - `--preview-window left:10:wrap`, to specify the `wrap` allows the preview
     window to wrap the output of the preview command.
 - `--preview-window wrap:hidden` to hide the preview window at startup, later
     it can be shown by the action `toggle-preview`.
 .
 ## Fields support
 .
 Normally only plugin users need to understand this.
 .
 For example, you have the data source with the format:
 .
 ```sh
 <filename>:<line number>:<column number>
 ```
 .
 However, you want to search `<filename>` only when typing in queries. That
 means when you type `21`, you want to find a `<filename>` that contains `21`,
 but not matching line number or column number.
 .
 You can use `sk --delimiter ':' --nth 1` to achieve this.
 .
 Also you can use `--with-nth` to re-arrange the order of fields.
 .
 **Range Syntax**
 .
 - `<num>` -- to specify the `num`-th fields, starting with 1.
 - `start..` -- starting from the `start`-th fields, and the rest.
 - `..end` -- starting from the `0`-th field, all the way to `end`-th field,
     including `end`.
 - `start..end` -- starting from `start`-th field, all the way to `end`-th
     field, including `end`.
 .
 ## Use as a library
 .
 Skim can be used as a library in your Rust crates.
 .
 First, add skim into your `Cargo.toml`:
 .
 ```toml
 [dependencies]
 skim = "*"
 ```
 .
 Then try to run this simple example:
 .
 ```rust
 extern crate skim;
 use skim::prelude::*;
 use std::io::Cursor;
 .
 pub fn main() {
     let options = SkimOptionsBuilder::default()
         .height(Some("50%"))
         .multi(true)
         .build()
         .unwrap();
 .
     let input = "aaaaa\nbbbb\nccc".to_string();
 .
     // `SkimItemReader` is a helper to turn any `BufRead` into a stream of
 `SkimItem`
     // `SkimItem` was implemented for `AsRef<str>` by default
     let item_reader = SkimItemReader::default();
     let items = item_reader.of_bufread(Cursor::new(input));
 .
     // `run_with` would read and show items from the stream
     let selected_items = Skim::run_with(&options, Some(items))
         .map(|out| out.selected_items)
         .unwrap_or_else(|| Vec::new());
 .
     for item in selected_items.iter() {
         print!("{}{}", item.output(), "\n");
     }
 }
 ```
 .
 Given an `Option<SkimItemReceiver>`, skim will read items accordingly, do its
 job and bring us back the user selection including the selected items, the
 query, etc. Note that:
 .
 - `SkimItemReceiver` is `crossbeam::channel::Receiver<Arc<dyn SkimItem>>`
 - If it is none, it will invoke the given command and read items from command
 output
 - Otherwise, it will read the items from the (crossbeam) channel.
 .
 Trait `SkimItem` is provided to customize how a line could be displayed,
 compared and previewed. It is implemented by default for `AsRef<str>`
 .
 Plus, `SkimItemReader` is a helper to convert a `BufRead` into
 `SkimItemReceiver` (we can easily turn a `File` for `String` into `BufRead`).
 So that you could deal with strings or files easily.
 .
 Check more examples under
 [examples/](https://github.com/lotabout/skim/tree/master/examples) directory.
 .
 # FAQ
 .
 ## How to ignore files?
 .
 Skim invokes `find .` to fetch a list of files for filtering. You can override
 that by setting the environment variable `SKIM_DEFAULT_COMMAND`. For example:
 .
 ```sh
 SKIM_DEFAULT_COMMAND="fd --type f || git ls-tree -r --name-only HEAD || rg
 --files || find ."
 sk
 ```
 .
 You could put it in your `.bashrc` or `.zshrc` if you like it to be default.
 .
 ## Some files are not shown in Vim plugin
 .
 If you use the Vim plugin and execute the `:SK` command, you might find some
 of your files not shown.
 .
 As described in [#3](https://github.com/lotabout/skim/issues/3), in the Vim
 plugin, `SKIM_DEFAULT_COMMAND` is set to the command by default:
 .
 ```vim
 let $SKIM_DEFAULT_COMMAND = "git ls-tree -r --name-only HEAD || rg --files ||
 ag -l -g \"\" || find ."
 ```
 .
 That means, the files not recognized by git will not shown. Either override the
 default with `let $SKIM_DEFAULT_COMMAND = ''` or find the missing file by
 yourself.
 .
 # Differences to fzf
 .
 [fzf](https://github.com/junegunn/fzf) is a command-line fuzzy finder written
 in Go and [skim](https://github.com/lotabout/skim) tries to implement a new one
 in Rust!
 .
 This project is written from scratch. Some decisions of implementation are
 different from fzf. For example:
 .
 1. `skim` is a binary as well as a library while fzf is only a binary.
 2. `skim` has an interactive mode.
 3. `skim` supports pre-selection
 4. The fuzzy search algorithm is different.
 5. ~~UI of showing matched items. `fzf` will show only the range matched while
    `skim` will show each character matched.~~ (fzf has this now)
 6. ~~`skim`'s range syntax is Git style~~: now it is the same with fzf.
 .
 # How to contribute
 .
 [Create new issues](https://github.com/lotabout/skim/issues/new) if you meet
 any bugs
 or have any ideas. Pull requests are warmly welcomed.
 .
 # Troubleshooting
 .
 ## No line feed issues with nix , FreeBSD, termux
 .
 If you encounter display issues like:
 .
 ```bash
 $ for n in {1..10}; do echo "$n"; done | sk
   0/10 0/0.> 10/10  10  9  8  7  6  5  4  3  2> 1
 ```
 .
 For example
 .
 - <https://github.com/lotabout/skim/issues/412>
 - <https://github.com/lotabout/skim/issues/455>
 .
 You need to set TERMINFO or TERMINFO_DIRS to the path to a correct terminfo
 database path
 .
 For example, with termux, you can add in your bashr:
 .
 ```
 export TERMINFO=/data/data/com.termux/files/usr/share/terminfo
 ```
Vcs-Browser: https://github.com/kimono-koans/two_percent
Vcs-Git: https://github.com/kimono-koans/two_percent

Package: two-percent
Version: 0.12.2-1
Architecture: amd64
Maintainer: Zhang Jinzhou <lotabout@gmail.com>
Installed-Size: 4940
Depends: libc6 (>= 2.29)
Filename: ./two-percent_0.12.2-1_amd64.deb
Size: 1431280
MD5sum: dab731531312e6a5c858e46f31c619b2
SHA1: 64e44a9cfa63398d1ac11f87af0a6965ee3514fc
SHA256: 15614eeebc9a3ef00e9a5043cd968ac2e229dfe9199640642fa1a5b6daaacc74
Priority: optional
Homepage: https://github.com/kimono-koans/two_percent
Description: Fuzzy Finder in rust!
 <p align="center">
   <a href="https://crates.io/crates/skim">
     <img src="https://img.shields.io/crates/v/skim.svg" alt="Crates.io" />
   </a>
   <a
 href="https://github.com/lotabout/skim/actions?query=workflow%3A%22Build+%26+Test%22">
     <img
 src="https://github.com/lotabout/skim/workflows/Build%20&%20Test/badge.svg"
 alt="Build & Test" />
   </a>
   <a href="https://repology.org/project/skim/versions">
     <img src="https://repology.org/badge/tiny-repos/skim.svg" alt="Packaging
 status" />
   </a>
   <a href="https://discord.gg/23PuxttufP">
     <img alt="Skim Discord"
 src="https://img.shields.io/discord/1031830957432504361?label=&color=7389d8&labelColor=6a7ec2&logoColor=ffffff&logo=discord"
 />
   </a>
 </p>
 .
 *Note: `two_percent` is a fork of
 [skim](https://github.com/lotabout/skim/tree/291fc34c58b1670a5e8c95f1e8f930b82c030b19)
 for use with [httm](https://github.com/kimono-koans/httm).*
 .
 > Life is short, skim!
 .
 Half of our life is spent on navigation: files, lines, commands… You need
 skim!
 It is a general fuzzy finder that saves you time.
 .
 [![skim
 demo](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm.svg)](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm)
 .
 skim provides a single executable: `sk`. Basically anywhere you would want to
 use
 `grep`, try `sk` instead.
 .
 # Table of contents
 .
 - [Installation](#installation)
 - [Usage](#usage)
   - [As Filter](#as-filter)
   - [As Interactive Interface](#as-interactive-interface)
   - [Key Bindings](#key-bindings)
   - [Search Syntax](#search-syntax)
   - [Exit code](#exit-code)
 - [Customization](#customization)
   - [Keymap to redefine](#keymap)
   - [Sort Criteria](#sort-criteria)
   - [Color Scheme](#color-scheme)
   - [Misc](#misc)
 - [Advance Topics](#advance-topics)
   - [Interactive Mode](#interactive-mode)
   - [Executing external programs](#executing-external-programs)
   - [Preview Window](#preview-window)
   - [Fields Support](#fields-support)
   - [Use as a Library](#use-as-a-library)
 - [FAQ](#faq)
   - [How to ignore files?](#how-to-ignore-files)
   - [Some files are not shown in vim
 plugin](#some-files-are-not-shown-in-vim-plugin)
 - [Differences to fzf](#differences-to-fzf)
 - [How to contribute](#how-to-contribute)
 .
 # Installation
 .
 The skim project contains several components:
 .
 1. `sk` executable -- the core.
 2. `sk-tmux` -- script for launching `sk` in a tmux pane.
 3. Vim/Nvim plugin -- to call `sk` inside Vim/Nvim. check
 [skim.vim](https://github.com/lotabout/skim.vim) for more Vim support.
 .
 ## Package Managers
 .
 | Distribution   | Package Manager   | Command                      |
 | -------------- | ----------------- | ---------------------------- |
 | macOS          | Homebrew          | `brew install sk`            |
 | macOS          | MacPorts          | `sudo port install skim`     |
 | Fedora         | dnf               | `dnf install skim`           |
 | Alpine         | apk               | `apk add skim`               |
 | Arch           | pacman            | `pacman -S skim`             |
 | Gentoo         | Portage           | `emerge --ask app-misc/skim` |
 .
 See [repology](https://repology.org/project/skim/versions) for a comprehensive
 overview of package availability.
 .
 ## Install as Vim plugin
 .
 Via vim-plug (recommended):
 .
 ```vim
 Plug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install' }
 ```
 .
 ## Hard Core
 .
 Any of the following applies:
 .
 - Using Git
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     ~/.skim/install
     ```
 .
 - Using Binary: directly [download the sk
 executable](https://github.com/lotabout/skim/releases).
 - Install from [crates.io](https://crates.io/): `cargo install skim`
 - Build Manually
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     cd ~/.skim
     cargo install
     cargo build --release
     # put the resulting `target/release/sk` executable on your PATH.
     ```
 .
 # Usage
 .
 skim can be used as a general filter (like `grep`) or as an interactive
 interface for invoking commands.
 .
 ## As filter
 .
 Try the following
 .
 ```bash
 # directly invoke skim
 sk
 .
 # or pipe some input to it: (press TAB key select multiple items with -m
 enabled)
 vim $(find . -name "*.rs" | sk -m)
 ```
 .
 The above command will allow you to select files with ".rs" extension and open
 the ones you selected in Vim.
 .
 ## As Interactive Interface
 .
 `skim` can invoke other commands dynamically. Normally you would want to
 integrate it with [grep](https://www.gnu.org/software/grep/),
 [ack](https://github.com/petdance/ack2),
 [ag](https://github.com/ggreer/the_silver_searcher), or
 [rg](https://github.com/BurntSushi/ripgrep) for searching contents in a
 project directory:
 .
 ```sh
 # works with grep
 sk --ansi -i -c 'grep -rI --color=always --line-number "{}" .'
 # works with ack
 sk --ansi -i -c 'ack --color "{}"'
 # works with ag
 sk --ansi -i -c 'ag --color "{}"'
 # works with rg
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 ![interactive mode
 demo](https://cloud.githubusercontent.com/assets/1527040/21603930/655d859a-d1db-11e6-9fec-c25099d30a12.gif)
 .
 ## Key Bindings
 .
 Some commonly used key bindings:
 .
 | Key               | Action                                     |
 |------------------:|--------------------------------------------|
 | Enter             | Accept (select current one and quit)       |
 | ESC/Ctrl-G        | Abort                                      |
 | Ctrl-P/Up         | Move cursor up                             |
 | Ctrl-N/Down       | Move cursor Down                           |
 | TAB               | Toggle selection and move down (with `-m`) |
 | Shift-TAB         | Toggle selection and move up (with `-m`)   |
 .
 For full list of key bindings, check out the [man
 page](https://github.com/lotabout/skim/blob/master/man/man1/sk.1) (`man sk`).
 .
 ## Search Syntax
 .
 `skim` borrowed `fzf`'s syntax for matching items:
 .
 | Token    | Match type                 | Description                       |
 |----------|----------------------------|-----------------------------------|
 | `text`   | fuzzy-match                | items that match `text`           |
 | `^music` | prefix-exact-match         | items that start with `music`     |
 | `.mp3$`  | suffix-exact-match         | items that end with `.mp3`        |
 | `'wild`  | exact-match (quoted)       | items that include `wild`         |
 | `!fire`  | inverse-exact-match        | items that do not include `fire`  |
 | `!.mp3$` | inverse-suffix-exact-match | items that do not end with `.mp3` |
 .
 `skim` also supports the combination of tokens.
 .
 - Whitespace has the meaning of `AND`. With the term `src main`, `skim` will
 search
     for items that match **both** `src` and `main`.
 - ` | ` means `OR` (note the spaces around `|`). With the term `.md$ |
     .markdown$`, `skim` will search for items ends with either `.md` or
     `.markdown`.
 - `OR` has higher precedence. So `readme .md$ | .markdown$` is grouped into
     `readme AND (.md$ OR .markdown$)`.
 .
 In case that you want to use regular expressions, `skim` provides `regex` mode:
 .
 ```sh
 sk --regex
 ```
 .
 You can switch to `regex` mode dynamically by pressing `Ctrl-R` (Rotate Mode).
 .
 ## exit code
 .
 | Exit Code | Meaning                           |
 |-----------|-----------------------------------|
 | 0         | Exit normally                     |
 | 1         | No Match found                    |
 | 130       | Abort by Ctrl-C/Ctrl-G/ESC/etc... |
 .
 # Customization
 .
 The doc here is only a preview, please check the man page (`man sk`) for a full
 list of options.
 .
 ## Keymap
 .
 Specify the bindings with comma separated pairs (no space allowed), example:
 .
 ```sh
 sk --bind 'alt-a:select-all,alt-d:deselect-all'
 ```
 .
 Additionally, use `+` to concatenate actions, such as `execute-silent(echo {} |
 pbcopy)+abort`.
 .
 See the *KEY BINDINGS* section of the man page for details.
 .
 ## Sort Criteria
 .
 There are five sort keys for results: `score, index, begin, end, length`, you
 can
 specify how the records are sorted by `sk --tiebreak score,index,-begin` or any
 other order you want.
 .
 ## Color Scheme
 .
 It is a high chance that you are a better artist than me. Luckily you won't
 be stuck with the default colors, `skim` supports customization of the color
 scheme.
 .
 ```sh
 --color=[BASE_SCHEME][,COLOR:ANSI]
 ```
 .
 The configuration of colors starts with the name of the base color scheme,
 followed by custom color mappings. For example:
 .
 ```sh
 sk --color=current_bg:24
 sk --color=light,fg:232,bg:255,current_bg:116,info:27
 ```
 .
 See `--color` option in the man page for details.
 .
 ## Misc
 .
 - `--ansi`: to parse ANSI color codes (e.g., `\e[32mABC`) of the data source
 - `--regex`: use the query as regular expression to match the data source
 .
 # Advanced Topics
 .
 ## Interactive mode
 .
 With "interactive mode", you could invoke command dynamically. Try out:
 .
 ```sh
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 How it works?
 .
 ![skim's interactive
 mode](https://user-images.githubusercontent.com/1527040/53381293-461ce380-39ab-11e9-8e86-7c3bbfd557bc.png)
 .
 - Skim could accept two kinds of source: command output or piped input
 - Skim has two kinds of prompts: A query prompt to specify the query pattern
 and a
     command prompt to specify the "arguments" of the command
 - `-c` is used to specify the command to execute while defaults to
 `SKIM_DEFAULT_COMMAND`
 - `-i` is to tell skim open command prompt on startup, which will show `c>` by
 default.
 .
 If you want to further narrow down the results returned by the command, press
 `Ctrl-Q` to toggle interactive mode.
 .
 ## Executing external programs
 .
 You can set up key bindings for starting external processes without leaving
 skim (`execute`, `execute-silent`).
 .
 ```sh
 # Press F1 to open the file with less without leaving skim
 # Press CTRL-Y to copy the line to clipboard and aborts skim (requires pbcopy)
 sk --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} |
 pbcopy)+abort'
 ```
 .
 ## Preview Window
 .
 This is a great feature of fzf that skim borrows. For example, we use 'ag' to
 find the matched lines, once we narrow down to the target lines, we want to
 finally decide which lines to pick by checking the context around the line.
 `grep` and `ag` has an option `--context`, skim can do better with preview
 window. For example:
 .
 ```sh
 sk --ansi -i -c 'ag --color "{}"' --preview "preview.sh {}"
 ```
 .
 (Note the
 [preview.sh](https://github.com/junegunn/fzf.vim/blob/master/bin/preview.sh) is
 a script to print the context given filename:lines:columns)
 You got things like this:
 .
 ![preview
 demo](https://user-images.githubusercontent.com/1527040/30677573-0cee622e-9ebf-11e7-8316-c741324ecb3a.png)
 .
 ### How does it work?
 .
 If the preview command is given by the `--preview` option, skim will replace
 the
 `{}` with the current highlighted line surrounded by single quotes, call the
 command to get the output, and print the output on the preview window.
 .
 Sometimes you don't need the whole line for invoking the command. In this case
 you can use `{}`, `{1..}`, `{..3}` or `{1..5}` to select the fields. The
 syntax is explained in the section "Fields Support".
 .
 Last, you might want to configure the position of preview windows, use
 `--preview-window`.
 .
 - `--preview-window up:30%` to put the window in the up position with height
     30% of the total height of skim.
 - `--preview-window left:10:wrap`, to specify the `wrap` allows the preview
     window to wrap the output of the preview command.
 - `--preview-window wrap:hidden` to hide the preview window at startup, later
     it can be shown by the action `toggle-preview`.
 .
 ## Fields support
 .
 Normally only plugin users need to understand this.
 .
 For example, you have the data source with the format:
 .
 ```sh
 <filename>:<line number>:<column number>
 ```
 .
 However, you want to search `<filename>` only when typing in queries. That
 means when you type `21`, you want to find a `<filename>` that contains `21`,
 but not matching line number or column number.
 .
 You can use `sk --delimiter ':' --nth 1` to achieve this.
 .
 Also you can use `--with-nth` to re-arrange the order of fields.
 .
 **Range Syntax**
 .
 - `<num>` -- to specify the `num`-th fields, starting with 1.
 - `start..` -- starting from the `start`-th fields, and the rest.
 - `..end` -- starting from the `0`-th field, all the way to `end`-th field,
     including `end`.
 - `start..end` -- starting from `start`-th field, all the way to `end`-th
     field, including `end`.
 .
 ## Use as a library
 .
 Skim can be used as a library in your Rust crates.
 .
 First, add skim into your `Cargo.toml`:
 .
 ```toml
 [dependencies]
 skim = "*"
 ```
 .
 Then try to run this simple example:
 .
 ```rust
 extern crate skim;
 use skim::prelude::*;
 use std::io::Cursor;
 .
 pub fn main() {
     let options = SkimOptionsBuilder::default()
         .height(Some("50%"))
         .multi(true)
         .build()
         .unwrap();
 .
     let input = "aaaaa\nbbbb\nccc".to_string();
 .
     // `SkimItemReader` is a helper to turn any `BufRead` into a stream of
 `SkimItem`
     // `SkimItem` was implemented for `AsRef<str>` by default
     let item_reader = SkimItemReader::default();
     let items = item_reader.of_bufread(Cursor::new(input));
 .
     // `run_with` would read and show items from the stream
     let selected_items = Skim::run_with(&options, Some(items))
         .map(|out| out.selected_items)
         .unwrap_or_else(|| Vec::new());
 .
     for item in selected_items.iter() {
         print!("{}{}", item.output(), "\n");
     }
 }
 ```
 .
 Given an `Option<SkimItemReceiver>`, skim will read items accordingly, do its
 job and bring us back the user selection including the selected items, the
 query, etc. Note that:
 .
 - `SkimItemReceiver` is `crossbeam::channel::Receiver<Arc<dyn SkimItem>>`
 - If it is none, it will invoke the given command and read items from command
 output
 - Otherwise, it will read the items from the (crossbeam) channel.
 .
 Trait `SkimItem` is provided to customize how a line could be displayed,
 compared and previewed. It is implemented by default for `AsRef<str>`
 .
 Plus, `SkimItemReader` is a helper to convert a `BufRead` into
 `SkimItemReceiver` (we can easily turn a `File` for `String` into `BufRead`).
 So that you could deal with strings or files easily.
 .
 Check more examples under
 [examples/](https://github.com/lotabout/skim/tree/master/examples) directory.
 .
 # FAQ
 .
 ## How to ignore files?
 .
 Skim invokes `find .` to fetch a list of files for filtering. You can override
 that by setting the environment variable `SKIM_DEFAULT_COMMAND`. For example:
 .
 ```sh
 SKIM_DEFAULT_COMMAND="fd --type f || git ls-tree -r --name-only HEAD || rg
 --files || find ."
 sk
 ```
 .
 You could put it in your `.bashrc` or `.zshrc` if you like it to be default.
 .
 ## Some files are not shown in Vim plugin
 .
 If you use the Vim plugin and execute the `:SK` command, you might find some
 of your files not shown.
 .
 As described in [#3](https://github.com/lotabout/skim/issues/3), in the Vim
 plugin, `SKIM_DEFAULT_COMMAND` is set to the command by default:
 .
 ```vim
 let $SKIM_DEFAULT_COMMAND = "git ls-tree -r --name-only HEAD || rg --files ||
 ag -l -g \"\" || find ."
 ```
 .
 That means, the files not recognized by git will not shown. Either override the
 default with `let $SKIM_DEFAULT_COMMAND = ''` or find the missing file by
 yourself.
 .
 # Differences to fzf
 .
 [fzf](https://github.com/junegunn/fzf) is a command-line fuzzy finder written
 in Go and [skim](https://github.com/lotabout/skim) tries to implement a new one
 in Rust!
 .
 This project is written from scratch. Some decisions of implementation are
 different from fzf. For example:
 .
 1. `skim` is a binary as well as a library while fzf is only a binary.
 2. `skim` has an interactive mode.
 3. `skim` supports pre-selection
 4. The fuzzy search algorithm is different.
 5. ~~UI of showing matched items. `fzf` will show only the range matched while
    `skim` will show each character matched.~~ (fzf has this now)
 6. ~~`skim`'s range syntax is Git style~~: now it is the same with fzf.
 .
 # How to contribute
 .
 [Create new issues](https://github.com/lotabout/skim/issues/new) if you meet
 any bugs
 or have any ideas. Pull requests are warmly welcomed.
 .
 # Troubleshooting
 .
 ## No line feed issues with nix , FreeBSD, termux
 .
 If you encounter display issues like:
 .
 ```bash
 $ for n in {1..10}; do echo "$n"; done | sk
   0/10 0/0.> 10/10  10  9  8  7  6  5  4  3  2> 1
 ```
 .
 For example
 .
 - <https://github.com/lotabout/skim/issues/412>
 - <https://github.com/lotabout/skim/issues/455>
 .
 You need to set TERMINFO or TERMINFO_DIRS to the path to a correct terminfo
 database path
 .
 For example, with termux, you can add in your bashr:
 .
 ```
 export TERMINFO=/data/data/com.termux/files/usr/share/terminfo
 ```
Vcs-Browser: https://github.com/kimono-koans/two_percent
Vcs-Git: https://github.com/kimono-koans/two_percent

Package: two-percent
Version: 0.12.3-1
Architecture: amd64
Maintainer: Zhang Jinzhou <lotabout@gmail.com>
Installed-Size: 5065
Depends: libc6 (>= 2.29)
Filename: ./two-percent_0.12.3-1_amd64.deb
Size: 1473880
MD5sum: 83cb0f1cceeebbf777a90f85e437e909
SHA1: 7ec094c9b0c6de4196a0e8a8ab6041228165125b
SHA256: e20ca26ad1b27a235018c2ea7683c7d2dc9229a720ecf0b0ae56043668b5a07f
Priority: optional
Homepage: https://github.com/kimono-koans/two_percent
Description: Fuzzy Finder in rust!
 <p align="center">
   <a href="https://crates.io/crates/skim">
     <img src="https://img.shields.io/crates/v/skim.svg" alt="Crates.io" />
   </a>
   <a
 href="https://github.com/lotabout/skim/actions?query=workflow%3A%22Build+%26+Test%22">
     <img
 src="https://github.com/lotabout/skim/workflows/Build%20&%20Test/badge.svg"
 alt="Build & Test" />
   </a>
   <a href="https://repology.org/project/skim/versions">
     <img src="https://repology.org/badge/tiny-repos/skim.svg" alt="Packaging
 status" />
   </a>
   <a href="https://discord.gg/23PuxttufP">
     <img alt="Skim Discord"
 src="https://img.shields.io/discord/1031830957432504361?label=&color=7389d8&labelColor=6a7ec2&logoColor=ffffff&logo=discord"
 />
   </a>
 </p>
 .
 *Note: `two_percent` is a fork of
 [skim](https://github.com/lotabout/skim/tree/291fc34c58b1670a5e8c95f1e8f930b82c030b19)
 for use with [httm](https://github.com/kimono-koans/httm).*
 .
 > Life is short, skim!
 .
 Half of our life is spent on navigation: files, lines, commands… You need
 skim!
 It is a general fuzzy finder that saves you time.
 .
 [![skim
 demo](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm.svg)](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm)
 .
 skim provides a single executable: `sk`. Basically anywhere you would want to
 use
 `grep`, try `sk` instead.
 .
 # Table of contents
 .
 - [Installation](#installation)
 - [Usage](#usage)
   - [As Filter](#as-filter)
   - [As Interactive Interface](#as-interactive-interface)
   - [Key Bindings](#key-bindings)
   - [Search Syntax](#search-syntax)
   - [Exit code](#exit-code)
 - [Customization](#customization)
   - [Keymap to redefine](#keymap)
   - [Sort Criteria](#sort-criteria)
   - [Color Scheme](#color-scheme)
   - [Misc](#misc)
 - [Advance Topics](#advance-topics)
   - [Interactive Mode](#interactive-mode)
   - [Executing external programs](#executing-external-programs)
   - [Preview Window](#preview-window)
   - [Fields Support](#fields-support)
   - [Use as a Library](#use-as-a-library)
 - [FAQ](#faq)
   - [How to ignore files?](#how-to-ignore-files)
   - [Some files are not shown in vim
 plugin](#some-files-are-not-shown-in-vim-plugin)
 - [Differences to fzf](#differences-to-fzf)
 - [How to contribute](#how-to-contribute)
 .
 # Installation
 .
 The skim project contains several components:
 .
 1. `sk` executable -- the core.
 2. `sk-tmux` -- script for launching `sk` in a tmux pane.
 3. Vim/Nvim plugin -- to call `sk` inside Vim/Nvim. check
 [skim.vim](https://github.com/lotabout/skim.vim) for more Vim support.
 .
 ## Package Managers
 .
 | Distribution   | Package Manager   | Command                      |
 | -------------- | ----------------- | ---------------------------- |
 | macOS          | Homebrew          | `brew install sk`            |
 | macOS          | MacPorts          | `sudo port install skim`     |
 | Fedora         | dnf               | `dnf install skim`           |
 | Alpine         | apk               | `apk add skim`               |
 | Arch           | pacman            | `pacman -S skim`             |
 | Gentoo         | Portage           | `emerge --ask app-misc/skim` |
 .
 See [repology](https://repology.org/project/skim/versions) for a comprehensive
 overview of package availability.
 .
 ## Install as Vim plugin
 .
 Via vim-plug (recommended):
 .
 ```vim
 Plug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install' }
 ```
 .
 ## Hard Core
 .
 Any of the following applies:
 .
 - Using Git
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     ~/.skim/install
     ```
 .
 - Using Binary: directly [download the sk
 executable](https://github.com/lotabout/skim/releases).
 - Install from [crates.io](https://crates.io/): `cargo install skim`
 - Build Manually
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     cd ~/.skim
     cargo install
     cargo build --release
     # put the resulting `target/release/sk` executable on your PATH.
     ```
 .
 # Usage
 .
 skim can be used as a general filter (like `grep`) or as an interactive
 interface for invoking commands.
 .
 ## As filter
 .
 Try the following
 .
 ```bash
 # directly invoke skim
 sk
 .
 # or pipe some input to it: (press TAB key select multiple items with -m
 enabled)
 vim $(find . -name "*.rs" | sk -m)
 ```
 .
 The above command will allow you to select files with ".rs" extension and open
 the ones you selected in Vim.
 .
 ## As Interactive Interface
 .
 `skim` can invoke other commands dynamically. Normally you would want to
 integrate it with [grep](https://www.gnu.org/software/grep/),
 [ack](https://github.com/petdance/ack2),
 [ag](https://github.com/ggreer/the_silver_searcher), or
 [rg](https://github.com/BurntSushi/ripgrep) for searching contents in a
 project directory:
 .
 ```sh
 # works with grep
 sk --ansi -i -c 'grep -rI --color=always --line-number "{}" .'
 # works with ack
 sk --ansi -i -c 'ack --color "{}"'
 # works with ag
 sk --ansi -i -c 'ag --color "{}"'
 # works with rg
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 ![interactive mode
 demo](https://cloud.githubusercontent.com/assets/1527040/21603930/655d859a-d1db-11e6-9fec-c25099d30a12.gif)
 .
 ## Key Bindings
 .
 Some commonly used key bindings:
 .
 | Key               | Action                                     |
 |------------------:|--------------------------------------------|
 | Enter             | Accept (select current one and quit)       |
 | ESC/Ctrl-G        | Abort                                      |
 | Ctrl-P/Up         | Move cursor up                             |
 | Ctrl-N/Down       | Move cursor Down                           |
 | TAB               | Toggle selection and move down (with `-m`) |
 | Shift-TAB         | Toggle selection and move up (with `-m`)   |
 .
 For full list of key bindings, check out the [man
 page](https://github.com/lotabout/skim/blob/master/man/man1/sk.1) (`man sk`).
 .
 ## Search Syntax
 .
 `skim` borrowed `fzf`'s syntax for matching items:
 .
 | Token    | Match type                 | Description                       |
 |----------|----------------------------|-----------------------------------|
 | `text`   | fuzzy-match                | items that match `text`           |
 | `^music` | prefix-exact-match         | items that start with `music`     |
 | `.mp3$`  | suffix-exact-match         | items that end with `.mp3`        |
 | `'wild`  | exact-match (quoted)       | items that include `wild`         |
 | `!fire`  | inverse-exact-match        | items that do not include `fire`  |
 | `!.mp3$` | inverse-suffix-exact-match | items that do not end with `.mp3` |
 .
 `skim` also supports the combination of tokens.
 .
 - Whitespace has the meaning of `AND`. With the term `src main`, `skim` will
 search
     for items that match **both** `src` and `main`.
 - ` | ` means `OR` (note the spaces around `|`). With the term `.md$ |
     .markdown$`, `skim` will search for items ends with either `.md` or
     `.markdown`.
 - `OR` has higher precedence. So `readme .md$ | .markdown$` is grouped into
     `readme AND (.md$ OR .markdown$)`.
 .
 In case that you want to use regular expressions, `skim` provides `regex` mode:
 .
 ```sh
 sk --regex
 ```
 .
 You can switch to `regex` mode dynamically by pressing `Ctrl-R` (Rotate Mode).
 .
 ## exit code
 .
 | Exit Code | Meaning                           |
 |-----------|-----------------------------------|
 | 0         | Exit normally                     |
 | 1         | No Match found                    |
 | 130       | Abort by Ctrl-C/Ctrl-G/ESC/etc... |
 .
 # Customization
 .
 The doc here is only a preview, please check the man page (`man sk`) for a full
 list of options.
 .
 ## Keymap
 .
 Specify the bindings with comma separated pairs (no space allowed), example:
 .
 ```sh
 sk --bind 'alt-a:select-all,alt-d:deselect-all'
 ```
 .
 Additionally, use `+` to concatenate actions, such as `execute-silent(echo {} |
 pbcopy)+abort`.
 .
 See the *KEY BINDINGS* section of the man page for details.
 .
 ## Sort Criteria
 .
 There are five sort keys for results: `score, index, begin, end, length`, you
 can
 specify how the records are sorted by `sk --tiebreak score,index,-begin` or any
 other order you want.
 .
 ## Color Scheme
 .
 It is a high chance that you are a better artist than me. Luckily you won't
 be stuck with the default colors, `skim` supports customization of the color
 scheme.
 .
 ```sh
 --color=[BASE_SCHEME][,COLOR:ANSI]
 ```
 .
 The configuration of colors starts with the name of the base color scheme,
 followed by custom color mappings. For example:
 .
 ```sh
 sk --color=current_bg:24
 sk --color=light,fg:232,bg:255,current_bg:116,info:27
 ```
 .
 See `--color` option in the man page for details.
 .
 ## Misc
 .
 - `--ansi`: to parse ANSI color codes (e.g., `\e[32mABC`) of the data source
 - `--regex`: use the query as regular expression to match the data source
 .
 # Advanced Topics
 .
 ## Interactive mode
 .
 With "interactive mode", you could invoke command dynamically. Try out:
 .
 ```sh
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 How it works?
 .
 ![skim's interactive
 mode](https://user-images.githubusercontent.com/1527040/53381293-461ce380-39ab-11e9-8e86-7c3bbfd557bc.png)
 .
 - Skim could accept two kinds of source: command output or piped input
 - Skim has two kinds of prompts: A query prompt to specify the query pattern
 and a
     command prompt to specify the "arguments" of the command
 - `-c` is used to specify the command to execute while defaults to
 `SKIM_DEFAULT_COMMAND`
 - `-i` is to tell skim open command prompt on startup, which will show `c>` by
 default.
 .
 If you want to further narrow down the results returned by the command, press
 `Ctrl-Q` to toggle interactive mode.
 .
 ## Executing external programs
 .
 You can set up key bindings for starting external processes without leaving
 skim (`execute`, `execute-silent`).
 .
 ```sh
 # Press F1 to open the file with less without leaving skim
 # Press CTRL-Y to copy the line to clipboard and aborts skim (requires pbcopy)
 sk --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} |
 pbcopy)+abort'
 ```
 .
 ## Preview Window
 .
 This is a great feature of fzf that skim borrows. For example, we use 'ag' to
 find the matched lines, once we narrow down to the target lines, we want to
 finally decide which lines to pick by checking the context around the line.
 `grep` and `ag` has an option `--context`, skim can do better with preview
 window. For example:
 .
 ```sh
 sk --ansi -i -c 'ag --color "{}"' --preview "preview.sh {}"
 ```
 .
 (Note the
 [preview.sh](https://github.com/junegunn/fzf.vim/blob/master/bin/preview.sh) is
 a script to print the context given filename:lines:columns)
 You got things like this:
 .
 ![preview
 demo](https://user-images.githubusercontent.com/1527040/30677573-0cee622e-9ebf-11e7-8316-c741324ecb3a.png)
 .
 ### How does it work?
 .
 If the preview command is given by the `--preview` option, skim will replace
 the
 `{}` with the current highlighted line surrounded by single quotes, call the
 command to get the output, and print the output on the preview window.
 .
 Sometimes you don't need the whole line for invoking the command. In this case
 you can use `{}`, `{1..}`, `{..3}` or `{1..5}` to select the fields. The
 syntax is explained in the section "Fields Support".
 .
 Last, you might want to configure the position of preview windows, use
 `--preview-window`.
 .
 - `--preview-window up:30%` to put the window in the up position with height
     30% of the total height of skim.
 - `--preview-window left:10:wrap`, to specify the `wrap` allows the preview
     window to wrap the output of the preview command.
 - `--preview-window wrap:hidden` to hide the preview window at startup, later
     it can be shown by the action `toggle-preview`.
 .
 ## Fields support
 .
 Normally only plugin users need to understand this.
 .
 For example, you have the data source with the format:
 .
 ```sh
 <filename>:<line number>:<column number>
 ```
 .
 However, you want to search `<filename>` only when typing in queries. That
 means when you type `21`, you want to find a `<filename>` that contains `21`,
 but not matching line number or column number.
 .
 You can use `sk --delimiter ':' --nth 1` to achieve this.
 .
 Also you can use `--with-nth` to re-arrange the order of fields.
 .
 **Range Syntax**
 .
 - `<num>` -- to specify the `num`-th fields, starting with 1.
 - `start..` -- starting from the `start`-th fields, and the rest.
 - `..end` -- starting from the `0`-th field, all the way to `end`-th field,
     including `end`.
 - `start..end` -- starting from `start`-th field, all the way to `end`-th
     field, including `end`.
 .
 ## Use as a library
 .
 Skim can be used as a library in your Rust crates.
 .
 First, add skim into your `Cargo.toml`:
 .
 ```toml
 [dependencies]
 skim = "*"
 ```
 .
 Then try to run this simple example:
 .
 ```rust
 extern crate skim;
 use skim::prelude::*;
 use std::io::Cursor;
 .
 pub fn main() {
     let options = SkimOptionsBuilder::default()
         .height(Some("50%"))
         .multi(true)
         .build()
         .unwrap();
 .
     let input = "aaaaa\nbbbb\nccc".to_string();
 .
     // `SkimItemReader` is a helper to turn any `BufRead` into a stream of
 `SkimItem`
     // `SkimItem` was implemented for `AsRef<str>` by default
     let item_reader = SkimItemReader::default();
     let items = item_reader.of_bufread(Cursor::new(input));
 .
     // `run_with` would read and show items from the stream
     let selected_items = Skim::run_with(&options, Some(items))
         .map(|out| out.selected_items)
         .unwrap_or_else(|| Vec::new());
 .
     for item in selected_items.iter() {
         print!("{}{}", item.output(), "\n");
     }
 }
 ```
 .
 Given an `Option<SkimItemReceiver>`, skim will read items accordingly, do its
 job and bring us back the user selection including the selected items, the
 query, etc. Note that:
 .
 - `SkimItemReceiver` is `crossbeam::channel::Receiver<Arc<dyn SkimItem>>`
 - If it is none, it will invoke the given command and read items from command
 output
 - Otherwise, it will read the items from the (crossbeam) channel.
 .
 Trait `SkimItem` is provided to customize how a line could be displayed,
 compared and previewed. It is implemented by default for `AsRef<str>`
 .
 Plus, `SkimItemReader` is a helper to convert a `BufRead` into
 `SkimItemReceiver` (we can easily turn a `File` for `String` into `BufRead`).
 So that you could deal with strings or files easily.
 .
 Check more examples under
 [examples/](https://github.com/lotabout/skim/tree/master/examples) directory.
 .
 # FAQ
 .
 ## How to ignore files?
 .
 Skim invokes `find .` to fetch a list of files for filtering. You can override
 that by setting the environment variable `SKIM_DEFAULT_COMMAND`. For example:
 .
 ```sh
 SKIM_DEFAULT_COMMAND="fd --type f || git ls-tree -r --name-only HEAD || rg
 --files || find ."
 sk
 ```
 .
 You could put it in your `.bashrc` or `.zshrc` if you like it to be default.
 .
 ## Some files are not shown in Vim plugin
 .
 If you use the Vim plugin and execute the `:SK` command, you might find some
 of your files not shown.
 .
 As described in [#3](https://github.com/lotabout/skim/issues/3), in the Vim
 plugin, `SKIM_DEFAULT_COMMAND` is set to the command by default:
 .
 ```vim
 let $SKIM_DEFAULT_COMMAND = "git ls-tree -r --name-only HEAD || rg --files ||
 ag -l -g \"\" || find ."
 ```
 .
 That means, the files not recognized by git will not shown. Either override the
 default with `let $SKIM_DEFAULT_COMMAND = ''` or find the missing file by
 yourself.
 .
 # Differences to fzf
 .
 [fzf](https://github.com/junegunn/fzf) is a command-line fuzzy finder written
 in Go and [skim](https://github.com/lotabout/skim) tries to implement a new one
 in Rust!
 .
 This project is written from scratch. Some decisions of implementation are
 different from fzf. For example:
 .
 1. `skim` is a binary as well as a library while fzf is only a binary.
 2. `skim` has an interactive mode.
 3. `skim` supports pre-selection
 4. The fuzzy search algorithm is different.
 5. ~~UI of showing matched items. `fzf` will show only the range matched while
    `skim` will show each character matched.~~ (fzf has this now)
 6. ~~`skim`'s range syntax is Git style~~: now it is the same with fzf.
 .
 # How to contribute
 .
 [Create new issues](https://github.com/lotabout/skim/issues/new) if you meet
 any bugs
 or have any ideas. Pull requests are warmly welcomed.
 .
 # Troubleshooting
 .
 ## No line feed issues with nix , FreeBSD, termux
 .
 If you encounter display issues like:
 .
 ```bash
 $ for n in {1..10}; do echo "$n"; done | sk
   0/10 0/0.> 10/10  10  9  8  7  6  5  4  3  2> 1
 ```
 .
 For example
 .
 - <https://github.com/lotabout/skim/issues/412>
 - <https://github.com/lotabout/skim/issues/455>
 .
 You need to set TERMINFO or TERMINFO_DIRS to the path to a correct terminfo
 database path
 .
 For example, with termux, you can add in your bashr:
 .
 ```
 export TERMINFO=/data/data/com.termux/files/usr/share/terminfo
 ```

