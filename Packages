Package: dano
Version: 0.8.0
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 37021
Depends: ffmpeg (>=4.2.7), libc6 (>= 2.29)
Suggests: flac (>=1.3.3)
Filename: ./dano_0.8.0_amd64.deb
Size: 4624572
MD5sum: e717cbdbe6aa3ab2d70bb93ac7644bdb
SHA1: 91e4a5b305b2d039eb7ceb4d59d92abadf01435e
SHA256: a44e7406a10a28fc35ff688fed9a0e7afdf4630ca4bd53960ffb15c9948a4e47
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/dano/blob/master/README.md
Description: A CLI tool for generating checksums of media bitstreams
 dano is a wrapper for ffmpeg that checksums the internal file streams of ffmpeg
 compatible media files, and stores them in a format which can be used to verify
 such checksums later.  This is handy, because, should you choose to change
 metadata tags, or change file names, the media checksums should remain the
 same.
Vcs-Browser: https://github.com/kimono-koans/dano
Vcs-Git: https://github.com/kimono-koans/dano

Package: dano
Version: 0.8.1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 37519
Depends: ffmpeg (>=4.2.7), libc6 (>= 2.29)
Suggests: flac (>=1.3.3)
Filename: ./dano_0.8.1_amd64.deb
Size: 4658892
MD5sum: cb7832425988da152ea605e699d0af1c
SHA1: 56526309c44dd4ace1f3ea5602ca035acb1563b5
SHA256: 717472b17f0d605b9ac565b14a74095f881f6e167076a75183735a4759f467ef
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/dano/blob/master/README.md
Description: A CLI tool for generating checksums of media bitstreams
 dano is a wrapper for ffmpeg that checksums the internal file streams of ffmpeg
 compatible media files, and stores them in a format which can be used to verify
 such checksums later.  This is handy, because, should you choose to change
 metadata tags, or change file names, the media checksums should remain the
 same.
Vcs-Browser: https://github.com/kimono-koans/dano
Vcs-Git: https://github.com/kimono-koans/dano

Package: dano
Version: 0.8.2
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 37644
Depends: ffmpeg (>=4.2.7), libc6 (>= 2.29)
Suggests: flac (>=1.3.3)
Filename: ./dano_0.8.2_amd64.deb
Size: 4668320
MD5sum: 369d97c3e8ce987486276f74b215ffc8
SHA1: 1914a73128da5daf99a5f0a7754f48b0e8074d30
SHA256: 15bf83fe45bab410f6f67c3060213539c8fe5236f044a4b6da32fe52797a7be3
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/dano/blob/master/README.md
Description: A CLI tool for generating checksums of media bitstreams
 dano is a wrapper for ffmpeg that checksums the internal file streams of ffmpeg
 compatible media files, and stores them in a format which can be used to verify
 such checksums later.  This is handy, because, should you choose to change
 metadata tags, or change file names, the media checksums should remain the
 same.
Vcs-Browser: https://github.com/kimono-koans/dano
Vcs-Git: https://github.com/kimono-koans/dano

Package: dano
Version: 0.8.3-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 38231
Depends: libc6 (>= 2.29), ffmpeg (>=4.2.7)
Suggests: flac (>=1.3.3)
Filename: ./dano_0.8.3-1_amd64.deb
Size: 4870652
MD5sum: 56c22d7f53a9a5811b1253f58dabbdbd
SHA1: b99ac587db1bb501913b3b2173cd1c1715711863
SHA256: a8184a1f3e421284f70e4a534dc2360026dffa0931c46c5f36f5800bf9b8a793
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/dano/blob/master/README.md
Description: A CLI tool for generating checksums of media bitstreams
 dano is a wrapper for ffmpeg that checksums the internal file streams of ffmpeg
 compatible media files, and stores them in a format which can be used to verify
 such checksums later.  This is handy, because, should you choose to change
 metadata tags, or change file names, the media checksums should remain the
 same.
Vcs-Browser: https://github.com/kimono-koans/dano
Vcs-Git: https://github.com/kimono-koans/dano

Package: dano
Version: 0.9.0-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 1400
Depends: ffmpeg (>=4.2.7), libc6 (>= 2.29)
Suggests: flac (>=1.3.3)
Filename: ./dano_0.9.0-1_amd64.deb
Size: 471960
MD5sum: 28441912c328f4a743a14dda5021a87b
SHA1: 41fa83f5e8ee3d9ce80db9e923bf7ca821f80424
SHA256: b9e1cb9f38bdfb2020a01bfa8a3b8be78cd40f776966557079cb4bfff0a05431
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/dano/blob/master/README.md
Description: A CLI tool for generating checksums of media bitstreams
 dano is a wrapper for ffmpeg that checksums the internal file streams of ffmpeg
 compatible media files, and stores them in a format which can be used to verify
 such checksums later.  This is handy, because, should you choose to change
 metadata tags, or change file names, the media checksums should remain the
 same.
Vcs-Browser: https://github.com/kimono-koans/dano
Vcs-Git: https://github.com/kimono-koans/dano

Package: httm
Version: 0.39.0-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 4069
Depends: libc6
Filename: ./httm_0.39.0-1_amd64.deb
Size: 1236860
MD5sum: 0e4fe9c29e2149bdbca5eef268d9b63e
SHA1: 76504f88458de3cde3ac362ea267e40967504384
SHA256: f9c159fb64df449b518113ba915587144c01096896f1a969494371a08c86d97a
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.
Vcs-Browser: https://github.com/kimono-koans/httm
Vcs-Git: https://github.com/kimono-koans/httm

Package: httm
Version: 0.39.1-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 4071
Depends: libc6
Filename: ./httm_0.39.1-1_amd64.deb
Size: 1236260
MD5sum: bf7a58816dafa87a0cf4db32db8f7dcd
SHA1: 4d0f568af420c2ed8789e8eaa347b5fdd0739ce5
SHA256: d848441058789cddc66124264c9593896e453781ba7d63aa93c8e26a76d4ee7f
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.
Vcs-Browser: https://github.com/kimono-koans/httm
Vcs-Git: https://github.com/kimono-koans/httm

Package: httm
Version: 0.39.2-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 4069
Depends: libc6
Filename: ./httm_0.39.2-1_amd64.deb
Size: 1236192
MD5sum: 5cb5a185876d5948974aded544b17ccf
SHA1: 28e655e6d6a3c79479d08a5f0e7f796255c24ead
SHA256: 55c3856d5226302dda7d0cc5f0ca7579ccf2e015fa3168b5e567a8807458316b
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.
Vcs-Browser: https://github.com/kimono-koans/httm
Vcs-Git: https://github.com/kimono-koans/httm

Package: httm
Version: 0.40.0-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 4084
Depends: libc6
Filename: ./httm_0.40.0-1_amd64.deb
Size: 1239400
MD5sum: 774ef57e5b825ee27c7c25fe60ba861a
SHA1: 310887d15ab3adfdfed600acd3771f924dcdb7b4
SHA256: 31c4dc1a04b34a7c7eebd359c86eff3882ae2e74e4f82202997653eef74f008d
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.
Vcs-Browser: https://github.com/kimono-koans/httm
Vcs-Git: https://github.com/kimono-koans/httm

Package: httm
Version: 0.40.1-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 4082
Depends: libc6
Filename: ./httm_0.40.1-1_amd64.deb
Size: 1239424
MD5sum: 8f5c816e0202a9733e01e7fdc4d01ca7
SHA1: 1b2d7b463015c705cc0138e59fb6877b537b7a16
SHA256: 3936478b55e260e2e5997cae0f603e4df7215cbfbda2e178e784f63e826448d5
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.
Vcs-Browser: https://github.com/kimono-koans/httm
Vcs-Git: https://github.com/kimono-koans/httm

Package: httm
Version: 0.40.2-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 4087
Depends: libc6
Filename: ./httm_0.40.2-1_amd64.deb
Size: 1240208
MD5sum: 36bd95ef11001ff37398dda54698d25a
SHA1: e7dcf847b44dec645ffbf3ec7f2f00817fa6b736
SHA256: 76ad38c2624bb48bcbf29bc5abf0c7b7c094d3401b61124d0a3072140432267f
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.
Vcs-Browser: https://github.com/kimono-koans/httm
Vcs-Git: https://github.com/kimono-koans/httm

Package: httm
Version: 0.40.3-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 4050
Depends: libc6
Filename: ./httm_0.40.3-1_amd64.deb
Size: 1233788
MD5sum: 60298937d8901744361c1cb495d40c30
SHA1: cfdd786a403b5ef9edfc54a849aca410e8f47551
SHA256: f4e0663d86a698cf2a105fba7f4081f2be8595299e213e7e196aca39ecc42210
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.
Vcs-Browser: https://github.com/kimono-koans/httm
Vcs-Git: https://github.com/kimono-koans/httm

Package: httm
Version: 0.40.4-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 4050
Depends: libc6
Filename: ./httm_0.40.4-1_amd64.deb
Size: 1233972
MD5sum: e959d8a3076b8d4efc94df926f96a985
SHA1: b03a831f17481cc74bb23d0fb89eef7ef605ef9f
SHA256: 309e265ec6d43b0daca9838523ee085f33ab34b09997a71e15b931bd627f5e11
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.
Vcs-Browser: https://github.com/kimono-koans/httm
Vcs-Git: https://github.com/kimono-koans/httm

Package: httm
Version: 0.40.5-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 4050
Depends: libc6
Filename: ./httm_0.40.5-1_amd64.deb
Size: 1234288
MD5sum: de88804358d73cef294ad8f9dca4a35b
SHA1: d1eda050f74a5f4344ace38b17d5a6628bd5d0c2
SHA256: 79754e5a5aefbe7ae88b592b3502a2d4e8d356939beb4869aa7b9a9d1a32d149
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.
Vcs-Browser: https://github.com/kimono-koans/httm
Vcs-Git: https://github.com/kimono-koans/httm

Package: httm
Version: 0.40.6-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 4032
Depends: libc6
Filename: ./httm_0.40.6-1_amd64.deb
Size: 1232124
MD5sum: 0af1d20dddd2bbdc3086311c8a160a0f
SHA1: 2a083d2c0cf6895c5c6afa73a0a20d387ac95046
SHA256: 20dc203a9c0e970555f54f746ef7b18faa1bd3611fdfd7c9a8c9eb29e906264d
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.
Vcs-Browser: https://github.com/kimono-koans/httm
Vcs-Git: https://github.com/kimono-koans/httm

Package: httm
Version: 0.40.7-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 4020
Depends: libc6
Filename: ./httm_0.40.7-1_amd64.deb
Size: 1227856
MD5sum: bbc2f6d682a643c9fd06f270d8500851
SHA1: 4cfb3b901a62ab06c90dc5752233cf416ad8d8e2
SHA256: 8246af9748365690b3a1fb7c0f4c48fb2206fbe45a900d77f15591211c7d9bbd
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.
Vcs-Browser: https://github.com/kimono-koans/httm
Vcs-Git: https://github.com/kimono-koans/httm

Package: httm
Version: 0.40.8-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 4020
Depends: libc6
Filename: ./httm_0.40.8-1_amd64.deb
Size: 1227072
MD5sum: dcdc074ab96b5187e128b6715d49e75e
SHA1: e2ed4e9844e1dae31eff5b6c07cd4ff81174f2db
SHA256: b0590ecd91091b5cf3370e2df35b77670b8c78235f4d93b34228012aafb94765
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.
Vcs-Browser: https://github.com/kimono-koans/httm
Vcs-Git: https://github.com/kimono-koans/httm

Package: httm
Version: 0.41.0-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 4002
Depends: libc6
Filename: ./httm_0.41.0-1_amd64.deb
Size: 1226496
MD5sum: cf4f748019b7eb5eb020ce7c594c0567
SHA1: 4ba71ab5d5ced8a4fd7cb65c150da196c1a128eb
SHA256: cd37ca23f5b9f34c19c296c872c4cf68fb8e33ac7993d6af937ffc3e4e2e8590
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.
Vcs-Browser: https://github.com/kimono-koans/httm
Vcs-Git: https://github.com/kimono-koans/httm

Package: httm
Version: 0.41.1-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 4003
Depends: libc6
Filename: ./httm_0.41.1-1_amd64.deb
Size: 1226944
MD5sum: 775de61b5cd322549ff090e7aff1acf0
SHA1: 768780b16e9e004d725efdadccafdbd2c149cb36
SHA256: 82912877d3b4fd7067ed88fdccf358b9207554f80e17ef3ffb89ec1d8c970451
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.
Vcs-Browser: https://github.com/kimono-koans/httm
Vcs-Git: https://github.com/kimono-koans/httm

Package: httm
Version: 0.41.2-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 3976
Depends: libc6
Filename: ./httm_0.41.2-1_amd64.deb
Size: 1256596
MD5sum: 13438b145969fadb5d80b504b34b0860
SHA1: 54832599e21feb194925f98e2e4ade9884206f0f
SHA256: f6e10bed1cdc42246604ea5f676883bec3ff14d51a7214a15925faeb96207bcb
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.
Vcs-Browser: https://github.com/kimono-koans/httm
Vcs-Git: https://github.com/kimono-koans/httm

Package: two-percent
Version: 0.11.15-1
Architecture: amd64
Maintainer: Zhang Jinzhou <lotabout@gmail.com>
Installed-Size: 5223
Depends: libc6 (>= 2.29)
Filename: ./two-percent_0.11.15-1_amd64.deb
Size: 1477556
MD5sum: fd7ebd0de41427f68924a93310eeacae
SHA1: edb80d240eee59a7ed4dc43f33d90674b4bb7452
SHA256: 7c98bcb740bb5cfcee1126fcfb8c7179fa3ed6fb875803254df5701c300fc061
Priority: optional
Homepage: https://github.com/kimono-koans/two_percent
Description: Fuzzy Finder in rust!
 <p align="center">
   <a href="https://crates.io/crates/skim">
     <img src="https://img.shields.io/crates/v/skim.svg" alt="Crates.io" />
   </a>
   <a
 href="https://github.com/lotabout/skim/actions?query=workflow%3A%22Build+%26+Test%22">
     <img
 src="https://github.com/lotabout/skim/workflows/Build%20&%20Test/badge.svg"
 alt="Build & Test" />
   </a>
   <a href="https://repology.org/project/skim/versions">
     <img src="https://repology.org/badge/tiny-repos/skim.svg" alt="Packaging
 status" />
   </a>
   <a href="https://discord.gg/23PuxttufP">
     <img alt="Skim Discord"
 src="https://img.shields.io/discord/1031830957432504361?label=&color=7389d8&labelColor=6a7ec2&logoColor=ffffff&logo=discord"
 />
   </a>
 </p>
 .
 *Note: `two_percent` is a fork of
 [skim](https://github.com/lotabout/skim/tree/291fc34c58b1670a5e8c95f1e8f930b82c030b19)
 for use with [httm](https://github.com/kimono-koans/httm).*
 .
 > Life is short, skim!
 .
 Half of our life is spent on navigation: files, lines, commands… You need
 skim!
 It is a general fuzzy finder that saves you time.
 .
 [![skim
 demo](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm.svg)](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm)
 .
 skim provides a single executable: `sk`. Basically anywhere you would want to
 use
 `grep`, try `sk` instead.
 .
 # Table of contents
 .
 - [Installation](#installation)
 - [Usage](#usage)
   - [As Filter](#as-filter)
   - [As Interactive Interface](#as-interactive-interface)
   - [Key Bindings](#key-bindings)
   - [Search Syntax](#search-syntax)
   - [Exit code](#exit-code)
 - [Customization](#customization)
   - [Keymap to redefine](#keymap)
   - [Sort Criteria](#sort-criteria)
   - [Color Scheme](#color-scheme)
   - [Misc](#misc)
 - [Advance Topics](#advance-topics)
   - [Interactive Mode](#interactive-mode)
   - [Executing external programs](#executing-external-programs)
   - [Preview Window](#preview-window)
   - [Fields Support](#fields-support)
   - [Use as a Library](#use-as-a-library)
 - [FAQ](#faq)
   - [How to ignore files?](#how-to-ignore-files)
   - [Some files are not shown in vim
 plugin](#some-files-are-not-shown-in-vim-plugin)
 - [Differences to fzf](#differences-to-fzf)
 - [How to contribute](#how-to-contribute)
 .
 # Installation
 .
 The skim project contains several components:
 .
 1. `sk` executable -- the core.
 2. `sk-tmux` -- script for launching `sk` in a tmux pane.
 3. Vim/Nvim plugin -- to call `sk` inside Vim/Nvim. check
 [skim.vim](https://github.com/lotabout/skim.vim) for more Vim support.
 .
 ## Package Managers
 .
 | Distribution   | Package Manager   | Command                      |
 | -------------- | ----------------- | ---------------------------- |
 | macOS          | Homebrew          | `brew install sk`            |
 | macOS          | MacPorts          | `sudo port install skim`     |
 | Fedora         | dnf               | `dnf install skim`           |
 | Alpine         | apk               | `apk add skim`               |
 | Arch           | pacman            | `pacman -S skim`             |
 | Gentoo         | Portage           | `emerge --ask app-misc/skim` |
 .
 See [repology](https://repology.org/project/skim/versions) for a comprehensive
 overview of package availability.
 .
 ## Install as Vim plugin
 .
 Via vim-plug (recommended):
 .
 ```vim
 Plug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install' }
 ```
 .
 ## Hard Core
 .
 Any of the following applies:
 .
 - Using Git
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     ~/.skim/install
     ```
 .
 - Using Binary: directly [download the sk
 executable](https://github.com/lotabout/skim/releases).
 - Install from [crates.io](https://crates.io/): `cargo install skim`
 - Build Manually
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     cd ~/.skim
     cargo install
     cargo build --release
     # put the resulting `target/release/sk` executable on your PATH.
     ```
 .
 # Usage
 .
 skim can be used as a general filter (like `grep`) or as an interactive
 interface for invoking commands.
 .
 ## As filter
 .
 Try the following
 .
 ```bash
 # directly invoke skim
 sk
 .
 # or pipe some input to it: (press TAB key select multiple items with -m
 enabled)
 vim $(find . -name "*.rs" | sk -m)
 ```
 .
 The above command will allow you to select files with ".rs" extension and open
 the ones you selected in Vim.
 .
 ## As Interactive Interface
 .
 `skim` can invoke other commands dynamically. Normally you would want to
 integrate it with [grep](https://www.gnu.org/software/grep/),
 [ack](https://github.com/petdance/ack2),
 [ag](https://github.com/ggreer/the_silver_searcher), or
 [rg](https://github.com/BurntSushi/ripgrep) for searching contents in a
 project directory:
 .
 ```sh
 # works with grep
 sk --ansi -i -c 'grep -rI --color=always --line-number "{}" .'
 # works with ack
 sk --ansi -i -c 'ack --color "{}"'
 # works with ag
 sk --ansi -i -c 'ag --color "{}"'
 # works with rg
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 ![interactive mode
 demo](https://cloud.githubusercontent.com/assets/1527040/21603930/655d859a-d1db-11e6-9fec-c25099d30a12.gif)
 .
 ## Key Bindings
 .
 Some commonly used key bindings:
 .
 | Key               | Action                                     |
 |------------------:|--------------------------------------------|
 | Enter             | Accept (select current one and quit)       |
 | ESC/Ctrl-G        | Abort                                      |
 | Ctrl-P/Up         | Move cursor up                             |
 | Ctrl-N/Down       | Move cursor Down                           |
 | TAB               | Toggle selection and move down (with `-m`) |
 | Shift-TAB         | Toggle selection and move up (with `-m`)   |
 .
 For full list of key bindings, check out the [man
 page](https://github.com/lotabout/skim/blob/master/man/man1/sk.1) (`man sk`).
 .
 ## Search Syntax
 .
 `skim` borrowed `fzf`'s syntax for matching items:
 .
 | Token    | Match type                 | Description                       |
 |----------|----------------------------|-----------------------------------|
 | `text`   | fuzzy-match                | items that match `text`           |
 | `^music` | prefix-exact-match         | items that start with `music`     |
 | `.mp3$`  | suffix-exact-match         | items that end with `.mp3`        |
 | `'wild`  | exact-match (quoted)       | items that include `wild`         |
 | `!fire`  | inverse-exact-match        | items that do not include `fire`  |
 | `!.mp3$` | inverse-suffix-exact-match | items that do not end with `.mp3` |
 .
 `skim` also supports the combination of tokens.
 .
 - Whitespace has the meaning of `AND`. With the term `src main`, `skim` will
 search
     for items that match **both** `src` and `main`.
 - ` | ` means `OR` (note the spaces around `|`). With the term `.md$ |
     .markdown$`, `skim` will search for items ends with either `.md` or
     `.markdown`.
 - `OR` has higher precedence. So `readme .md$ | .markdown$` is grouped into
     `readme AND (.md$ OR .markdown$)`.
 .
 In case that you want to use regular expressions, `skim` provides `regex` mode:
 .
 ```sh
 sk --regex
 ```
 .
 You can switch to `regex` mode dynamically by pressing `Ctrl-R` (Rotate Mode).
 .
 ## exit code
 .
 | Exit Code | Meaning                           |
 |-----------|-----------------------------------|
 | 0         | Exit normally                     |
 | 1         | No Match found                    |
 | 130       | Abort by Ctrl-C/Ctrl-G/ESC/etc... |
 .
 # Customization
 .
 The doc here is only a preview, please check the man page (`man sk`) for a full
 list of options.
 .
 ## Keymap
 .
 Specify the bindings with comma separated pairs (no space allowed), example:
 .
 ```sh
 sk --bind 'alt-a:select-all,alt-d:deselect-all'
 ```
 .
 Additionally, use `+` to concatenate actions, such as `execute-silent(echo {} |
 pbcopy)+abort`.
 .
 See the *KEY BINDINGS* section of the man page for details.
 .
 ## Sort Criteria
 .
 There are five sort keys for results: `score, index, begin, end, length`, you
 can
 specify how the records are sorted by `sk --tiebreak score,index,-begin` or any
 other order you want.
 .
 ## Color Scheme
 .
 It is a high chance that you are a better artist than me. Luckily you won't
 be stuck with the default colors, `skim` supports customization of the color
 scheme.
 .
 ```sh
 --color=[BASE_SCHEME][,COLOR:ANSI]
 ```
 .
 The configuration of colors starts with the name of the base color scheme,
 followed by custom color mappings. For example:
 .
 ```sh
 sk --color=current_bg:24
 sk --color=light,fg:232,bg:255,current_bg:116,info:27
 ```
 .
 See `--color` option in the man page for details.
 .
 ## Misc
 .
 - `--ansi`: to parse ANSI color codes (e.g., `\e[32mABC`) of the data source
 - `--regex`: use the query as regular expression to match the data source
 .
 # Advanced Topics
 .
 ## Interactive mode
 .
 With "interactive mode", you could invoke command dynamically. Try out:
 .
 ```sh
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 How it works?
 .
 ![skim's interactive
 mode](https://user-images.githubusercontent.com/1527040/53381293-461ce380-39ab-11e9-8e86-7c3bbfd557bc.png)
 .
 - Skim could accept two kinds of source: command output or piped input
 - Skim has two kinds of prompts: A query prompt to specify the query pattern
 and a
     command prompt to specify the "arguments" of the command
 - `-c` is used to specify the command to execute while defaults to
 `SKIM_DEFAULT_COMMAND`
 - `-i` is to tell skim open command prompt on startup, which will show `c>` by
 default.
 .
 If you want to further narrow down the results returned by the command, press
 `Ctrl-Q` to toggle interactive mode.
 .
 ## Executing external programs
 .
 You can set up key bindings for starting external processes without leaving
 skim (`execute`, `execute-silent`).
 .
 ```sh
 # Press F1 to open the file with less without leaving skim
 # Press CTRL-Y to copy the line to clipboard and aborts skim (requires pbcopy)
 sk --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} |
 pbcopy)+abort'
 ```
 .
 ## Preview Window
 .
 This is a great feature of fzf that skim borrows. For example, we use 'ag' to
 find the matched lines, once we narrow down to the target lines, we want to
 finally decide which lines to pick by checking the context around the line.
 `grep` and `ag` has an option `--context`, skim can do better with preview
 window. For example:
 .
 ```sh
 sk --ansi -i -c 'ag --color "{}"' --preview "preview.sh {}"
 ```
 .
 (Note the
 [preview.sh](https://github.com/junegunn/fzf.vim/blob/master/bin/preview.sh) is
 a script to print the context given filename:lines:columns)
 You got things like this:
 .
 ![preview
 demo](https://user-images.githubusercontent.com/1527040/30677573-0cee622e-9ebf-11e7-8316-c741324ecb3a.png)
 .
 ### How does it work?
 .
 If the preview command is given by the `--preview` option, skim will replace
 the
 `{}` with the current highlighted line surrounded by single quotes, call the
 command to get the output, and print the output on the preview window.
 .
 Sometimes you don't need the whole line for invoking the command. In this case
 you can use `{}`, `{1..}`, `{..3}` or `{1..5}` to select the fields. The
 syntax is explained in the section "Fields Support".
 .
 Last, you might want to configure the position of preview windows, use
 `--preview-window`.
 .
 - `--preview-window up:30%` to put the window in the up position with height
     30% of the total height of skim.
 - `--preview-window left:10:wrap`, to specify the `wrap` allows the preview
     window to wrap the output of the preview command.
 - `--preview-window wrap:hidden` to hide the preview window at startup, later
     it can be shown by the action `toggle-preview`.
 .
 ## Fields support
 .
 Normally only plugin users need to understand this.
 .
 For example, you have the data source with the format:
 .
 ```sh
 <filename>:<line number>:<column number>
 ```
 .
 However, you want to search `<filename>` only when typing in queries. That
 means when you type `21`, you want to find a `<filename>` that contains `21`,
 but not matching line number or column number.
 .
 You can use `sk --delimiter ':' --nth 1` to achieve this.
 .
 Also you can use `--with-nth` to re-arrange the order of fields.
 .
 **Range Syntax**
 .
 - `<num>` -- to specify the `num`-th fields, starting with 1.
 - `start..` -- starting from the `start`-th fields, and the rest.
 - `..end` -- starting from the `0`-th field, all the way to `end`-th field,
     including `end`.
 - `start..end` -- starting from `start`-th field, all the way to `end`-th
     field, including `end`.
 .
 ## Use as a library
 .
 Skim can be used as a library in your Rust crates.
 .
 First, add skim into your `Cargo.toml`:
 .
 ```toml
 [dependencies]
 skim = "*"
 ```
 .
 Then try to run this simple example:
 .
 ```rust
 extern crate skim;
 use skim::prelude::*;
 use std::io::Cursor;
 .
 pub fn main() {
     let options = SkimOptionsBuilder::default()
         .height(Some("50%"))
         .multi(true)
         .build()
         .unwrap();
 .
     let input = "aaaaa\nbbbb\nccc".to_string();
 .
     // `SkimItemReader` is a helper to turn any `BufRead` into a stream of
 `SkimItem`
     // `SkimItem` was implemented for `AsRef<str>` by default
     let item_reader = SkimItemReader::default();
     let items = item_reader.of_bufread(Cursor::new(input));
 .
     // `run_with` would read and show items from the stream
     let selected_items = Skim::run_with(&options, Some(items))
         .map(|out| out.selected_items)
         .unwrap_or_else(|| Vec::new());
 .
     for item in selected_items.iter() {
         print!("{}{}", item.output(), "\n");
     }
 }
 ```
 .
 Given an `Option<SkimItemReceiver>`, skim will read items accordingly, do its
 job and bring us back the user selection including the selected items, the
 query, etc. Note that:
 .
 - `SkimItemReceiver` is `crossbeam::channel::Receiver<Arc<dyn SkimItem>>`
 - If it is none, it will invoke the given command and read items from command
 output
 - Otherwise, it will read the items from the (crossbeam) channel.
 .
 Trait `SkimItem` is provided to customize how a line could be displayed,
 compared and previewed. It is implemented by default for `AsRef<str>`
 .
 Plus, `SkimItemReader` is a helper to convert a `BufRead` into
 `SkimItemReceiver` (we can easily turn a `File` for `String` into `BufRead`).
 So that you could deal with strings or files easily.
 .
 Check more examples under
 [examples/](https://github.com/lotabout/skim/tree/master/examples) directory.
 .
 # FAQ
 .
 ## How to ignore files?
 .
 Skim invokes `find .` to fetch a list of files for filtering. You can override
 that by setting the environment variable `SKIM_DEFAULT_COMMAND`. For example:
 .
 ```sh
 SKIM_DEFAULT_COMMAND="fd --type f || git ls-tree -r --name-only HEAD || rg
 --files || find ."
 sk
 ```
 .
 You could put it in your `.bashrc` or `.zshrc` if you like it to be default.
 .
 ## Some files are not shown in Vim plugin
 .
 If you use the Vim plugin and execute the `:SK` command, you might find some
 of your files not shown.
 .
 As described in [#3](https://github.com/lotabout/skim/issues/3), in the Vim
 plugin, `SKIM_DEFAULT_COMMAND` is set to the command by default:
 .
 ```vim
 let $SKIM_DEFAULT_COMMAND = "git ls-tree -r --name-only HEAD || rg --files ||
 ag -l -g \"\" || find ."
 ```
 .
 That means, the files not recognized by git will not shown. Either override the
 default with `let $SKIM_DEFAULT_COMMAND = ''` or find the missing file by
 yourself.
 .
 # Differences to fzf
 .
 [fzf](https://github.com/junegunn/fzf) is a command-line fuzzy finder written
 in Go and [skim](https://github.com/lotabout/skim) tries to implement a new one
 in Rust!
 .
 This project is written from scratch. Some decisions of implementation are
 different from fzf. For example:
 .
 1. `skim` is a binary as well as a library while fzf is only a binary.
 2. `skim` has an interactive mode.
 3. `skim` supports pre-selection
 4. The fuzzy search algorithm is different.
 5. ~~UI of showing matched items. `fzf` will show only the range matched while
    `skim` will show each character matched.~~ (fzf has this now)
 6. ~~`skim`'s range syntax is Git style~~: now it is the same with fzf.
 .
 # How to contribute
 .
 [Create new issues](https://github.com/lotabout/skim/issues/new) if you meet
 any bugs
 or have any ideas. Pull requests are warmly welcomed.
 .
 # Troubleshooting
 .
 ## No line feed issues with nix , FreeBSD, termux
 .
 If you encounter display issues like:
 .
 ```bash
 $ for n in {1..10}; do echo "$n"; done | sk
   0/10 0/0.> 10/10  10  9  8  7  6  5  4  3  2> 1
 ```
 .
 For example
 .
 - <https://github.com/lotabout/skim/issues/412>
 - <https://github.com/lotabout/skim/issues/455>
 .
 You need to set TERMINFO or TERMINFO_DIRS to the path to a correct terminfo
 database path
 .
 For example, with termux, you can add in your bashr:
 .
 ```
 export TERMINFO=/data/data/com.termux/files/usr/share/terminfo
 ```
Vcs-Browser: https://github.com/kimono-koans/two_percent
Vcs-Git: https://github.com/kimono-koans/two_percent

Package: two-percent
Version: 0.11.16-1
Architecture: amd64
Maintainer: Zhang Jinzhou <lotabout@gmail.com>
Installed-Size: 5158
Depends: libc6 (>= 2.29)
Filename: ./two-percent_0.11.16-1_amd64.deb
Size: 1454920
MD5sum: 88ee7af5e6ec572a5d0d84aa602c0ae2
SHA1: 40e762465b2d57a0febd7287705d3c52177d1321
SHA256: 829f4fbebcf878884a27e9f2ad40d5920cafe74dba1143f488801031f36864cf
Priority: optional
Homepage: https://github.com/kimono-koans/two_percent
Description: Fuzzy Finder in rust!
 <p align="center">
   <a href="https://crates.io/crates/skim">
     <img src="https://img.shields.io/crates/v/skim.svg" alt="Crates.io" />
   </a>
   <a
 href="https://github.com/lotabout/skim/actions?query=workflow%3A%22Build+%26+Test%22">
     <img
 src="https://github.com/lotabout/skim/workflows/Build%20&%20Test/badge.svg"
 alt="Build & Test" />
   </a>
   <a href="https://repology.org/project/skim/versions">
     <img src="https://repology.org/badge/tiny-repos/skim.svg" alt="Packaging
 status" />
   </a>
   <a href="https://discord.gg/23PuxttufP">
     <img alt="Skim Discord"
 src="https://img.shields.io/discord/1031830957432504361?label=&color=7389d8&labelColor=6a7ec2&logoColor=ffffff&logo=discord"
 />
   </a>
 </p>
 .
 *Note: `two_percent` is a fork of
 [skim](https://github.com/lotabout/skim/tree/291fc34c58b1670a5e8c95f1e8f930b82c030b19)
 for use with [httm](https://github.com/kimono-koans/httm).*
 .
 > Life is short, skim!
 .
 Half of our life is spent on navigation: files, lines, commands… You need
 skim!
 It is a general fuzzy finder that saves you time.
 .
 [![skim
 demo](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm.svg)](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm)
 .
 skim provides a single executable: `sk`. Basically anywhere you would want to
 use
 `grep`, try `sk` instead.
 .
 # Table of contents
 .
 - [Installation](#installation)
 - [Usage](#usage)
   - [As Filter](#as-filter)
   - [As Interactive Interface](#as-interactive-interface)
   - [Key Bindings](#key-bindings)
   - [Search Syntax](#search-syntax)
   - [Exit code](#exit-code)
 - [Customization](#customization)
   - [Keymap to redefine](#keymap)
   - [Sort Criteria](#sort-criteria)
   - [Color Scheme](#color-scheme)
   - [Misc](#misc)
 - [Advance Topics](#advance-topics)
   - [Interactive Mode](#interactive-mode)
   - [Executing external programs](#executing-external-programs)
   - [Preview Window](#preview-window)
   - [Fields Support](#fields-support)
   - [Use as a Library](#use-as-a-library)
 - [FAQ](#faq)
   - [How to ignore files?](#how-to-ignore-files)
   - [Some files are not shown in vim
 plugin](#some-files-are-not-shown-in-vim-plugin)
 - [Differences to fzf](#differences-to-fzf)
 - [How to contribute](#how-to-contribute)
 .
 # Installation
 .
 The skim project contains several components:
 .
 1. `sk` executable -- the core.
 2. `sk-tmux` -- script for launching `sk` in a tmux pane.
 3. Vim/Nvim plugin -- to call `sk` inside Vim/Nvim. check
 [skim.vim](https://github.com/lotabout/skim.vim) for more Vim support.
 .
 ## Package Managers
 .
 | Distribution   | Package Manager   | Command                      |
 | -------------- | ----------------- | ---------------------------- |
 | macOS          | Homebrew          | `brew install sk`            |
 | macOS          | MacPorts          | `sudo port install skim`     |
 | Fedora         | dnf               | `dnf install skim`           |
 | Alpine         | apk               | `apk add skim`               |
 | Arch           | pacman            | `pacman -S skim`             |
 | Gentoo         | Portage           | `emerge --ask app-misc/skim` |
 .
 See [repology](https://repology.org/project/skim/versions) for a comprehensive
 overview of package availability.
 .
 ## Install as Vim plugin
 .
 Via vim-plug (recommended):
 .
 ```vim
 Plug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install' }
 ```
 .
 ## Hard Core
 .
 Any of the following applies:
 .
 - Using Git
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     ~/.skim/install
     ```
 .
 - Using Binary: directly [download the sk
 executable](https://github.com/lotabout/skim/releases).
 - Install from [crates.io](https://crates.io/): `cargo install skim`
 - Build Manually
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     cd ~/.skim
     cargo install
     cargo build --release
     # put the resulting `target/release/sk` executable on your PATH.
     ```
 .
 # Usage
 .
 skim can be used as a general filter (like `grep`) or as an interactive
 interface for invoking commands.
 .
 ## As filter
 .
 Try the following
 .
 ```bash
 # directly invoke skim
 sk
 .
 # or pipe some input to it: (press TAB key select multiple items with -m
 enabled)
 vim $(find . -name "*.rs" | sk -m)
 ```
 .
 The above command will allow you to select files with ".rs" extension and open
 the ones you selected in Vim.
 .
 ## As Interactive Interface
 .
 `skim` can invoke other commands dynamically. Normally you would want to
 integrate it with [grep](https://www.gnu.org/software/grep/),
 [ack](https://github.com/petdance/ack2),
 [ag](https://github.com/ggreer/the_silver_searcher), or
 [rg](https://github.com/BurntSushi/ripgrep) for searching contents in a
 project directory:
 .
 ```sh
 # works with grep
 sk --ansi -i -c 'grep -rI --color=always --line-number "{}" .'
 # works with ack
 sk --ansi -i -c 'ack --color "{}"'
 # works with ag
 sk --ansi -i -c 'ag --color "{}"'
 # works with rg
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 ![interactive mode
 demo](https://cloud.githubusercontent.com/assets/1527040/21603930/655d859a-d1db-11e6-9fec-c25099d30a12.gif)
 .
 ## Key Bindings
 .
 Some commonly used key bindings:
 .
 | Key               | Action                                     |
 |------------------:|--------------------------------------------|
 | Enter             | Accept (select current one and quit)       |
 | ESC/Ctrl-G        | Abort                                      |
 | Ctrl-P/Up         | Move cursor up                             |
 | Ctrl-N/Down       | Move cursor Down                           |
 | TAB               | Toggle selection and move down (with `-m`) |
 | Shift-TAB         | Toggle selection and move up (with `-m`)   |
 .
 For full list of key bindings, check out the [man
 page](https://github.com/lotabout/skim/blob/master/man/man1/sk.1) (`man sk`).
 .
 ## Search Syntax
 .
 `skim` borrowed `fzf`'s syntax for matching items:
 .
 | Token    | Match type                 | Description                       |
 |----------|----------------------------|-----------------------------------|
 | `text`   | fuzzy-match                | items that match `text`           |
 | `^music` | prefix-exact-match         | items that start with `music`     |
 | `.mp3$`  | suffix-exact-match         | items that end with `.mp3`        |
 | `'wild`  | exact-match (quoted)       | items that include `wild`         |
 | `!fire`  | inverse-exact-match        | items that do not include `fire`  |
 | `!.mp3$` | inverse-suffix-exact-match | items that do not end with `.mp3` |
 .
 `skim` also supports the combination of tokens.
 .
 - Whitespace has the meaning of `AND`. With the term `src main`, `skim` will
 search
     for items that match **both** `src` and `main`.
 - ` | ` means `OR` (note the spaces around `|`). With the term `.md$ |
     .markdown$`, `skim` will search for items ends with either `.md` or
     `.markdown`.
 - `OR` has higher precedence. So `readme .md$ | .markdown$` is grouped into
     `readme AND (.md$ OR .markdown$)`.
 .
 In case that you want to use regular expressions, `skim` provides `regex` mode:
 .
 ```sh
 sk --regex
 ```
 .
 You can switch to `regex` mode dynamically by pressing `Ctrl-R` (Rotate Mode).
 .
 ## exit code
 .
 | Exit Code | Meaning                           |
 |-----------|-----------------------------------|
 | 0         | Exit normally                     |
 | 1         | No Match found                    |
 | 130       | Abort by Ctrl-C/Ctrl-G/ESC/etc... |
 .
 # Customization
 .
 The doc here is only a preview, please check the man page (`man sk`) for a full
 list of options.
 .
 ## Keymap
 .
 Specify the bindings with comma separated pairs (no space allowed), example:
 .
 ```sh
 sk --bind 'alt-a:select-all,alt-d:deselect-all'
 ```
 .
 Additionally, use `+` to concatenate actions, such as `execute-silent(echo {} |
 pbcopy)+abort`.
 .
 See the *KEY BINDINGS* section of the man page for details.
 .
 ## Sort Criteria
 .
 There are five sort keys for results: `score, index, begin, end, length`, you
 can
 specify how the records are sorted by `sk --tiebreak score,index,-begin` or any
 other order you want.
 .
 ## Color Scheme
 .
 It is a high chance that you are a better artist than me. Luckily you won't
 be stuck with the default colors, `skim` supports customization of the color
 scheme.
 .
 ```sh
 --color=[BASE_SCHEME][,COLOR:ANSI]
 ```
 .
 The configuration of colors starts with the name of the base color scheme,
 followed by custom color mappings. For example:
 .
 ```sh
 sk --color=current_bg:24
 sk --color=light,fg:232,bg:255,current_bg:116,info:27
 ```
 .
 See `--color` option in the man page for details.
 .
 ## Misc
 .
 - `--ansi`: to parse ANSI color codes (e.g., `\e[32mABC`) of the data source
 - `--regex`: use the query as regular expression to match the data source
 .
 # Advanced Topics
 .
 ## Interactive mode
 .
 With "interactive mode", you could invoke command dynamically. Try out:
 .
 ```sh
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 How it works?
 .
 ![skim's interactive
 mode](https://user-images.githubusercontent.com/1527040/53381293-461ce380-39ab-11e9-8e86-7c3bbfd557bc.png)
 .
 - Skim could accept two kinds of source: command output or piped input
 - Skim has two kinds of prompts: A query prompt to specify the query pattern
 and a
     command prompt to specify the "arguments" of the command
 - `-c` is used to specify the command to execute while defaults to
 `SKIM_DEFAULT_COMMAND`
 - `-i` is to tell skim open command prompt on startup, which will show `c>` by
 default.
 .
 If you want to further narrow down the results returned by the command, press
 `Ctrl-Q` to toggle interactive mode.
 .
 ## Executing external programs
 .
 You can set up key bindings for starting external processes without leaving
 skim (`execute`, `execute-silent`).
 .
 ```sh
 # Press F1 to open the file with less without leaving skim
 # Press CTRL-Y to copy the line to clipboard and aborts skim (requires pbcopy)
 sk --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} |
 pbcopy)+abort'
 ```
 .
 ## Preview Window
 .
 This is a great feature of fzf that skim borrows. For example, we use 'ag' to
 find the matched lines, once we narrow down to the target lines, we want to
 finally decide which lines to pick by checking the context around the line.
 `grep` and `ag` has an option `--context`, skim can do better with preview
 window. For example:
 .
 ```sh
 sk --ansi -i -c 'ag --color "{}"' --preview "preview.sh {}"
 ```
 .
 (Note the
 [preview.sh](https://github.com/junegunn/fzf.vim/blob/master/bin/preview.sh) is
 a script to print the context given filename:lines:columns)
 You got things like this:
 .
 ![preview
 demo](https://user-images.githubusercontent.com/1527040/30677573-0cee622e-9ebf-11e7-8316-c741324ecb3a.png)
 .
 ### How does it work?
 .
 If the preview command is given by the `--preview` option, skim will replace
 the
 `{}` with the current highlighted line surrounded by single quotes, call the
 command to get the output, and print the output on the preview window.
 .
 Sometimes you don't need the whole line for invoking the command. In this case
 you can use `{}`, `{1..}`, `{..3}` or `{1..5}` to select the fields. The
 syntax is explained in the section "Fields Support".
 .
 Last, you might want to configure the position of preview windows, use
 `--preview-window`.
 .
 - `--preview-window up:30%` to put the window in the up position with height
     30% of the total height of skim.
 - `--preview-window left:10:wrap`, to specify the `wrap` allows the preview
     window to wrap the output of the preview command.
 - `--preview-window wrap:hidden` to hide the preview window at startup, later
     it can be shown by the action `toggle-preview`.
 .
 ## Fields support
 .
 Normally only plugin users need to understand this.
 .
 For example, you have the data source with the format:
 .
 ```sh
 <filename>:<line number>:<column number>
 ```
 .
 However, you want to search `<filename>` only when typing in queries. That
 means when you type `21`, you want to find a `<filename>` that contains `21`,
 but not matching line number or column number.
 .
 You can use `sk --delimiter ':' --nth 1` to achieve this.
 .
 Also you can use `--with-nth` to re-arrange the order of fields.
 .
 **Range Syntax**
 .
 - `<num>` -- to specify the `num`-th fields, starting with 1.
 - `start..` -- starting from the `start`-th fields, and the rest.
 - `..end` -- starting from the `0`-th field, all the way to `end`-th field,
     including `end`.
 - `start..end` -- starting from `start`-th field, all the way to `end`-th
     field, including `end`.
 .
 ## Use as a library
 .
 Skim can be used as a library in your Rust crates.
 .
 First, add skim into your `Cargo.toml`:
 .
 ```toml
 [dependencies]
 skim = "*"
 ```
 .
 Then try to run this simple example:
 .
 ```rust
 extern crate skim;
 use skim::prelude::*;
 use std::io::Cursor;
 .
 pub fn main() {
     let options = SkimOptionsBuilder::default()
         .height(Some("50%"))
         .multi(true)
         .build()
         .unwrap();
 .
     let input = "aaaaa\nbbbb\nccc".to_string();
 .
     // `SkimItemReader` is a helper to turn any `BufRead` into a stream of
 `SkimItem`
     // `SkimItem` was implemented for `AsRef<str>` by default
     let item_reader = SkimItemReader::default();
     let items = item_reader.of_bufread(Cursor::new(input));
 .
     // `run_with` would read and show items from the stream
     let selected_items = Skim::run_with(&options, Some(items))
         .map(|out| out.selected_items)
         .unwrap_or_else(|| Vec::new());
 .
     for item in selected_items.iter() {
         print!("{}{}", item.output(), "\n");
     }
 }
 ```
 .
 Given an `Option<SkimItemReceiver>`, skim will read items accordingly, do its
 job and bring us back the user selection including the selected items, the
 query, etc. Note that:
 .
 - `SkimItemReceiver` is `crossbeam::channel::Receiver<Arc<dyn SkimItem>>`
 - If it is none, it will invoke the given command and read items from command
 output
 - Otherwise, it will read the items from the (crossbeam) channel.
 .
 Trait `SkimItem` is provided to customize how a line could be displayed,
 compared and previewed. It is implemented by default for `AsRef<str>`
 .
 Plus, `SkimItemReader` is a helper to convert a `BufRead` into
 `SkimItemReceiver` (we can easily turn a `File` for `String` into `BufRead`).
 So that you could deal with strings or files easily.
 .
 Check more examples under
 [examples/](https://github.com/lotabout/skim/tree/master/examples) directory.
 .
 # FAQ
 .
 ## How to ignore files?
 .
 Skim invokes `find .` to fetch a list of files for filtering. You can override
 that by setting the environment variable `SKIM_DEFAULT_COMMAND`. For example:
 .
 ```sh
 SKIM_DEFAULT_COMMAND="fd --type f || git ls-tree -r --name-only HEAD || rg
 --files || find ."
 sk
 ```
 .
 You could put it in your `.bashrc` or `.zshrc` if you like it to be default.
 .
 ## Some files are not shown in Vim plugin
 .
 If you use the Vim plugin and execute the `:SK` command, you might find some
 of your files not shown.
 .
 As described in [#3](https://github.com/lotabout/skim/issues/3), in the Vim
 plugin, `SKIM_DEFAULT_COMMAND` is set to the command by default:
 .
 ```vim
 let $SKIM_DEFAULT_COMMAND = "git ls-tree -r --name-only HEAD || rg --files ||
 ag -l -g \"\" || find ."
 ```
 .
 That means, the files not recognized by git will not shown. Either override the
 default with `let $SKIM_DEFAULT_COMMAND = ''` or find the missing file by
 yourself.
 .
 # Differences to fzf
 .
 [fzf](https://github.com/junegunn/fzf) is a command-line fuzzy finder written
 in Go and [skim](https://github.com/lotabout/skim) tries to implement a new one
 in Rust!
 .
 This project is written from scratch. Some decisions of implementation are
 different from fzf. For example:
 .
 1. `skim` is a binary as well as a library while fzf is only a binary.
 2. `skim` has an interactive mode.
 3. `skim` supports pre-selection
 4. The fuzzy search algorithm is different.
 5. ~~UI of showing matched items. `fzf` will show only the range matched while
    `skim` will show each character matched.~~ (fzf has this now)
 6. ~~`skim`'s range syntax is Git style~~: now it is the same with fzf.
 .
 # How to contribute
 .
 [Create new issues](https://github.com/lotabout/skim/issues/new) if you meet
 any bugs
 or have any ideas. Pull requests are warmly welcomed.
 .
 # Troubleshooting
 .
 ## No line feed issues with nix , FreeBSD, termux
 .
 If you encounter display issues like:
 .
 ```bash
 $ for n in {1..10}; do echo "$n"; done | sk
   0/10 0/0.> 10/10  10  9  8  7  6  5  4  3  2> 1
 ```
 .
 For example
 .
 - <https://github.com/lotabout/skim/issues/412>
 - <https://github.com/lotabout/skim/issues/455>
 .
 You need to set TERMINFO or TERMINFO_DIRS to the path to a correct terminfo
 database path
 .
 For example, with termux, you can add in your bashr:
 .
 ```
 export TERMINFO=/data/data/com.termux/files/usr/share/terminfo
 ```
Vcs-Browser: https://github.com/kimono-koans/two_percent
Vcs-Git: https://github.com/kimono-koans/two_percent

Package: two-percent
Version: 0.11.17-1
Architecture: amd64
Maintainer: Zhang Jinzhou <lotabout@gmail.com>
Installed-Size: 5154
Depends: libc6 (>= 2.29)
Filename: ./two-percent_0.11.17-1_amd64.deb
Size: 1454808
MD5sum: 956b6aa6c3f5cbe28b2b8a91e28012a5
SHA1: 0bb2c1af96c9796b8e797575e724bfafb6c3b831
SHA256: 37328a15db2175c1797dec0c1051c4da318b35b62dbb400e37eb772dc33894e2
Priority: optional
Homepage: https://github.com/kimono-koans/two_percent
Description: Fuzzy Finder in rust!
 <p align="center">
   <a href="https://crates.io/crates/skim">
     <img src="https://img.shields.io/crates/v/skim.svg" alt="Crates.io" />
   </a>
   <a
 href="https://github.com/lotabout/skim/actions?query=workflow%3A%22Build+%26+Test%22">
     <img
 src="https://github.com/lotabout/skim/workflows/Build%20&%20Test/badge.svg"
 alt="Build & Test" />
   </a>
   <a href="https://repology.org/project/skim/versions">
     <img src="https://repology.org/badge/tiny-repos/skim.svg" alt="Packaging
 status" />
   </a>
   <a href="https://discord.gg/23PuxttufP">
     <img alt="Skim Discord"
 src="https://img.shields.io/discord/1031830957432504361?label=&color=7389d8&labelColor=6a7ec2&logoColor=ffffff&logo=discord"
 />
   </a>
 </p>
 .
 *Note: `two_percent` is a fork of
 [skim](https://github.com/lotabout/skim/tree/291fc34c58b1670a5e8c95f1e8f930b82c030b19)
 for use with [httm](https://github.com/kimono-koans/httm).*
 .
 > Life is short, skim!
 .
 Half of our life is spent on navigation: files, lines, commands… You need
 skim!
 It is a general fuzzy finder that saves you time.
 .
 [![skim
 demo](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm.svg)](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm)
 .
 skim provides a single executable: `sk`. Basically anywhere you would want to
 use
 `grep`, try `sk` instead.
 .
 # Table of contents
 .
 - [Installation](#installation)
 - [Usage](#usage)
   - [As Filter](#as-filter)
   - [As Interactive Interface](#as-interactive-interface)
   - [Key Bindings](#key-bindings)
   - [Search Syntax](#search-syntax)
   - [Exit code](#exit-code)
 - [Customization](#customization)
   - [Keymap to redefine](#keymap)
   - [Sort Criteria](#sort-criteria)
   - [Color Scheme](#color-scheme)
   - [Misc](#misc)
 - [Advance Topics](#advance-topics)
   - [Interactive Mode](#interactive-mode)
   - [Executing external programs](#executing-external-programs)
   - [Preview Window](#preview-window)
   - [Fields Support](#fields-support)
   - [Use as a Library](#use-as-a-library)
 - [FAQ](#faq)
   - [How to ignore files?](#how-to-ignore-files)
   - [Some files are not shown in vim
 plugin](#some-files-are-not-shown-in-vim-plugin)
 - [Differences to fzf](#differences-to-fzf)
 - [How to contribute](#how-to-contribute)
 .
 # Installation
 .
 The skim project contains several components:
 .
 1. `sk` executable -- the core.
 2. `sk-tmux` -- script for launching `sk` in a tmux pane.
 3. Vim/Nvim plugin -- to call `sk` inside Vim/Nvim. check
 [skim.vim](https://github.com/lotabout/skim.vim) for more Vim support.
 .
 ## Package Managers
 .
 | Distribution   | Package Manager   | Command                      |
 | -------------- | ----------------- | ---------------------------- |
 | macOS          | Homebrew          | `brew install sk`            |
 | macOS          | MacPorts          | `sudo port install skim`     |
 | Fedora         | dnf               | `dnf install skim`           |
 | Alpine         | apk               | `apk add skim`               |
 | Arch           | pacman            | `pacman -S skim`             |
 | Gentoo         | Portage           | `emerge --ask app-misc/skim` |
 .
 See [repology](https://repology.org/project/skim/versions) for a comprehensive
 overview of package availability.
 .
 ## Install as Vim plugin
 .
 Via vim-plug (recommended):
 .
 ```vim
 Plug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install' }
 ```
 .
 ## Hard Core
 .
 Any of the following applies:
 .
 - Using Git
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     ~/.skim/install
     ```
 .
 - Using Binary: directly [download the sk
 executable](https://github.com/lotabout/skim/releases).
 - Install from [crates.io](https://crates.io/): `cargo install skim`
 - Build Manually
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     cd ~/.skim
     cargo install
     cargo build --release
     # put the resulting `target/release/sk` executable on your PATH.
     ```
 .
 # Usage
 .
 skim can be used as a general filter (like `grep`) or as an interactive
 interface for invoking commands.
 .
 ## As filter
 .
 Try the following
 .
 ```bash
 # directly invoke skim
 sk
 .
 # or pipe some input to it: (press TAB key select multiple items with -m
 enabled)
 vim $(find . -name "*.rs" | sk -m)
 ```
 .
 The above command will allow you to select files with ".rs" extension and open
 the ones you selected in Vim.
 .
 ## As Interactive Interface
 .
 `skim` can invoke other commands dynamically. Normally you would want to
 integrate it with [grep](https://www.gnu.org/software/grep/),
 [ack](https://github.com/petdance/ack2),
 [ag](https://github.com/ggreer/the_silver_searcher), or
 [rg](https://github.com/BurntSushi/ripgrep) for searching contents in a
 project directory:
 .
 ```sh
 # works with grep
 sk --ansi -i -c 'grep -rI --color=always --line-number "{}" .'
 # works with ack
 sk --ansi -i -c 'ack --color "{}"'
 # works with ag
 sk --ansi -i -c 'ag --color "{}"'
 # works with rg
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 ![interactive mode
 demo](https://cloud.githubusercontent.com/assets/1527040/21603930/655d859a-d1db-11e6-9fec-c25099d30a12.gif)
 .
 ## Key Bindings
 .
 Some commonly used key bindings:
 .
 | Key               | Action                                     |
 |------------------:|--------------------------------------------|
 | Enter             | Accept (select current one and quit)       |
 | ESC/Ctrl-G        | Abort                                      |
 | Ctrl-P/Up         | Move cursor up                             |
 | Ctrl-N/Down       | Move cursor Down                           |
 | TAB               | Toggle selection and move down (with `-m`) |
 | Shift-TAB         | Toggle selection and move up (with `-m`)   |
 .
 For full list of key bindings, check out the [man
 page](https://github.com/lotabout/skim/blob/master/man/man1/sk.1) (`man sk`).
 .
 ## Search Syntax
 .
 `skim` borrowed `fzf`'s syntax for matching items:
 .
 | Token    | Match type                 | Description                       |
 |----------|----------------------------|-----------------------------------|
 | `text`   | fuzzy-match                | items that match `text`           |
 | `^music` | prefix-exact-match         | items that start with `music`     |
 | `.mp3$`  | suffix-exact-match         | items that end with `.mp3`        |
 | `'wild`  | exact-match (quoted)       | items that include `wild`         |
 | `!fire`  | inverse-exact-match        | items that do not include `fire`  |
 | `!.mp3$` | inverse-suffix-exact-match | items that do not end with `.mp3` |
 .
 `skim` also supports the combination of tokens.
 .
 - Whitespace has the meaning of `AND`. With the term `src main`, `skim` will
 search
     for items that match **both** `src` and `main`.
 - ` | ` means `OR` (note the spaces around `|`). With the term `.md$ |
     .markdown$`, `skim` will search for items ends with either `.md` or
     `.markdown`.
 - `OR` has higher precedence. So `readme .md$ | .markdown$` is grouped into
     `readme AND (.md$ OR .markdown$)`.
 .
 In case that you want to use regular expressions, `skim` provides `regex` mode:
 .
 ```sh
 sk --regex
 ```
 .
 You can switch to `regex` mode dynamically by pressing `Ctrl-R` (Rotate Mode).
 .
 ## exit code
 .
 | Exit Code | Meaning                           |
 |-----------|-----------------------------------|
 | 0         | Exit normally                     |
 | 1         | No Match found                    |
 | 130       | Abort by Ctrl-C/Ctrl-G/ESC/etc... |
 .
 # Customization
 .
 The doc here is only a preview, please check the man page (`man sk`) for a full
 list of options.
 .
 ## Keymap
 .
 Specify the bindings with comma separated pairs (no space allowed), example:
 .
 ```sh
 sk --bind 'alt-a:select-all,alt-d:deselect-all'
 ```
 .
 Additionally, use `+` to concatenate actions, such as `execute-silent(echo {} |
 pbcopy)+abort`.
 .
 See the *KEY BINDINGS* section of the man page for details.
 .
 ## Sort Criteria
 .
 There are five sort keys for results: `score, index, begin, end, length`, you
 can
 specify how the records are sorted by `sk --tiebreak score,index,-begin` or any
 other order you want.
 .
 ## Color Scheme
 .
 It is a high chance that you are a better artist than me. Luckily you won't
 be stuck with the default colors, `skim` supports customization of the color
 scheme.
 .
 ```sh
 --color=[BASE_SCHEME][,COLOR:ANSI]
 ```
 .
 The configuration of colors starts with the name of the base color scheme,
 followed by custom color mappings. For example:
 .
 ```sh
 sk --color=current_bg:24
 sk --color=light,fg:232,bg:255,current_bg:116,info:27
 ```
 .
 See `--color` option in the man page for details.
 .
 ## Misc
 .
 - `--ansi`: to parse ANSI color codes (e.g., `\e[32mABC`) of the data source
 - `--regex`: use the query as regular expression to match the data source
 .
 # Advanced Topics
 .
 ## Interactive mode
 .
 With "interactive mode", you could invoke command dynamically. Try out:
 .
 ```sh
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 How it works?
 .
 ![skim's interactive
 mode](https://user-images.githubusercontent.com/1527040/53381293-461ce380-39ab-11e9-8e86-7c3bbfd557bc.png)
 .
 - Skim could accept two kinds of source: command output or piped input
 - Skim has two kinds of prompts: A query prompt to specify the query pattern
 and a
     command prompt to specify the "arguments" of the command
 - `-c` is used to specify the command to execute while defaults to
 `SKIM_DEFAULT_COMMAND`
 - `-i` is to tell skim open command prompt on startup, which will show `c>` by
 default.
 .
 If you want to further narrow down the results returned by the command, press
 `Ctrl-Q` to toggle interactive mode.
 .
 ## Executing external programs
 .
 You can set up key bindings for starting external processes without leaving
 skim (`execute`, `execute-silent`).
 .
 ```sh
 # Press F1 to open the file with less without leaving skim
 # Press CTRL-Y to copy the line to clipboard and aborts skim (requires pbcopy)
 sk --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} |
 pbcopy)+abort'
 ```
 .
 ## Preview Window
 .
 This is a great feature of fzf that skim borrows. For example, we use 'ag' to
 find the matched lines, once we narrow down to the target lines, we want to
 finally decide which lines to pick by checking the context around the line.
 `grep` and `ag` has an option `--context`, skim can do better with preview
 window. For example:
 .
 ```sh
 sk --ansi -i -c 'ag --color "{}"' --preview "preview.sh {}"
 ```
 .
 (Note the
 [preview.sh](https://github.com/junegunn/fzf.vim/blob/master/bin/preview.sh) is
 a script to print the context given filename:lines:columns)
 You got things like this:
 .
 ![preview
 demo](https://user-images.githubusercontent.com/1527040/30677573-0cee622e-9ebf-11e7-8316-c741324ecb3a.png)
 .
 ### How does it work?
 .
 If the preview command is given by the `--preview` option, skim will replace
 the
 `{}` with the current highlighted line surrounded by single quotes, call the
 command to get the output, and print the output on the preview window.
 .
 Sometimes you don't need the whole line for invoking the command. In this case
 you can use `{}`, `{1..}`, `{..3}` or `{1..5}` to select the fields. The
 syntax is explained in the section "Fields Support".
 .
 Last, you might want to configure the position of preview windows, use
 `--preview-window`.
 .
 - `--preview-window up:30%` to put the window in the up position with height
     30% of the total height of skim.
 - `--preview-window left:10:wrap`, to specify the `wrap` allows the preview
     window to wrap the output of the preview command.
 - `--preview-window wrap:hidden` to hide the preview window at startup, later
     it can be shown by the action `toggle-preview`.
 .
 ## Fields support
 .
 Normally only plugin users need to understand this.
 .
 For example, you have the data source with the format:
 .
 ```sh
 <filename>:<line number>:<column number>
 ```
 .
 However, you want to search `<filename>` only when typing in queries. That
 means when you type `21`, you want to find a `<filename>` that contains `21`,
 but not matching line number or column number.
 .
 You can use `sk --delimiter ':' --nth 1` to achieve this.
 .
 Also you can use `--with-nth` to re-arrange the order of fields.
 .
 **Range Syntax**
 .
 - `<num>` -- to specify the `num`-th fields, starting with 1.
 - `start..` -- starting from the `start`-th fields, and the rest.
 - `..end` -- starting from the `0`-th field, all the way to `end`-th field,
     including `end`.
 - `start..end` -- starting from `start`-th field, all the way to `end`-th
     field, including `end`.
 .
 ## Use as a library
 .
 Skim can be used as a library in your Rust crates.
 .
 First, add skim into your `Cargo.toml`:
 .
 ```toml
 [dependencies]
 skim = "*"
 ```
 .
 Then try to run this simple example:
 .
 ```rust
 extern crate skim;
 use skim::prelude::*;
 use std::io::Cursor;
 .
 pub fn main() {
     let options = SkimOptionsBuilder::default()
         .height(Some("50%"))
         .multi(true)
         .build()
         .unwrap();
 .
     let input = "aaaaa\nbbbb\nccc".to_string();
 .
     // `SkimItemReader` is a helper to turn any `BufRead` into a stream of
 `SkimItem`
     // `SkimItem` was implemented for `AsRef<str>` by default
     let item_reader = SkimItemReader::default();
     let items = item_reader.of_bufread(Cursor::new(input));
 .
     // `run_with` would read and show items from the stream
     let selected_items = Skim::run_with(&options, Some(items))
         .map(|out| out.selected_items)
         .unwrap_or_else(|| Vec::new());
 .
     for item in selected_items.iter() {
         print!("{}{}", item.output(), "\n");
     }
 }
 ```
 .
 Given an `Option<SkimItemReceiver>`, skim will read items accordingly, do its
 job and bring us back the user selection including the selected items, the
 query, etc. Note that:
 .
 - `SkimItemReceiver` is `crossbeam::channel::Receiver<Arc<dyn SkimItem>>`
 - If it is none, it will invoke the given command and read items from command
 output
 - Otherwise, it will read the items from the (crossbeam) channel.
 .
 Trait `SkimItem` is provided to customize how a line could be displayed,
 compared and previewed. It is implemented by default for `AsRef<str>`
 .
 Plus, `SkimItemReader` is a helper to convert a `BufRead` into
 `SkimItemReceiver` (we can easily turn a `File` for `String` into `BufRead`).
 So that you could deal with strings or files easily.
 .
 Check more examples under
 [examples/](https://github.com/lotabout/skim/tree/master/examples) directory.
 .
 # FAQ
 .
 ## How to ignore files?
 .
 Skim invokes `find .` to fetch a list of files for filtering. You can override
 that by setting the environment variable `SKIM_DEFAULT_COMMAND`. For example:
 .
 ```sh
 SKIM_DEFAULT_COMMAND="fd --type f || git ls-tree -r --name-only HEAD || rg
 --files || find ."
 sk
 ```
 .
 You could put it in your `.bashrc` or `.zshrc` if you like it to be default.
 .
 ## Some files are not shown in Vim plugin
 .
 If you use the Vim plugin and execute the `:SK` command, you might find some
 of your files not shown.
 .
 As described in [#3](https://github.com/lotabout/skim/issues/3), in the Vim
 plugin, `SKIM_DEFAULT_COMMAND` is set to the command by default:
 .
 ```vim
 let $SKIM_DEFAULT_COMMAND = "git ls-tree -r --name-only HEAD || rg --files ||
 ag -l -g \"\" || find ."
 ```
 .
 That means, the files not recognized by git will not shown. Either override the
 default with `let $SKIM_DEFAULT_COMMAND = ''` or find the missing file by
 yourself.
 .
 # Differences to fzf
 .
 [fzf](https://github.com/junegunn/fzf) is a command-line fuzzy finder written
 in Go and [skim](https://github.com/lotabout/skim) tries to implement a new one
 in Rust!
 .
 This project is written from scratch. Some decisions of implementation are
 different from fzf. For example:
 .
 1. `skim` is a binary as well as a library while fzf is only a binary.
 2. `skim` has an interactive mode.
 3. `skim` supports pre-selection
 4. The fuzzy search algorithm is different.
 5. ~~UI of showing matched items. `fzf` will show only the range matched while
    `skim` will show each character matched.~~ (fzf has this now)
 6. ~~`skim`'s range syntax is Git style~~: now it is the same with fzf.
 .
 # How to contribute
 .
 [Create new issues](https://github.com/lotabout/skim/issues/new) if you meet
 any bugs
 or have any ideas. Pull requests are warmly welcomed.
 .
 # Troubleshooting
 .
 ## No line feed issues with nix , FreeBSD, termux
 .
 If you encounter display issues like:
 .
 ```bash
 $ for n in {1..10}; do echo "$n"; done | sk
   0/10 0/0.> 10/10  10  9  8  7  6  5  4  3  2> 1
 ```
 .
 For example
 .
 - <https://github.com/lotabout/skim/issues/412>
 - <https://github.com/lotabout/skim/issues/455>
 .
 You need to set TERMINFO or TERMINFO_DIRS to the path to a correct terminfo
 database path
 .
 For example, with termux, you can add in your bashr:
 .
 ```
 export TERMINFO=/data/data/com.termux/files/usr/share/terminfo
 ```
Vcs-Browser: https://github.com/kimono-koans/two_percent
Vcs-Git: https://github.com/kimono-koans/two_percent

Package: two-percent
Version: 0.11.18-1
Architecture: amd64
Maintainer: Zhang Jinzhou <lotabout@gmail.com>
Installed-Size: 5133
Depends: libc6 (>= 2.29)
Filename: ./two-percent_0.11.18-1_amd64.deb
Size: 1447756
MD5sum: 4e372ff9b7546fb8b55cd644ccf8f66c
SHA1: 9fc615382070dfffce6e1bb6bab411b5f50eb282
SHA256: b427a5765e4952d8de6ebac7dd5932928b13545a4b2d939990256bcbfc577629
Priority: optional
Homepage: https://github.com/kimono-koans/two_percent
Description: Fuzzy Finder in rust!
 <p align="center">
   <a href="https://crates.io/crates/skim">
     <img src="https://img.shields.io/crates/v/skim.svg" alt="Crates.io" />
   </a>
   <a
 href="https://github.com/lotabout/skim/actions?query=workflow%3A%22Build+%26+Test%22">
     <img
 src="https://github.com/lotabout/skim/workflows/Build%20&%20Test/badge.svg"
 alt="Build & Test" />
   </a>
   <a href="https://repology.org/project/skim/versions">
     <img src="https://repology.org/badge/tiny-repos/skim.svg" alt="Packaging
 status" />
   </a>
   <a href="https://discord.gg/23PuxttufP">
     <img alt="Skim Discord"
 src="https://img.shields.io/discord/1031830957432504361?label=&color=7389d8&labelColor=6a7ec2&logoColor=ffffff&logo=discord"
 />
   </a>
 </p>
 .
 *Note: `two_percent` is a fork of
 [skim](https://github.com/lotabout/skim/tree/291fc34c58b1670a5e8c95f1e8f930b82c030b19)
 for use with [httm](https://github.com/kimono-koans/httm).*
 .
 > Life is short, skim!
 .
 Half of our life is spent on navigation: files, lines, commands… You need
 skim!
 It is a general fuzzy finder that saves you time.
 .
 [![skim
 demo](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm.svg)](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm)
 .
 skim provides a single executable: `sk`. Basically anywhere you would want to
 use
 `grep`, try `sk` instead.
 .
 # Table of contents
 .
 - [Installation](#installation)
 - [Usage](#usage)
   - [As Filter](#as-filter)
   - [As Interactive Interface](#as-interactive-interface)
   - [Key Bindings](#key-bindings)
   - [Search Syntax](#search-syntax)
   - [Exit code](#exit-code)
 - [Customization](#customization)
   - [Keymap to redefine](#keymap)
   - [Sort Criteria](#sort-criteria)
   - [Color Scheme](#color-scheme)
   - [Misc](#misc)
 - [Advance Topics](#advance-topics)
   - [Interactive Mode](#interactive-mode)
   - [Executing external programs](#executing-external-programs)
   - [Preview Window](#preview-window)
   - [Fields Support](#fields-support)
   - [Use as a Library](#use-as-a-library)
 - [FAQ](#faq)
   - [How to ignore files?](#how-to-ignore-files)
   - [Some files are not shown in vim
 plugin](#some-files-are-not-shown-in-vim-plugin)
 - [Differences to fzf](#differences-to-fzf)
 - [How to contribute](#how-to-contribute)
 .
 # Installation
 .
 The skim project contains several components:
 .
 1. `sk` executable -- the core.
 2. `sk-tmux` -- script for launching `sk` in a tmux pane.
 3. Vim/Nvim plugin -- to call `sk` inside Vim/Nvim. check
 [skim.vim](https://github.com/lotabout/skim.vim) for more Vim support.
 .
 ## Package Managers
 .
 | Distribution   | Package Manager   | Command                      |
 | -------------- | ----------------- | ---------------------------- |
 | macOS          | Homebrew          | `brew install sk`            |
 | macOS          | MacPorts          | `sudo port install skim`     |
 | Fedora         | dnf               | `dnf install skim`           |
 | Alpine         | apk               | `apk add skim`               |
 | Arch           | pacman            | `pacman -S skim`             |
 | Gentoo         | Portage           | `emerge --ask app-misc/skim` |
 .
 See [repology](https://repology.org/project/skim/versions) for a comprehensive
 overview of package availability.
 .
 ## Install as Vim plugin
 .
 Via vim-plug (recommended):
 .
 ```vim
 Plug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install' }
 ```
 .
 ## Hard Core
 .
 Any of the following applies:
 .
 - Using Git
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     ~/.skim/install
     ```
 .
 - Using Binary: directly [download the sk
 executable](https://github.com/lotabout/skim/releases).
 - Install from [crates.io](https://crates.io/): `cargo install skim`
 - Build Manually
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     cd ~/.skim
     cargo install
     cargo build --release
     # put the resulting `target/release/sk` executable on your PATH.
     ```
 .
 # Usage
 .
 skim can be used as a general filter (like `grep`) or as an interactive
 interface for invoking commands.
 .
 ## As filter
 .
 Try the following
 .
 ```bash
 # directly invoke skim
 sk
 .
 # or pipe some input to it: (press TAB key select multiple items with -m
 enabled)
 vim $(find . -name "*.rs" | sk -m)
 ```
 .
 The above command will allow you to select files with ".rs" extension and open
 the ones you selected in Vim.
 .
 ## As Interactive Interface
 .
 `skim` can invoke other commands dynamically. Normally you would want to
 integrate it with [grep](https://www.gnu.org/software/grep/),
 [ack](https://github.com/petdance/ack2),
 [ag](https://github.com/ggreer/the_silver_searcher), or
 [rg](https://github.com/BurntSushi/ripgrep) for searching contents in a
 project directory:
 .
 ```sh
 # works with grep
 sk --ansi -i -c 'grep -rI --color=always --line-number "{}" .'
 # works with ack
 sk --ansi -i -c 'ack --color "{}"'
 # works with ag
 sk --ansi -i -c 'ag --color "{}"'
 # works with rg
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 ![interactive mode
 demo](https://cloud.githubusercontent.com/assets/1527040/21603930/655d859a-d1db-11e6-9fec-c25099d30a12.gif)
 .
 ## Key Bindings
 .
 Some commonly used key bindings:
 .
 | Key               | Action                                     |
 |------------------:|--------------------------------------------|
 | Enter             | Accept (select current one and quit)       |
 | ESC/Ctrl-G        | Abort                                      |
 | Ctrl-P/Up         | Move cursor up                             |
 | Ctrl-N/Down       | Move cursor Down                           |
 | TAB               | Toggle selection and move down (with `-m`) |
 | Shift-TAB         | Toggle selection and move up (with `-m`)   |
 .
 For full list of key bindings, check out the [man
 page](https://github.com/lotabout/skim/blob/master/man/man1/sk.1) (`man sk`).
 .
 ## Search Syntax
 .
 `skim` borrowed `fzf`'s syntax for matching items:
 .
 | Token    | Match type                 | Description                       |
 |----------|----------------------------|-----------------------------------|
 | `text`   | fuzzy-match                | items that match `text`           |
 | `^music` | prefix-exact-match         | items that start with `music`     |
 | `.mp3$`  | suffix-exact-match         | items that end with `.mp3`        |
 | `'wild`  | exact-match (quoted)       | items that include `wild`         |
 | `!fire`  | inverse-exact-match        | items that do not include `fire`  |
 | `!.mp3$` | inverse-suffix-exact-match | items that do not end with `.mp3` |
 .
 `skim` also supports the combination of tokens.
 .
 - Whitespace has the meaning of `AND`. With the term `src main`, `skim` will
 search
     for items that match **both** `src` and `main`.
 - ` | ` means `OR` (note the spaces around `|`). With the term `.md$ |
     .markdown$`, `skim` will search for items ends with either `.md` or
     `.markdown`.
 - `OR` has higher precedence. So `readme .md$ | .markdown$` is grouped into
     `readme AND (.md$ OR .markdown$)`.
 .
 In case that you want to use regular expressions, `skim` provides `regex` mode:
 .
 ```sh
 sk --regex
 ```
 .
 You can switch to `regex` mode dynamically by pressing `Ctrl-R` (Rotate Mode).
 .
 ## exit code
 .
 | Exit Code | Meaning                           |
 |-----------|-----------------------------------|
 | 0         | Exit normally                     |
 | 1         | No Match found                    |
 | 130       | Abort by Ctrl-C/Ctrl-G/ESC/etc... |
 .
 # Customization
 .
 The doc here is only a preview, please check the man page (`man sk`) for a full
 list of options.
 .
 ## Keymap
 .
 Specify the bindings with comma separated pairs (no space allowed), example:
 .
 ```sh
 sk --bind 'alt-a:select-all,alt-d:deselect-all'
 ```
 .
 Additionally, use `+` to concatenate actions, such as `execute-silent(echo {} |
 pbcopy)+abort`.
 .
 See the *KEY BINDINGS* section of the man page for details.
 .
 ## Sort Criteria
 .
 There are five sort keys for results: `score, index, begin, end, length`, you
 can
 specify how the records are sorted by `sk --tiebreak score,index,-begin` or any
 other order you want.
 .
 ## Color Scheme
 .
 It is a high chance that you are a better artist than me. Luckily you won't
 be stuck with the default colors, `skim` supports customization of the color
 scheme.
 .
 ```sh
 --color=[BASE_SCHEME][,COLOR:ANSI]
 ```
 .
 The configuration of colors starts with the name of the base color scheme,
 followed by custom color mappings. For example:
 .
 ```sh
 sk --color=current_bg:24
 sk --color=light,fg:232,bg:255,current_bg:116,info:27
 ```
 .
 See `--color` option in the man page for details.
 .
 ## Misc
 .
 - `--ansi`: to parse ANSI color codes (e.g., `\e[32mABC`) of the data source
 - `--regex`: use the query as regular expression to match the data source
 .
 # Advanced Topics
 .
 ## Interactive mode
 .
 With "interactive mode", you could invoke command dynamically. Try out:
 .
 ```sh
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 How it works?
 .
 ![skim's interactive
 mode](https://user-images.githubusercontent.com/1527040/53381293-461ce380-39ab-11e9-8e86-7c3bbfd557bc.png)
 .
 - Skim could accept two kinds of source: command output or piped input
 - Skim has two kinds of prompts: A query prompt to specify the query pattern
 and a
     command prompt to specify the "arguments" of the command
 - `-c` is used to specify the command to execute while defaults to
 `SKIM_DEFAULT_COMMAND`
 - `-i` is to tell skim open command prompt on startup, which will show `c>` by
 default.
 .
 If you want to further narrow down the results returned by the command, press
 `Ctrl-Q` to toggle interactive mode.
 .
 ## Executing external programs
 .
 You can set up key bindings for starting external processes without leaving
 skim (`execute`, `execute-silent`).
 .
 ```sh
 # Press F1 to open the file with less without leaving skim
 # Press CTRL-Y to copy the line to clipboard and aborts skim (requires pbcopy)
 sk --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} |
 pbcopy)+abort'
 ```
 .
 ## Preview Window
 .
 This is a great feature of fzf that skim borrows. For example, we use 'ag' to
 find the matched lines, once we narrow down to the target lines, we want to
 finally decide which lines to pick by checking the context around the line.
 `grep` and `ag` has an option `--context`, skim can do better with preview
 window. For example:
 .
 ```sh
 sk --ansi -i -c 'ag --color "{}"' --preview "preview.sh {}"
 ```
 .
 (Note the
 [preview.sh](https://github.com/junegunn/fzf.vim/blob/master/bin/preview.sh) is
 a script to print the context given filename:lines:columns)
 You got things like this:
 .
 ![preview
 demo](https://user-images.githubusercontent.com/1527040/30677573-0cee622e-9ebf-11e7-8316-c741324ecb3a.png)
 .
 ### How does it work?
 .
 If the preview command is given by the `--preview` option, skim will replace
 the
 `{}` with the current highlighted line surrounded by single quotes, call the
 command to get the output, and print the output on the preview window.
 .
 Sometimes you don't need the whole line for invoking the command. In this case
 you can use `{}`, `{1..}`, `{..3}` or `{1..5}` to select the fields. The
 syntax is explained in the section "Fields Support".
 .
 Last, you might want to configure the position of preview windows, use
 `--preview-window`.
 .
 - `--preview-window up:30%` to put the window in the up position with height
     30% of the total height of skim.
 - `--preview-window left:10:wrap`, to specify the `wrap` allows the preview
     window to wrap the output of the preview command.
 - `--preview-window wrap:hidden` to hide the preview window at startup, later
     it can be shown by the action `toggle-preview`.
 .
 ## Fields support
 .
 Normally only plugin users need to understand this.
 .
 For example, you have the data source with the format:
 .
 ```sh
 <filename>:<line number>:<column number>
 ```
 .
 However, you want to search `<filename>` only when typing in queries. That
 means when you type `21`, you want to find a `<filename>` that contains `21`,
 but not matching line number or column number.
 .
 You can use `sk --delimiter ':' --nth 1` to achieve this.
 .
 Also you can use `--with-nth` to re-arrange the order of fields.
 .
 **Range Syntax**
 .
 - `<num>` -- to specify the `num`-th fields, starting with 1.
 - `start..` -- starting from the `start`-th fields, and the rest.
 - `..end` -- starting from the `0`-th field, all the way to `end`-th field,
     including `end`.
 - `start..end` -- starting from `start`-th field, all the way to `end`-th
     field, including `end`.
 .
 ## Use as a library
 .
 Skim can be used as a library in your Rust crates.
 .
 First, add skim into your `Cargo.toml`:
 .
 ```toml
 [dependencies]
 skim = "*"
 ```
 .
 Then try to run this simple example:
 .
 ```rust
 extern crate skim;
 use skim::prelude::*;
 use std::io::Cursor;
 .
 pub fn main() {
     let options = SkimOptionsBuilder::default()
         .height(Some("50%"))
         .multi(true)
         .build()
         .unwrap();
 .
     let input = "aaaaa\nbbbb\nccc".to_string();
 .
     // `SkimItemReader` is a helper to turn any `BufRead` into a stream of
 `SkimItem`
     // `SkimItem` was implemented for `AsRef<str>` by default
     let item_reader = SkimItemReader::default();
     let items = item_reader.of_bufread(Cursor::new(input));
 .
     // `run_with` would read and show items from the stream
     let selected_items = Skim::run_with(&options, Some(items))
         .map(|out| out.selected_items)
         .unwrap_or_else(|| Vec::new());
 .
     for item in selected_items.iter() {
         print!("{}{}", item.output(), "\n");
     }
 }
 ```
 .
 Given an `Option<SkimItemReceiver>`, skim will read items accordingly, do its
 job and bring us back the user selection including the selected items, the
 query, etc. Note that:
 .
 - `SkimItemReceiver` is `crossbeam::channel::Receiver<Arc<dyn SkimItem>>`
 - If it is none, it will invoke the given command and read items from command
 output
 - Otherwise, it will read the items from the (crossbeam) channel.
 .
 Trait `SkimItem` is provided to customize how a line could be displayed,
 compared and previewed. It is implemented by default for `AsRef<str>`
 .
 Plus, `SkimItemReader` is a helper to convert a `BufRead` into
 `SkimItemReceiver` (we can easily turn a `File` for `String` into `BufRead`).
 So that you could deal with strings or files easily.
 .
 Check more examples under
 [examples/](https://github.com/lotabout/skim/tree/master/examples) directory.
 .
 # FAQ
 .
 ## How to ignore files?
 .
 Skim invokes `find .` to fetch a list of files for filtering. You can override
 that by setting the environment variable `SKIM_DEFAULT_COMMAND`. For example:
 .
 ```sh
 SKIM_DEFAULT_COMMAND="fd --type f || git ls-tree -r --name-only HEAD || rg
 --files || find ."
 sk
 ```
 .
 You could put it in your `.bashrc` or `.zshrc` if you like it to be default.
 .
 ## Some files are not shown in Vim plugin
 .
 If you use the Vim plugin and execute the `:SK` command, you might find some
 of your files not shown.
 .
 As described in [#3](https://github.com/lotabout/skim/issues/3), in the Vim
 plugin, `SKIM_DEFAULT_COMMAND` is set to the command by default:
 .
 ```vim
 let $SKIM_DEFAULT_COMMAND = "git ls-tree -r --name-only HEAD || rg --files ||
 ag -l -g \"\" || find ."
 ```
 .
 That means, the files not recognized by git will not shown. Either override the
 default with `let $SKIM_DEFAULT_COMMAND = ''` or find the missing file by
 yourself.
 .
 # Differences to fzf
 .
 [fzf](https://github.com/junegunn/fzf) is a command-line fuzzy finder written
 in Go and [skim](https://github.com/lotabout/skim) tries to implement a new one
 in Rust!
 .
 This project is written from scratch. Some decisions of implementation are
 different from fzf. For example:
 .
 1. `skim` is a binary as well as a library while fzf is only a binary.
 2. `skim` has an interactive mode.
 3. `skim` supports pre-selection
 4. The fuzzy search algorithm is different.
 5. ~~UI of showing matched items. `fzf` will show only the range matched while
    `skim` will show each character matched.~~ (fzf has this now)
 6. ~~`skim`'s range syntax is Git style~~: now it is the same with fzf.
 .
 # How to contribute
 .
 [Create new issues](https://github.com/lotabout/skim/issues/new) if you meet
 any bugs
 or have any ideas. Pull requests are warmly welcomed.
 .
 # Troubleshooting
 .
 ## No line feed issues with nix , FreeBSD, termux
 .
 If you encounter display issues like:
 .
 ```bash
 $ for n in {1..10}; do echo "$n"; done | sk
   0/10 0/0.> 10/10  10  9  8  7  6  5  4  3  2> 1
 ```
 .
 For example
 .
 - <https://github.com/lotabout/skim/issues/412>
 - <https://github.com/lotabout/skim/issues/455>
 .
 You need to set TERMINFO or TERMINFO_DIRS to the path to a correct terminfo
 database path
 .
 For example, with termux, you can add in your bashr:
 .
 ```
 export TERMINFO=/data/data/com.termux/files/usr/share/terminfo
 ```
Vcs-Browser: https://github.com/kimono-koans/two_percent
Vcs-Git: https://github.com/kimono-koans/two_percent

Package: two-percent
Version: 0.11.19-1
Architecture: amd64
Maintainer: Zhang Jinzhou <lotabout@gmail.com>
Installed-Size: 5134
Depends: libc6 (>= 2.29)
Filename: ./two-percent_0.11.19-1_amd64.deb
Size: 1446056
MD5sum: 2b6a25e5aefb01b06f415b23fbdf28cc
SHA1: fbc1005bca0a6888da409404c35a46f068829797
SHA256: 924748b8dbd73f16bd9f6c1b28dda57322d7d76f01f69dca2d7c8cbb6bcecb05
Priority: optional
Homepage: https://github.com/kimono-koans/two_percent
Description: Fuzzy Finder in rust!
 <p align="center">
   <a href="https://crates.io/crates/skim">
     <img src="https://img.shields.io/crates/v/skim.svg" alt="Crates.io" />
   </a>
   <a
 href="https://github.com/lotabout/skim/actions?query=workflow%3A%22Build+%26+Test%22">
     <img
 src="https://github.com/lotabout/skim/workflows/Build%20&%20Test/badge.svg"
 alt="Build & Test" />
   </a>
   <a href="https://repology.org/project/skim/versions">
     <img src="https://repology.org/badge/tiny-repos/skim.svg" alt="Packaging
 status" />
   </a>
   <a href="https://discord.gg/23PuxttufP">
     <img alt="Skim Discord"
 src="https://img.shields.io/discord/1031830957432504361?label=&color=7389d8&labelColor=6a7ec2&logoColor=ffffff&logo=discord"
 />
   </a>
 </p>
 .
 *Note: `two_percent` is a fork of
 [skim](https://github.com/lotabout/skim/tree/291fc34c58b1670a5e8c95f1e8f930b82c030b19)
 for use with [httm](https://github.com/kimono-koans/httm).*
 .
 > Life is short, skim!
 .
 Half of our life is spent on navigation: files, lines, commands… You need
 skim!
 It is a general fuzzy finder that saves you time.
 .
 [![skim
 demo](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm.svg)](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm)
 .
 skim provides a single executable: `sk`. Basically anywhere you would want to
 use
 `grep`, try `sk` instead.
 .
 # Table of contents
 .
 - [Installation](#installation)
 - [Usage](#usage)
   - [As Filter](#as-filter)
   - [As Interactive Interface](#as-interactive-interface)
   - [Key Bindings](#key-bindings)
   - [Search Syntax](#search-syntax)
   - [Exit code](#exit-code)
 - [Customization](#customization)
   - [Keymap to redefine](#keymap)
   - [Sort Criteria](#sort-criteria)
   - [Color Scheme](#color-scheme)
   - [Misc](#misc)
 - [Advance Topics](#advance-topics)
   - [Interactive Mode](#interactive-mode)
   - [Executing external programs](#executing-external-programs)
   - [Preview Window](#preview-window)
   - [Fields Support](#fields-support)
   - [Use as a Library](#use-as-a-library)
 - [FAQ](#faq)
   - [How to ignore files?](#how-to-ignore-files)
   - [Some files are not shown in vim
 plugin](#some-files-are-not-shown-in-vim-plugin)
 - [Differences to fzf](#differences-to-fzf)
 - [How to contribute](#how-to-contribute)
 .
 # Installation
 .
 The skim project contains several components:
 .
 1. `sk` executable -- the core.
 2. `sk-tmux` -- script for launching `sk` in a tmux pane.
 3. Vim/Nvim plugin -- to call `sk` inside Vim/Nvim. check
 [skim.vim](https://github.com/lotabout/skim.vim) for more Vim support.
 .
 ## Package Managers
 .
 | Distribution   | Package Manager   | Command                      |
 | -------------- | ----------------- | ---------------------------- |
 | macOS          | Homebrew          | `brew install sk`            |
 | macOS          | MacPorts          | `sudo port install skim`     |
 | Fedora         | dnf               | `dnf install skim`           |
 | Alpine         | apk               | `apk add skim`               |
 | Arch           | pacman            | `pacman -S skim`             |
 | Gentoo         | Portage           | `emerge --ask app-misc/skim` |
 .
 See [repology](https://repology.org/project/skim/versions) for a comprehensive
 overview of package availability.
 .
 ## Install as Vim plugin
 .
 Via vim-plug (recommended):
 .
 ```vim
 Plug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install' }
 ```
 .
 ## Hard Core
 .
 Any of the following applies:
 .
 - Using Git
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     ~/.skim/install
     ```
 .
 - Using Binary: directly [download the sk
 executable](https://github.com/lotabout/skim/releases).
 - Install from [crates.io](https://crates.io/): `cargo install skim`
 - Build Manually
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     cd ~/.skim
     cargo install
     cargo build --release
     # put the resulting `target/release/sk` executable on your PATH.
     ```
 .
 # Usage
 .
 skim can be used as a general filter (like `grep`) or as an interactive
 interface for invoking commands.
 .
 ## As filter
 .
 Try the following
 .
 ```bash
 # directly invoke skim
 sk
 .
 # or pipe some input to it: (press TAB key select multiple items with -m
 enabled)
 vim $(find . -name "*.rs" | sk -m)
 ```
 .
 The above command will allow you to select files with ".rs" extension and open
 the ones you selected in Vim.
 .
 ## As Interactive Interface
 .
 `skim` can invoke other commands dynamically. Normally you would want to
 integrate it with [grep](https://www.gnu.org/software/grep/),
 [ack](https://github.com/petdance/ack2),
 [ag](https://github.com/ggreer/the_silver_searcher), or
 [rg](https://github.com/BurntSushi/ripgrep) for searching contents in a
 project directory:
 .
 ```sh
 # works with grep
 sk --ansi -i -c 'grep -rI --color=always --line-number "{}" .'
 # works with ack
 sk --ansi -i -c 'ack --color "{}"'
 # works with ag
 sk --ansi -i -c 'ag --color "{}"'
 # works with rg
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 ![interactive mode
 demo](https://cloud.githubusercontent.com/assets/1527040/21603930/655d859a-d1db-11e6-9fec-c25099d30a12.gif)
 .
 ## Key Bindings
 .
 Some commonly used key bindings:
 .
 | Key               | Action                                     |
 |------------------:|--------------------------------------------|
 | Enter             | Accept (select current one and quit)       |
 | ESC/Ctrl-G        | Abort                                      |
 | Ctrl-P/Up         | Move cursor up                             |
 | Ctrl-N/Down       | Move cursor Down                           |
 | TAB               | Toggle selection and move down (with `-m`) |
 | Shift-TAB         | Toggle selection and move up (with `-m`)   |
 .
 For full list of key bindings, check out the [man
 page](https://github.com/lotabout/skim/blob/master/man/man1/sk.1) (`man sk`).
 .
 ## Search Syntax
 .
 `skim` borrowed `fzf`'s syntax for matching items:
 .
 | Token    | Match type                 | Description                       |
 |----------|----------------------------|-----------------------------------|
 | `text`   | fuzzy-match                | items that match `text`           |
 | `^music` | prefix-exact-match         | items that start with `music`     |
 | `.mp3$`  | suffix-exact-match         | items that end with `.mp3`        |
 | `'wild`  | exact-match (quoted)       | items that include `wild`         |
 | `!fire`  | inverse-exact-match        | items that do not include `fire`  |
 | `!.mp3$` | inverse-suffix-exact-match | items that do not end with `.mp3` |
 .
 `skim` also supports the combination of tokens.
 .
 - Whitespace has the meaning of `AND`. With the term `src main`, `skim` will
 search
     for items that match **both** `src` and `main`.
 - ` | ` means `OR` (note the spaces around `|`). With the term `.md$ |
     .markdown$`, `skim` will search for items ends with either `.md` or
     `.markdown`.
 - `OR` has higher precedence. So `readme .md$ | .markdown$` is grouped into
     `readme AND (.md$ OR .markdown$)`.
 .
 In case that you want to use regular expressions, `skim` provides `regex` mode:
 .
 ```sh
 sk --regex
 ```
 .
 You can switch to `regex` mode dynamically by pressing `Ctrl-R` (Rotate Mode).
 .
 ## exit code
 .
 | Exit Code | Meaning                           |
 |-----------|-----------------------------------|
 | 0         | Exit normally                     |
 | 1         | No Match found                    |
 | 130       | Abort by Ctrl-C/Ctrl-G/ESC/etc... |
 .
 # Customization
 .
 The doc here is only a preview, please check the man page (`man sk`) for a full
 list of options.
 .
 ## Keymap
 .
 Specify the bindings with comma separated pairs (no space allowed), example:
 .
 ```sh
 sk --bind 'alt-a:select-all,alt-d:deselect-all'
 ```
 .
 Additionally, use `+` to concatenate actions, such as `execute-silent(echo {} |
 pbcopy)+abort`.
 .
 See the *KEY BINDINGS* section of the man page for details.
 .
 ## Sort Criteria
 .
 There are five sort keys for results: `score, index, begin, end, length`, you
 can
 specify how the records are sorted by `sk --tiebreak score,index,-begin` or any
 other order you want.
 .
 ## Color Scheme
 .
 It is a high chance that you are a better artist than me. Luckily you won't
 be stuck with the default colors, `skim` supports customization of the color
 scheme.
 .
 ```sh
 --color=[BASE_SCHEME][,COLOR:ANSI]
 ```
 .
 The configuration of colors starts with the name of the base color scheme,
 followed by custom color mappings. For example:
 .
 ```sh
 sk --color=current_bg:24
 sk --color=light,fg:232,bg:255,current_bg:116,info:27
 ```
 .
 See `--color` option in the man page for details.
 .
 ## Misc
 .
 - `--ansi`: to parse ANSI color codes (e.g., `\e[32mABC`) of the data source
 - `--regex`: use the query as regular expression to match the data source
 .
 # Advanced Topics
 .
 ## Interactive mode
 .
 With "interactive mode", you could invoke command dynamically. Try out:
 .
 ```sh
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 How it works?
 .
 ![skim's interactive
 mode](https://user-images.githubusercontent.com/1527040/53381293-461ce380-39ab-11e9-8e86-7c3bbfd557bc.png)
 .
 - Skim could accept two kinds of source: command output or piped input
 - Skim has two kinds of prompts: A query prompt to specify the query pattern
 and a
     command prompt to specify the "arguments" of the command
 - `-c` is used to specify the command to execute while defaults to
 `SKIM_DEFAULT_COMMAND`
 - `-i` is to tell skim open command prompt on startup, which will show `c>` by
 default.
 .
 If you want to further narrow down the results returned by the command, press
 `Ctrl-Q` to toggle interactive mode.
 .
 ## Executing external programs
 .
 You can set up key bindings for starting external processes without leaving
 skim (`execute`, `execute-silent`).
 .
 ```sh
 # Press F1 to open the file with less without leaving skim
 # Press CTRL-Y to copy the line to clipboard and aborts skim (requires pbcopy)
 sk --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} |
 pbcopy)+abort'
 ```
 .
 ## Preview Window
 .
 This is a great feature of fzf that skim borrows. For example, we use 'ag' to
 find the matched lines, once we narrow down to the target lines, we want to
 finally decide which lines to pick by checking the context around the line.
 `grep` and `ag` has an option `--context`, skim can do better with preview
 window. For example:
 .
 ```sh
 sk --ansi -i -c 'ag --color "{}"' --preview "preview.sh {}"
 ```
 .
 (Note the
 [preview.sh](https://github.com/junegunn/fzf.vim/blob/master/bin/preview.sh) is
 a script to print the context given filename:lines:columns)
 You got things like this:
 .
 ![preview
 demo](https://user-images.githubusercontent.com/1527040/30677573-0cee622e-9ebf-11e7-8316-c741324ecb3a.png)
 .
 ### How does it work?
 .
 If the preview command is given by the `--preview` option, skim will replace
 the
 `{}` with the current highlighted line surrounded by single quotes, call the
 command to get the output, and print the output on the preview window.
 .
 Sometimes you don't need the whole line for invoking the command. In this case
 you can use `{}`, `{1..}`, `{..3}` or `{1..5}` to select the fields. The
 syntax is explained in the section "Fields Support".
 .
 Last, you might want to configure the position of preview windows, use
 `--preview-window`.
 .
 - `--preview-window up:30%` to put the window in the up position with height
     30% of the total height of skim.
 - `--preview-window left:10:wrap`, to specify the `wrap` allows the preview
     window to wrap the output of the preview command.
 - `--preview-window wrap:hidden` to hide the preview window at startup, later
     it can be shown by the action `toggle-preview`.
 .
 ## Fields support
 .
 Normally only plugin users need to understand this.
 .
 For example, you have the data source with the format:
 .
 ```sh
 <filename>:<line number>:<column number>
 ```
 .
 However, you want to search `<filename>` only when typing in queries. That
 means when you type `21`, you want to find a `<filename>` that contains `21`,
 but not matching line number or column number.
 .
 You can use `sk --delimiter ':' --nth 1` to achieve this.
 .
 Also you can use `--with-nth` to re-arrange the order of fields.
 .
 **Range Syntax**
 .
 - `<num>` -- to specify the `num`-th fields, starting with 1.
 - `start..` -- starting from the `start`-th fields, and the rest.
 - `..end` -- starting from the `0`-th field, all the way to `end`-th field,
     including `end`.
 - `start..end` -- starting from `start`-th field, all the way to `end`-th
     field, including `end`.
 .
 ## Use as a library
 .
 Skim can be used as a library in your Rust crates.
 .
 First, add skim into your `Cargo.toml`:
 .
 ```toml
 [dependencies]
 skim = "*"
 ```
 .
 Then try to run this simple example:
 .
 ```rust
 extern crate skim;
 use skim::prelude::*;
 use std::io::Cursor;
 .
 pub fn main() {
     let options = SkimOptionsBuilder::default()
         .height(Some("50%"))
         .multi(true)
         .build()
         .unwrap();
 .
     let input = "aaaaa\nbbbb\nccc".to_string();
 .
     // `SkimItemReader` is a helper to turn any `BufRead` into a stream of
 `SkimItem`
     // `SkimItem` was implemented for `AsRef<str>` by default
     let item_reader = SkimItemReader::default();
     let items = item_reader.of_bufread(Cursor::new(input));
 .
     // `run_with` would read and show items from the stream
     let selected_items = Skim::run_with(&options, Some(items))
         .map(|out| out.selected_items)
         .unwrap_or_else(|| Vec::new());
 .
     for item in selected_items.iter() {
         print!("{}{}", item.output(), "\n");
     }
 }
 ```
 .
 Given an `Option<SkimItemReceiver>`, skim will read items accordingly, do its
 job and bring us back the user selection including the selected items, the
 query, etc. Note that:
 .
 - `SkimItemReceiver` is `crossbeam::channel::Receiver<Arc<dyn SkimItem>>`
 - If it is none, it will invoke the given command and read items from command
 output
 - Otherwise, it will read the items from the (crossbeam) channel.
 .
 Trait `SkimItem` is provided to customize how a line could be displayed,
 compared and previewed. It is implemented by default for `AsRef<str>`
 .
 Plus, `SkimItemReader` is a helper to convert a `BufRead` into
 `SkimItemReceiver` (we can easily turn a `File` for `String` into `BufRead`).
 So that you could deal with strings or files easily.
 .
 Check more examples under
 [examples/](https://github.com/lotabout/skim/tree/master/examples) directory.
 .
 # FAQ
 .
 ## How to ignore files?
 .
 Skim invokes `find .` to fetch a list of files for filtering. You can override
 that by setting the environment variable `SKIM_DEFAULT_COMMAND`. For example:
 .
 ```sh
 SKIM_DEFAULT_COMMAND="fd --type f || git ls-tree -r --name-only HEAD || rg
 --files || find ."
 sk
 ```
 .
 You could put it in your `.bashrc` or `.zshrc` if you like it to be default.
 .
 ## Some files are not shown in Vim plugin
 .
 If you use the Vim plugin and execute the `:SK` command, you might find some
 of your files not shown.
 .
 As described in [#3](https://github.com/lotabout/skim/issues/3), in the Vim
 plugin, `SKIM_DEFAULT_COMMAND` is set to the command by default:
 .
 ```vim
 let $SKIM_DEFAULT_COMMAND = "git ls-tree -r --name-only HEAD || rg --files ||
 ag -l -g \"\" || find ."
 ```
 .
 That means, the files not recognized by git will not shown. Either override the
 default with `let $SKIM_DEFAULT_COMMAND = ''` or find the missing file by
 yourself.
 .
 # Differences to fzf
 .
 [fzf](https://github.com/junegunn/fzf) is a command-line fuzzy finder written
 in Go and [skim](https://github.com/lotabout/skim) tries to implement a new one
 in Rust!
 .
 This project is written from scratch. Some decisions of implementation are
 different from fzf. For example:
 .
 1. `skim` is a binary as well as a library while fzf is only a binary.
 2. `skim` has an interactive mode.
 3. `skim` supports pre-selection
 4. The fuzzy search algorithm is different.
 5. ~~UI of showing matched items. `fzf` will show only the range matched while
    `skim` will show each character matched.~~ (fzf has this now)
 6. ~~`skim`'s range syntax is Git style~~: now it is the same with fzf.
 .
 # How to contribute
 .
 [Create new issues](https://github.com/lotabout/skim/issues/new) if you meet
 any bugs
 or have any ideas. Pull requests are warmly welcomed.
 .
 # Troubleshooting
 .
 ## No line feed issues with nix , FreeBSD, termux
 .
 If you encounter display issues like:
 .
 ```bash
 $ for n in {1..10}; do echo "$n"; done | sk
   0/10 0/0.> 10/10  10  9  8  7  6  5  4  3  2> 1
 ```
 .
 For example
 .
 - <https://github.com/lotabout/skim/issues/412>
 - <https://github.com/lotabout/skim/issues/455>
 .
 You need to set TERMINFO or TERMINFO_DIRS to the path to a correct terminfo
 database path
 .
 For example, with termux, you can add in your bashr:
 .
 ```
 export TERMINFO=/data/data/com.termux/files/usr/share/terminfo
 ```
Vcs-Browser: https://github.com/kimono-koans/two_percent
Vcs-Git: https://github.com/kimono-koans/two_percent

Package: two-percent
Version: 0.11.21-1
Architecture: amd64
Maintainer: Zhang Jinzhou <lotabout@gmail.com>
Installed-Size: 5124
Depends: libc6 (>= 2.29)
Filename: ./two-percent_0.11.21-1_amd64.deb
Size: 1444436
MD5sum: 496da27ca4ab0b9976d14152a7d5e227
SHA1: ace37c7bef7bb468df924df7e3b4350308602724
SHA256: 5c648e5127bcdb4065458510ec79b9bd0e9dab3d23658761d5205829335834c3
Priority: optional
Homepage: https://github.com/kimono-koans/two_percent
Description: Fuzzy Finder in rust!
 <p align="center">
   <a href="https://crates.io/crates/skim">
     <img src="https://img.shields.io/crates/v/skim.svg" alt="Crates.io" />
   </a>
   <a
 href="https://github.com/lotabout/skim/actions?query=workflow%3A%22Build+%26+Test%22">
     <img
 src="https://github.com/lotabout/skim/workflows/Build%20&%20Test/badge.svg"
 alt="Build & Test" />
   </a>
   <a href="https://repology.org/project/skim/versions">
     <img src="https://repology.org/badge/tiny-repos/skim.svg" alt="Packaging
 status" />
   </a>
   <a href="https://discord.gg/23PuxttufP">
     <img alt="Skim Discord"
 src="https://img.shields.io/discord/1031830957432504361?label=&color=7389d8&labelColor=6a7ec2&logoColor=ffffff&logo=discord"
 />
   </a>
 </p>
 .
 *Note: `two_percent` is a fork of
 [skim](https://github.com/lotabout/skim/tree/291fc34c58b1670a5e8c95f1e8f930b82c030b19)
 for use with [httm](https://github.com/kimono-koans/httm).*
 .
 > Life is short, skim!
 .
 Half of our life is spent on navigation: files, lines, commands… You need
 skim!
 It is a general fuzzy finder that saves you time.
 .
 [![skim
 demo](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm.svg)](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm)
 .
 skim provides a single executable: `sk`. Basically anywhere you would want to
 use
 `grep`, try `sk` instead.
 .
 # Table of contents
 .
 - [Installation](#installation)
 - [Usage](#usage)
   - [As Filter](#as-filter)
   - [As Interactive Interface](#as-interactive-interface)
   - [Key Bindings](#key-bindings)
   - [Search Syntax](#search-syntax)
   - [Exit code](#exit-code)
 - [Customization](#customization)
   - [Keymap to redefine](#keymap)
   - [Sort Criteria](#sort-criteria)
   - [Color Scheme](#color-scheme)
   - [Misc](#misc)
 - [Advance Topics](#advance-topics)
   - [Interactive Mode](#interactive-mode)
   - [Executing external programs](#executing-external-programs)
   - [Preview Window](#preview-window)
   - [Fields Support](#fields-support)
   - [Use as a Library](#use-as-a-library)
 - [FAQ](#faq)
   - [How to ignore files?](#how-to-ignore-files)
   - [Some files are not shown in vim
 plugin](#some-files-are-not-shown-in-vim-plugin)
 - [Differences to fzf](#differences-to-fzf)
 - [How to contribute](#how-to-contribute)
 .
 # Installation
 .
 The skim project contains several components:
 .
 1. `sk` executable -- the core.
 2. `sk-tmux` -- script for launching `sk` in a tmux pane.
 3. Vim/Nvim plugin -- to call `sk` inside Vim/Nvim. check
 [skim.vim](https://github.com/lotabout/skim.vim) for more Vim support.
 .
 ## Package Managers
 .
 | Distribution   | Package Manager   | Command                      |
 | -------------- | ----------------- | ---------------------------- |
 | macOS          | Homebrew          | `brew install sk`            |
 | macOS          | MacPorts          | `sudo port install skim`     |
 | Fedora         | dnf               | `dnf install skim`           |
 | Alpine         | apk               | `apk add skim`               |
 | Arch           | pacman            | `pacman -S skim`             |
 | Gentoo         | Portage           | `emerge --ask app-misc/skim` |
 .
 See [repology](https://repology.org/project/skim/versions) for a comprehensive
 overview of package availability.
 .
 ## Install as Vim plugin
 .
 Via vim-plug (recommended):
 .
 ```vim
 Plug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install' }
 ```
 .
 ## Hard Core
 .
 Any of the following applies:
 .
 - Using Git
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     ~/.skim/install
     ```
 .
 - Using Binary: directly [download the sk
 executable](https://github.com/lotabout/skim/releases).
 - Install from [crates.io](https://crates.io/): `cargo install skim`
 - Build Manually
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     cd ~/.skim
     cargo install
     cargo build --release
     # put the resulting `target/release/sk` executable on your PATH.
     ```
 .
 # Usage
 .
 skim can be used as a general filter (like `grep`) or as an interactive
 interface for invoking commands.
 .
 ## As filter
 .
 Try the following
 .
 ```bash
 # directly invoke skim
 sk
 .
 # or pipe some input to it: (press TAB key select multiple items with -m
 enabled)
 vim $(find . -name "*.rs" | sk -m)
 ```
 .
 The above command will allow you to select files with ".rs" extension and open
 the ones you selected in Vim.
 .
 ## As Interactive Interface
 .
 `skim` can invoke other commands dynamically. Normally you would want to
 integrate it with [grep](https://www.gnu.org/software/grep/),
 [ack](https://github.com/petdance/ack2),
 [ag](https://github.com/ggreer/the_silver_searcher), or
 [rg](https://github.com/BurntSushi/ripgrep) for searching contents in a
 project directory:
 .
 ```sh
 # works with grep
 sk --ansi -i -c 'grep -rI --color=always --line-number "{}" .'
 # works with ack
 sk --ansi -i -c 'ack --color "{}"'
 # works with ag
 sk --ansi -i -c 'ag --color "{}"'
 # works with rg
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 ![interactive mode
 demo](https://cloud.githubusercontent.com/assets/1527040/21603930/655d859a-d1db-11e6-9fec-c25099d30a12.gif)
 .
 ## Key Bindings
 .
 Some commonly used key bindings:
 .
 | Key               | Action                                     |
 |------------------:|--------------------------------------------|
 | Enter             | Accept (select current one and quit)       |
 | ESC/Ctrl-G        | Abort                                      |
 | Ctrl-P/Up         | Move cursor up                             |
 | Ctrl-N/Down       | Move cursor Down                           |
 | TAB               | Toggle selection and move down (with `-m`) |
 | Shift-TAB         | Toggle selection and move up (with `-m`)   |
 .
 For full list of key bindings, check out the [man
 page](https://github.com/lotabout/skim/blob/master/man/man1/sk.1) (`man sk`).
 .
 ## Search Syntax
 .
 `skim` borrowed `fzf`'s syntax for matching items:
 .
 | Token    | Match type                 | Description                       |
 |----------|----------------------------|-----------------------------------|
 | `text`   | fuzzy-match                | items that match `text`           |
 | `^music` | prefix-exact-match         | items that start with `music`     |
 | `.mp3$`  | suffix-exact-match         | items that end with `.mp3`        |
 | `'wild`  | exact-match (quoted)       | items that include `wild`         |
 | `!fire`  | inverse-exact-match        | items that do not include `fire`  |
 | `!.mp3$` | inverse-suffix-exact-match | items that do not end with `.mp3` |
 .
 `skim` also supports the combination of tokens.
 .
 - Whitespace has the meaning of `AND`. With the term `src main`, `skim` will
 search
     for items that match **both** `src` and `main`.
 - ` | ` means `OR` (note the spaces around `|`). With the term `.md$ |
     .markdown$`, `skim` will search for items ends with either `.md` or
     `.markdown`.
 - `OR` has higher precedence. So `readme .md$ | .markdown$` is grouped into
     `readme AND (.md$ OR .markdown$)`.
 .
 In case that you want to use regular expressions, `skim` provides `regex` mode:
 .
 ```sh
 sk --regex
 ```
 .
 You can switch to `regex` mode dynamically by pressing `Ctrl-R` (Rotate Mode).
 .
 ## exit code
 .
 | Exit Code | Meaning                           |
 |-----------|-----------------------------------|
 | 0         | Exit normally                     |
 | 1         | No Match found                    |
 | 130       | Abort by Ctrl-C/Ctrl-G/ESC/etc... |
 .
 # Customization
 .
 The doc here is only a preview, please check the man page (`man sk`) for a full
 list of options.
 .
 ## Keymap
 .
 Specify the bindings with comma separated pairs (no space allowed), example:
 .
 ```sh
 sk --bind 'alt-a:select-all,alt-d:deselect-all'
 ```
 .
 Additionally, use `+` to concatenate actions, such as `execute-silent(echo {} |
 pbcopy)+abort`.
 .
 See the *KEY BINDINGS* section of the man page for details.
 .
 ## Sort Criteria
 .
 There are five sort keys for results: `score, index, begin, end, length`, you
 can
 specify how the records are sorted by `sk --tiebreak score,index,-begin` or any
 other order you want.
 .
 ## Color Scheme
 .
 It is a high chance that you are a better artist than me. Luckily you won't
 be stuck with the default colors, `skim` supports customization of the color
 scheme.
 .
 ```sh
 --color=[BASE_SCHEME][,COLOR:ANSI]
 ```
 .
 The configuration of colors starts with the name of the base color scheme,
 followed by custom color mappings. For example:
 .
 ```sh
 sk --color=current_bg:24
 sk --color=light,fg:232,bg:255,current_bg:116,info:27
 ```
 .
 See `--color` option in the man page for details.
 .
 ## Misc
 .
 - `--ansi`: to parse ANSI color codes (e.g., `\e[32mABC`) of the data source
 - `--regex`: use the query as regular expression to match the data source
 .
 # Advanced Topics
 .
 ## Interactive mode
 .
 With "interactive mode", you could invoke command dynamically. Try out:
 .
 ```sh
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 How it works?
 .
 ![skim's interactive
 mode](https://user-images.githubusercontent.com/1527040/53381293-461ce380-39ab-11e9-8e86-7c3bbfd557bc.png)
 .
 - Skim could accept two kinds of source: command output or piped input
 - Skim has two kinds of prompts: A query prompt to specify the query pattern
 and a
     command prompt to specify the "arguments" of the command
 - `-c` is used to specify the command to execute while defaults to
 `SKIM_DEFAULT_COMMAND`
 - `-i` is to tell skim open command prompt on startup, which will show `c>` by
 default.
 .
 If you want to further narrow down the results returned by the command, press
 `Ctrl-Q` to toggle interactive mode.
 .
 ## Executing external programs
 .
 You can set up key bindings for starting external processes without leaving
 skim (`execute`, `execute-silent`).
 .
 ```sh
 # Press F1 to open the file with less without leaving skim
 # Press CTRL-Y to copy the line to clipboard and aborts skim (requires pbcopy)
 sk --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} |
 pbcopy)+abort'
 ```
 .
 ## Preview Window
 .
 This is a great feature of fzf that skim borrows. For example, we use 'ag' to
 find the matched lines, once we narrow down to the target lines, we want to
 finally decide which lines to pick by checking the context around the line.
 `grep` and `ag` has an option `--context`, skim can do better with preview
 window. For example:
 .
 ```sh
 sk --ansi -i -c 'ag --color "{}"' --preview "preview.sh {}"
 ```
 .
 (Note the
 [preview.sh](https://github.com/junegunn/fzf.vim/blob/master/bin/preview.sh) is
 a script to print the context given filename:lines:columns)
 You got things like this:
 .
 ![preview
 demo](https://user-images.githubusercontent.com/1527040/30677573-0cee622e-9ebf-11e7-8316-c741324ecb3a.png)
 .
 ### How does it work?
 .
 If the preview command is given by the `--preview` option, skim will replace
 the
 `{}` with the current highlighted line surrounded by single quotes, call the
 command to get the output, and print the output on the preview window.
 .
 Sometimes you don't need the whole line for invoking the command. In this case
 you can use `{}`, `{1..}`, `{..3}` or `{1..5}` to select the fields. The
 syntax is explained in the section "Fields Support".
 .
 Last, you might want to configure the position of preview windows, use
 `--preview-window`.
 .
 - `--preview-window up:30%` to put the window in the up position with height
     30% of the total height of skim.
 - `--preview-window left:10:wrap`, to specify the `wrap` allows the preview
     window to wrap the output of the preview command.
 - `--preview-window wrap:hidden` to hide the preview window at startup, later
     it can be shown by the action `toggle-preview`.
 .
 ## Fields support
 .
 Normally only plugin users need to understand this.
 .
 For example, you have the data source with the format:
 .
 ```sh
 <filename>:<line number>:<column number>
 ```
 .
 However, you want to search `<filename>` only when typing in queries. That
 means when you type `21`, you want to find a `<filename>` that contains `21`,
 but not matching line number or column number.
 .
 You can use `sk --delimiter ':' --nth 1` to achieve this.
 .
 Also you can use `--with-nth` to re-arrange the order of fields.
 .
 **Range Syntax**
 .
 - `<num>` -- to specify the `num`-th fields, starting with 1.
 - `start..` -- starting from the `start`-th fields, and the rest.
 - `..end` -- starting from the `0`-th field, all the way to `end`-th field,
     including `end`.
 - `start..end` -- starting from `start`-th field, all the way to `end`-th
     field, including `end`.
 .
 ## Use as a library
 .
 Skim can be used as a library in your Rust crates.
 .
 First, add skim into your `Cargo.toml`:
 .
 ```toml
 [dependencies]
 skim = "*"
 ```
 .
 Then try to run this simple example:
 .
 ```rust
 extern crate skim;
 use skim::prelude::*;
 use std::io::Cursor;
 .
 pub fn main() {
     let options = SkimOptionsBuilder::default()
         .height(Some("50%"))
         .multi(true)
         .build()
         .unwrap();
 .
     let input = "aaaaa\nbbbb\nccc".to_string();
 .
     // `SkimItemReader` is a helper to turn any `BufRead` into a stream of
 `SkimItem`
     // `SkimItem` was implemented for `AsRef<str>` by default
     let item_reader = SkimItemReader::default();
     let items = item_reader.of_bufread(Cursor::new(input));
 .
     // `run_with` would read and show items from the stream
     let selected_items = Skim::run_with(&options, Some(items))
         .map(|out| out.selected_items)
         .unwrap_or_else(|| Vec::new());
 .
     for item in selected_items.iter() {
         print!("{}{}", item.output(), "\n");
     }
 }
 ```
 .
 Given an `Option<SkimItemReceiver>`, skim will read items accordingly, do its
 job and bring us back the user selection including the selected items, the
 query, etc. Note that:
 .
 - `SkimItemReceiver` is `crossbeam::channel::Receiver<Arc<dyn SkimItem>>`
 - If it is none, it will invoke the given command and read items from command
 output
 - Otherwise, it will read the items from the (crossbeam) channel.
 .
 Trait `SkimItem` is provided to customize how a line could be displayed,
 compared and previewed. It is implemented by default for `AsRef<str>`
 .
 Plus, `SkimItemReader` is a helper to convert a `BufRead` into
 `SkimItemReceiver` (we can easily turn a `File` for `String` into `BufRead`).
 So that you could deal with strings or files easily.
 .
 Check more examples under
 [examples/](https://github.com/lotabout/skim/tree/master/examples) directory.
 .
 # FAQ
 .
 ## How to ignore files?
 .
 Skim invokes `find .` to fetch a list of files for filtering. You can override
 that by setting the environment variable `SKIM_DEFAULT_COMMAND`. For example:
 .
 ```sh
 SKIM_DEFAULT_COMMAND="fd --type f || git ls-tree -r --name-only HEAD || rg
 --files || find ."
 sk
 ```
 .
 You could put it in your `.bashrc` or `.zshrc` if you like it to be default.
 .
 ## Some files are not shown in Vim plugin
 .
 If you use the Vim plugin and execute the `:SK` command, you might find some
 of your files not shown.
 .
 As described in [#3](https://github.com/lotabout/skim/issues/3), in the Vim
 plugin, `SKIM_DEFAULT_COMMAND` is set to the command by default:
 .
 ```vim
 let $SKIM_DEFAULT_COMMAND = "git ls-tree -r --name-only HEAD || rg --files ||
 ag -l -g \"\" || find ."
 ```
 .
 That means, the files not recognized by git will not shown. Either override the
 default with `let $SKIM_DEFAULT_COMMAND = ''` or find the missing file by
 yourself.
 .
 # Differences to fzf
 .
 [fzf](https://github.com/junegunn/fzf) is a command-line fuzzy finder written
 in Go and [skim](https://github.com/lotabout/skim) tries to implement a new one
 in Rust!
 .
 This project is written from scratch. Some decisions of implementation are
 different from fzf. For example:
 .
 1. `skim` is a binary as well as a library while fzf is only a binary.
 2. `skim` has an interactive mode.
 3. `skim` supports pre-selection
 4. The fuzzy search algorithm is different.
 5. ~~UI of showing matched items. `fzf` will show only the range matched while
    `skim` will show each character matched.~~ (fzf has this now)
 6. ~~`skim`'s range syntax is Git style~~: now it is the same with fzf.
 .
 # How to contribute
 .
 [Create new issues](https://github.com/lotabout/skim/issues/new) if you meet
 any bugs
 or have any ideas. Pull requests are warmly welcomed.
 .
 # Troubleshooting
 .
 ## No line feed issues with nix , FreeBSD, termux
 .
 If you encounter display issues like:
 .
 ```bash
 $ for n in {1..10}; do echo "$n"; done | sk
   0/10 0/0.> 10/10  10  9  8  7  6  5  4  3  2> 1
 ```
 .
 For example
 .
 - <https://github.com/lotabout/skim/issues/412>
 - <https://github.com/lotabout/skim/issues/455>
 .
 You need to set TERMINFO or TERMINFO_DIRS to the path to a correct terminfo
 database path
 .
 For example, with termux, you can add in your bashr:
 .
 ```
 export TERMINFO=/data/data/com.termux/files/usr/share/terminfo
 ```
Vcs-Browser: https://github.com/kimono-koans/two_percent
Vcs-Git: https://github.com/kimono-koans/two_percent

