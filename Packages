Package: dano
Version: 0.9.0-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 1400
Depends: ffmpeg (>=4.2.7), libc6 (>= 2.29)
Suggests: flac (>=1.3.3)
Filename: ./dano_0.9.0-1_amd64.deb
Size: 471960
MD5sum: 28441912c328f4a743a14dda5021a87b
SHA1: 41fa83f5e8ee3d9ce80db9e923bf7ca821f80424
SHA256: b9e1cb9f38bdfb2020a01bfa8a3b8be78cd40f776966557079cb4bfff0a05431
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/dano/blob/master/README.md
Description: A CLI tool for generating checksums of media bitstreams
 dano is a wrapper for ffmpeg that checksums the internal file streams of ffmpeg
 compatible media files, and stores them in a format which can be used to verify
 such checksums later.  This is handy, because, should you choose to change
 metadata tags, or change file names, the media checksums should remain the
 same.
Vcs-Browser: https://github.com/kimono-koans/dano
Vcs-Git: https://github.com/kimono-koans/dano

Package: dano
Version: 0.9.1-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 1376
Depends: ffmpeg (>=4.2.7), libc6 (>= 2.29)
Suggests: flac (>=1.3.3)
Filename: ./dano_0.9.1-1_amd64.deb
Size: 474240
MD5sum: d45bf209af7ac74ec2d720b1981b3747
SHA1: 042a332d4962c75feb3e5b070db27d2856eabda2
SHA256: cfd777fca6e116aa2d0b81386c49caa8f890a51f9324fe8c1057d2974130b5cc
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/dano/blob/master/README.md
Description: A CLI tool for generating checksums of media bitstreams
 dano is a wrapper for ffmpeg that checksums the internal file streams of ffmpeg
 compatible media files, and stores them in a format which can be used to verify
 such checksums later.  This is handy, because, should you choose to change
 metadata tags, or change file names, the media checksums should remain the
 same.

Package: httm
Version: 0.45.0-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 3836
Depends: libc6
Filename: ./httm_0.45.0-1_amd64.deb
Size: 1185128
MD5sum: ead83462acffa15d36954a5712e5218c
SHA1: 88773842a70697686d860dabe407c372af282347
SHA256: 75378ea7874cd965aceaa09c9186ddf5c45c1d1d4ab4a350163ed6e1547ec3cd
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.

Package: httm
Version: 0.45.1-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 3833
Depends: libc6
Filename: ./httm_0.45.1-1_amd64.deb
Size: 1184992
MD5sum: 673983982bd1e711ebbeb7dad1dd1220
SHA1: 7de9d22ca77e8e4eb9aa46000e68fb675168f387
SHA256: eb868c097b9a0229ba2b83a2fb7ef21531628f4cae288e27cb116fe028a7b1d9
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.

Package: httm
Version: 0.45.2-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 3837
Depends: libc6
Filename: ./httm_0.45.2-1_amd64.deb
Size: 1185080
MD5sum: d6cae0dcd1611014d4f236d317b5e19c
SHA1: f57d74b7f7913560f80440e8a698c140fd75dd10
SHA256: 290b7c2d2cdcdd8193d30bc9d68275cfabfafaffab3591fe7f5047c11364e80f
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.

Package: httm
Version: 0.45.3-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 3833
Depends: libc6
Filename: ./httm_0.45.3-1_amd64.deb
Size: 1187260
MD5sum: d1318490af33c8b9aed2dcc12af492f2
SHA1: bd5b38085e24356cdc2fc5110a75a1239e6b0042
SHA256: fd56856ed6c5bf118372bb9822fc249dfb75e3acef830a582524331d14458240
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.

Package: httm
Version: 0.45.4-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 3833
Depends: libc6
Filename: ./httm_0.45.4-1_amd64.deb
Size: 1187180
MD5sum: ca6d6df34ef6c161dc08c962350f334f
SHA1: e5f40ad09ac83d4e4b9bebcec5c7ceba27cc9fd4
SHA256: 64cebc700d8f8cd37f83fdf422e6772a971a7c3cf5a40de610cc443fc509f00b
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.

Package: httm
Version: 0.45.5-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 3819
Depends: libc6
Filename: ./httm_0.45.5-1_amd64.deb
Size: 1187468
MD5sum: 5785af142d0d6e7cd2af7e8de9aa36d3
SHA1: 144e6739c16be145ad777235711f509e311d74bd
SHA256: 728bec96ad2994ef92a6fd03ddc4324cbd2a2f20a79c9cd5fa3cce72e9679971
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.

Package: httm
Version: 0.45.6-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 3844
Depends: libc6
Filename: ./httm_0.45.6-1_amd64.deb
Size: 1188924
MD5sum: 2798582a622667a416ffc027b24d7293
SHA1: 81a37b018f84e305c0de55d98f630463b52ffe12
SHA256: ee71c099bff241f0b832f0a1d12a862b5e2632a753ae82cbf40289b150ad6fc1
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.

Package: httm
Version: 0.45.7-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 3839
Depends: libc6
Filename: ./httm_0.45.7-1_amd64.deb
Size: 1188336
MD5sum: 54ffc40990c190b4ce73ffb96d6bba3d
SHA1: ecb65892579e8c2c94e19f681b079f9d2a2514be
SHA256: fbd80fa5402a79778eaca77fc332bf8fddc9cc068d9be3297231a83a8f65812a
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.

Package: httm
Version: 0.45.8-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 3840
Depends: libc6
Filename: ./httm_0.45.8-1_amd64.deb
Size: 1191180
MD5sum: 915000d3df8b986969c6f3e49fa24161
SHA1: ff52471685c7806cebd1943b3980b153d77f0698
SHA256: 0b3cf83759486993f0b0502c8b43dbd2afde020ffc4f5d4781b258ac77404776
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.

Package: httm
Version: 0.46.0-1
Architecture: amd64
Maintainer: kimono koans <https://github.com/kimono-koans/>
Installed-Size: 3841
Depends: libc6
Filename: ./httm_0.46.0-1_amd64.deb
Size: 1192116
MD5sum: 7f1cafc63613416ed96859c3c451e13c
SHA1: fabded16de711ac5486cedf1be24368390f8e027
SHA256: a713526c23eaf2df02d4f5d56de569ac31be8e267e8125fd11d95000ff5ecbe1
Section: utility
Priority: optional
Homepage: https://github.com/kimono-koans/httm/blob/master/README.md
Description: A CLI tool for viewing snapshot file versions on ZFS and btrfs datasets
 Prints the size, date and corresponding locations of available unique versions
 of files residing on snapshots.  May also be used interactively to select and
 restore from such versions, and even to snapshot datasets which contain certain
 files.

Package: two-percent
Version: 0.12.2-1
Architecture: amd64
Maintainer: Zhang Jinzhou <lotabout@gmail.com>
Installed-Size: 4940
Depends: libc6 (>= 2.29)
Filename: ./two-percent_0.12.2-1_amd64.deb
Size: 1431280
MD5sum: dab731531312e6a5c858e46f31c619b2
SHA1: 64e44a9cfa63398d1ac11f87af0a6965ee3514fc
SHA256: 15614eeebc9a3ef00e9a5043cd968ac2e229dfe9199640642fa1a5b6daaacc74
Priority: optional
Homepage: https://github.com/kimono-koans/two_percent
Description: Fuzzy Finder in rust!
 <p align="center">
   <a href="https://crates.io/crates/skim">
     <img src="https://img.shields.io/crates/v/skim.svg" alt="Crates.io" />
   </a>
   <a
 href="https://github.com/lotabout/skim/actions?query=workflow%3A%22Build+%26+Test%22">
     <img
 src="https://github.com/lotabout/skim/workflows/Build%20&%20Test/badge.svg"
 alt="Build & Test" />
   </a>
   <a href="https://repology.org/project/skim/versions">
     <img src="https://repology.org/badge/tiny-repos/skim.svg" alt="Packaging
 status" />
   </a>
   <a href="https://discord.gg/23PuxttufP">
     <img alt="Skim Discord"
 src="https://img.shields.io/discord/1031830957432504361?label=&color=7389d8&labelColor=6a7ec2&logoColor=ffffff&logo=discord"
 />
   </a>
 </p>
 .
 *Note: `two_percent` is a fork of
 [skim](https://github.com/lotabout/skim/tree/291fc34c58b1670a5e8c95f1e8f930b82c030b19)
 for use with [httm](https://github.com/kimono-koans/httm).*
 .
 > Life is short, skim!
 .
 Half of our life is spent on navigation: files, lines, commands… You need
 skim!
 It is a general fuzzy finder that saves you time.
 .
 [![skim
 demo](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm.svg)](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm)
 .
 skim provides a single executable: `sk`. Basically anywhere you would want to
 use
 `grep`, try `sk` instead.
 .
 # Table of contents
 .
 - [Installation](#installation)
 - [Usage](#usage)
   - [As Filter](#as-filter)
   - [As Interactive Interface](#as-interactive-interface)
   - [Key Bindings](#key-bindings)
   - [Search Syntax](#search-syntax)
   - [Exit code](#exit-code)
 - [Customization](#customization)
   - [Keymap to redefine](#keymap)
   - [Sort Criteria](#sort-criteria)
   - [Color Scheme](#color-scheme)
   - [Misc](#misc)
 - [Advance Topics](#advance-topics)
   - [Interactive Mode](#interactive-mode)
   - [Executing external programs](#executing-external-programs)
   - [Preview Window](#preview-window)
   - [Fields Support](#fields-support)
   - [Use as a Library](#use-as-a-library)
 - [FAQ](#faq)
   - [How to ignore files?](#how-to-ignore-files)
   - [Some files are not shown in vim
 plugin](#some-files-are-not-shown-in-vim-plugin)
 - [Differences to fzf](#differences-to-fzf)
 - [How to contribute](#how-to-contribute)
 .
 # Installation
 .
 The skim project contains several components:
 .
 1. `sk` executable -- the core.
 2. `sk-tmux` -- script for launching `sk` in a tmux pane.
 3. Vim/Nvim plugin -- to call `sk` inside Vim/Nvim. check
 [skim.vim](https://github.com/lotabout/skim.vim) for more Vim support.
 .
 ## Package Managers
 .
 | Distribution   | Package Manager   | Command                      |
 | -------------- | ----------------- | ---------------------------- |
 | macOS          | Homebrew          | `brew install sk`            |
 | macOS          | MacPorts          | `sudo port install skim`     |
 | Fedora         | dnf               | `dnf install skim`           |
 | Alpine         | apk               | `apk add skim`               |
 | Arch           | pacman            | `pacman -S skim`             |
 | Gentoo         | Portage           | `emerge --ask app-misc/skim` |
 .
 See [repology](https://repology.org/project/skim/versions) for a comprehensive
 overview of package availability.
 .
 ## Install as Vim plugin
 .
 Via vim-plug (recommended):
 .
 ```vim
 Plug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install' }
 ```
 .
 ## Hard Core
 .
 Any of the following applies:
 .
 - Using Git
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     ~/.skim/install
     ```
 .
 - Using Binary: directly [download the sk
 executable](https://github.com/lotabout/skim/releases).
 - Install from [crates.io](https://crates.io/): `cargo install skim`
 - Build Manually
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     cd ~/.skim
     cargo install
     cargo build --release
     # put the resulting `target/release/sk` executable on your PATH.
     ```
 .
 # Usage
 .
 skim can be used as a general filter (like `grep`) or as an interactive
 interface for invoking commands.
 .
 ## As filter
 .
 Try the following
 .
 ```bash
 # directly invoke skim
 sk
 .
 # or pipe some input to it: (press TAB key select multiple items with -m
 enabled)
 vim $(find . -name "*.rs" | sk -m)
 ```
 .
 The above command will allow you to select files with ".rs" extension and open
 the ones you selected in Vim.
 .
 ## As Interactive Interface
 .
 `skim` can invoke other commands dynamically. Normally you would want to
 integrate it with [grep](https://www.gnu.org/software/grep/),
 [ack](https://github.com/petdance/ack2),
 [ag](https://github.com/ggreer/the_silver_searcher), or
 [rg](https://github.com/BurntSushi/ripgrep) for searching contents in a
 project directory:
 .
 ```sh
 # works with grep
 sk --ansi -i -c 'grep -rI --color=always --line-number "{}" .'
 # works with ack
 sk --ansi -i -c 'ack --color "{}"'
 # works with ag
 sk --ansi -i -c 'ag --color "{}"'
 # works with rg
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 ![interactive mode
 demo](https://cloud.githubusercontent.com/assets/1527040/21603930/655d859a-d1db-11e6-9fec-c25099d30a12.gif)
 .
 ## Key Bindings
 .
 Some commonly used key bindings:
 .
 | Key               | Action                                     |
 |------------------:|--------------------------------------------|
 | Enter             | Accept (select current one and quit)       |
 | ESC/Ctrl-G        | Abort                                      |
 | Ctrl-P/Up         | Move cursor up                             |
 | Ctrl-N/Down       | Move cursor Down                           |
 | TAB               | Toggle selection and move down (with `-m`) |
 | Shift-TAB         | Toggle selection and move up (with `-m`)   |
 .
 For full list of key bindings, check out the [man
 page](https://github.com/lotabout/skim/blob/master/man/man1/sk.1) (`man sk`).
 .
 ## Search Syntax
 .
 `skim` borrowed `fzf`'s syntax for matching items:
 .
 | Token    | Match type                 | Description                       |
 |----------|----------------------------|-----------------------------------|
 | `text`   | fuzzy-match                | items that match `text`           |
 | `^music` | prefix-exact-match         | items that start with `music`     |
 | `.mp3$`  | suffix-exact-match         | items that end with `.mp3`        |
 | `'wild`  | exact-match (quoted)       | items that include `wild`         |
 | `!fire`  | inverse-exact-match        | items that do not include `fire`  |
 | `!.mp3$` | inverse-suffix-exact-match | items that do not end with `.mp3` |
 .
 `skim` also supports the combination of tokens.
 .
 - Whitespace has the meaning of `AND`. With the term `src main`, `skim` will
 search
     for items that match **both** `src` and `main`.
 - ` | ` means `OR` (note the spaces around `|`). With the term `.md$ |
     .markdown$`, `skim` will search for items ends with either `.md` or
     `.markdown`.
 - `OR` has higher precedence. So `readme .md$ | .markdown$` is grouped into
     `readme AND (.md$ OR .markdown$)`.
 .
 In case that you want to use regular expressions, `skim` provides `regex` mode:
 .
 ```sh
 sk --regex
 ```
 .
 You can switch to `regex` mode dynamically by pressing `Ctrl-R` (Rotate Mode).
 .
 ## exit code
 .
 | Exit Code | Meaning                           |
 |-----------|-----------------------------------|
 | 0         | Exit normally                     |
 | 1         | No Match found                    |
 | 130       | Abort by Ctrl-C/Ctrl-G/ESC/etc... |
 .
 # Customization
 .
 The doc here is only a preview, please check the man page (`man sk`) for a full
 list of options.
 .
 ## Keymap
 .
 Specify the bindings with comma separated pairs (no space allowed), example:
 .
 ```sh
 sk --bind 'alt-a:select-all,alt-d:deselect-all'
 ```
 .
 Additionally, use `+` to concatenate actions, such as `execute-silent(echo {} |
 pbcopy)+abort`.
 .
 See the *KEY BINDINGS* section of the man page for details.
 .
 ## Sort Criteria
 .
 There are five sort keys for results: `score, index, begin, end, length`, you
 can
 specify how the records are sorted by `sk --tiebreak score,index,-begin` or any
 other order you want.
 .
 ## Color Scheme
 .
 It is a high chance that you are a better artist than me. Luckily you won't
 be stuck with the default colors, `skim` supports customization of the color
 scheme.
 .
 ```sh
 --color=[BASE_SCHEME][,COLOR:ANSI]
 ```
 .
 The configuration of colors starts with the name of the base color scheme,
 followed by custom color mappings. For example:
 .
 ```sh
 sk --color=current_bg:24
 sk --color=light,fg:232,bg:255,current_bg:116,info:27
 ```
 .
 See `--color` option in the man page for details.
 .
 ## Misc
 .
 - `--ansi`: to parse ANSI color codes (e.g., `\e[32mABC`) of the data source
 - `--regex`: use the query as regular expression to match the data source
 .
 # Advanced Topics
 .
 ## Interactive mode
 .
 With "interactive mode", you could invoke command dynamically. Try out:
 .
 ```sh
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 How it works?
 .
 ![skim's interactive
 mode](https://user-images.githubusercontent.com/1527040/53381293-461ce380-39ab-11e9-8e86-7c3bbfd557bc.png)
 .
 - Skim could accept two kinds of source: command output or piped input
 - Skim has two kinds of prompts: A query prompt to specify the query pattern
 and a
     command prompt to specify the "arguments" of the command
 - `-c` is used to specify the command to execute while defaults to
 `SKIM_DEFAULT_COMMAND`
 - `-i` is to tell skim open command prompt on startup, which will show `c>` by
 default.
 .
 If you want to further narrow down the results returned by the command, press
 `Ctrl-Q` to toggle interactive mode.
 .
 ## Executing external programs
 .
 You can set up key bindings for starting external processes without leaving
 skim (`execute`, `execute-silent`).
 .
 ```sh
 # Press F1 to open the file with less without leaving skim
 # Press CTRL-Y to copy the line to clipboard and aborts skim (requires pbcopy)
 sk --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} |
 pbcopy)+abort'
 ```
 .
 ## Preview Window
 .
 This is a great feature of fzf that skim borrows. For example, we use 'ag' to
 find the matched lines, once we narrow down to the target lines, we want to
 finally decide which lines to pick by checking the context around the line.
 `grep` and `ag` has an option `--context`, skim can do better with preview
 window. For example:
 .
 ```sh
 sk --ansi -i -c 'ag --color "{}"' --preview "preview.sh {}"
 ```
 .
 (Note the
 [preview.sh](https://github.com/junegunn/fzf.vim/blob/master/bin/preview.sh) is
 a script to print the context given filename:lines:columns)
 You got things like this:
 .
 ![preview
 demo](https://user-images.githubusercontent.com/1527040/30677573-0cee622e-9ebf-11e7-8316-c741324ecb3a.png)
 .
 ### How does it work?
 .
 If the preview command is given by the `--preview` option, skim will replace
 the
 `{}` with the current highlighted line surrounded by single quotes, call the
 command to get the output, and print the output on the preview window.
 .
 Sometimes you don't need the whole line for invoking the command. In this case
 you can use `{}`, `{1..}`, `{..3}` or `{1..5}` to select the fields. The
 syntax is explained in the section "Fields Support".
 .
 Last, you might want to configure the position of preview windows, use
 `--preview-window`.
 .
 - `--preview-window up:30%` to put the window in the up position with height
     30% of the total height of skim.
 - `--preview-window left:10:wrap`, to specify the `wrap` allows the preview
     window to wrap the output of the preview command.
 - `--preview-window wrap:hidden` to hide the preview window at startup, later
     it can be shown by the action `toggle-preview`.
 .
 ## Fields support
 .
 Normally only plugin users need to understand this.
 .
 For example, you have the data source with the format:
 .
 ```sh
 <filename>:<line number>:<column number>
 ```
 .
 However, you want to search `<filename>` only when typing in queries. That
 means when you type `21`, you want to find a `<filename>` that contains `21`,
 but not matching line number or column number.
 .
 You can use `sk --delimiter ':' --nth 1` to achieve this.
 .
 Also you can use `--with-nth` to re-arrange the order of fields.
 .
 **Range Syntax**
 .
 - `<num>` -- to specify the `num`-th fields, starting with 1.
 - `start..` -- starting from the `start`-th fields, and the rest.
 - `..end` -- starting from the `0`-th field, all the way to `end`-th field,
     including `end`.
 - `start..end` -- starting from `start`-th field, all the way to `end`-th
     field, including `end`.
 .
 ## Use as a library
 .
 Skim can be used as a library in your Rust crates.
 .
 First, add skim into your `Cargo.toml`:
 .
 ```toml
 [dependencies]
 skim = "*"
 ```
 .
 Then try to run this simple example:
 .
 ```rust
 extern crate skim;
 use skim::prelude::*;
 use std::io::Cursor;
 .
 pub fn main() {
     let options = SkimOptionsBuilder::default()
         .height(Some("50%"))
         .multi(true)
         .build()
         .unwrap();
 .
     let input = "aaaaa\nbbbb\nccc".to_string();
 .
     // `SkimItemReader` is a helper to turn any `BufRead` into a stream of
 `SkimItem`
     // `SkimItem` was implemented for `AsRef<str>` by default
     let item_reader = SkimItemReader::default();
     let items = item_reader.of_bufread(Cursor::new(input));
 .
     // `run_with` would read and show items from the stream
     let selected_items = Skim::run_with(&options, Some(items))
         .map(|out| out.selected_items)
         .unwrap_or_else(|| Vec::new());
 .
     for item in selected_items.iter() {
         print!("{}{}", item.output(), "\n");
     }
 }
 ```
 .
 Given an `Option<SkimItemReceiver>`, skim will read items accordingly, do its
 job and bring us back the user selection including the selected items, the
 query, etc. Note that:
 .
 - `SkimItemReceiver` is `crossbeam::channel::Receiver<Arc<dyn SkimItem>>`
 - If it is none, it will invoke the given command and read items from command
 output
 - Otherwise, it will read the items from the (crossbeam) channel.
 .
 Trait `SkimItem` is provided to customize how a line could be displayed,
 compared and previewed. It is implemented by default for `AsRef<str>`
 .
 Plus, `SkimItemReader` is a helper to convert a `BufRead` into
 `SkimItemReceiver` (we can easily turn a `File` for `String` into `BufRead`).
 So that you could deal with strings or files easily.
 .
 Check more examples under
 [examples/](https://github.com/lotabout/skim/tree/master/examples) directory.
 .
 # FAQ
 .
 ## How to ignore files?
 .
 Skim invokes `find .` to fetch a list of files for filtering. You can override
 that by setting the environment variable `SKIM_DEFAULT_COMMAND`. For example:
 .
 ```sh
 SKIM_DEFAULT_COMMAND="fd --type f || git ls-tree -r --name-only HEAD || rg
 --files || find ."
 sk
 ```
 .
 You could put it in your `.bashrc` or `.zshrc` if you like it to be default.
 .
 ## Some files are not shown in Vim plugin
 .
 If you use the Vim plugin and execute the `:SK` command, you might find some
 of your files not shown.
 .
 As described in [#3](https://github.com/lotabout/skim/issues/3), in the Vim
 plugin, `SKIM_DEFAULT_COMMAND` is set to the command by default:
 .
 ```vim
 let $SKIM_DEFAULT_COMMAND = "git ls-tree -r --name-only HEAD || rg --files ||
 ag -l -g \"\" || find ."
 ```
 .
 That means, the files not recognized by git will not shown. Either override the
 default with `let $SKIM_DEFAULT_COMMAND = ''` or find the missing file by
 yourself.
 .
 # Differences to fzf
 .
 [fzf](https://github.com/junegunn/fzf) is a command-line fuzzy finder written
 in Go and [skim](https://github.com/lotabout/skim) tries to implement a new one
 in Rust!
 .
 This project is written from scratch. Some decisions of implementation are
 different from fzf. For example:
 .
 1. `skim` is a binary as well as a library while fzf is only a binary.
 2. `skim` has an interactive mode.
 3. `skim` supports pre-selection
 4. The fuzzy search algorithm is different.
 5. ~~UI of showing matched items. `fzf` will show only the range matched while
    `skim` will show each character matched.~~ (fzf has this now)
 6. ~~`skim`'s range syntax is Git style~~: now it is the same with fzf.
 .
 # How to contribute
 .
 [Create new issues](https://github.com/lotabout/skim/issues/new) if you meet
 any bugs
 or have any ideas. Pull requests are warmly welcomed.
 .
 # Troubleshooting
 .
 ## No line feed issues with nix , FreeBSD, termux
 .
 If you encounter display issues like:
 .
 ```bash
 $ for n in {1..10}; do echo "$n"; done | sk
   0/10 0/0.> 10/10  10  9  8  7  6  5  4  3  2> 1
 ```
 .
 For example
 .
 - <https://github.com/lotabout/skim/issues/412>
 - <https://github.com/lotabout/skim/issues/455>
 .
 You need to set TERMINFO or TERMINFO_DIRS to the path to a correct terminfo
 database path
 .
 For example, with termux, you can add in your bashr:
 .
 ```
 export TERMINFO=/data/data/com.termux/files/usr/share/terminfo
 ```
Vcs-Browser: https://github.com/kimono-koans/two_percent
Vcs-Git: https://github.com/kimono-koans/two_percent

Package: two-percent
Version: 0.12.3-1
Architecture: amd64
Maintainer: Zhang Jinzhou <lotabout@gmail.com>
Installed-Size: 5065
Depends: libc6 (>= 2.29)
Filename: ./two-percent_0.12.3-1_amd64.deb
Size: 1473880
MD5sum: 83cb0f1cceeebbf777a90f85e437e909
SHA1: 7ec094c9b0c6de4196a0e8a8ab6041228165125b
SHA256: e20ca26ad1b27a235018c2ea7683c7d2dc9229a720ecf0b0ae56043668b5a07f
Priority: optional
Homepage: https://github.com/kimono-koans/two_percent
Description: Fuzzy Finder in rust!
 <p align="center">
   <a href="https://crates.io/crates/skim">
     <img src="https://img.shields.io/crates/v/skim.svg" alt="Crates.io" />
   </a>
   <a
 href="https://github.com/lotabout/skim/actions?query=workflow%3A%22Build+%26+Test%22">
     <img
 src="https://github.com/lotabout/skim/workflows/Build%20&%20Test/badge.svg"
 alt="Build & Test" />
   </a>
   <a href="https://repology.org/project/skim/versions">
     <img src="https://repology.org/badge/tiny-repos/skim.svg" alt="Packaging
 status" />
   </a>
   <a href="https://discord.gg/23PuxttufP">
     <img alt="Skim Discord"
 src="https://img.shields.io/discord/1031830957432504361?label=&color=7389d8&labelColor=6a7ec2&logoColor=ffffff&logo=discord"
 />
   </a>
 </p>
 .
 *Note: `two_percent` is a fork of
 [skim](https://github.com/lotabout/skim/tree/291fc34c58b1670a5e8c95f1e8f930b82c030b19)
 for use with [httm](https://github.com/kimono-koans/httm).*
 .
 > Life is short, skim!
 .
 Half of our life is spent on navigation: files, lines, commands… You need
 skim!
 It is a general fuzzy finder that saves you time.
 .
 [![skim
 demo](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm.svg)](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm)
 .
 skim provides a single executable: `sk`. Basically anywhere you would want to
 use
 `grep`, try `sk` instead.
 .
 # Table of contents
 .
 - [Installation](#installation)
 - [Usage](#usage)
   - [As Filter](#as-filter)
   - [As Interactive Interface](#as-interactive-interface)
   - [Key Bindings](#key-bindings)
   - [Search Syntax](#search-syntax)
   - [Exit code](#exit-code)
 - [Customization](#customization)
   - [Keymap to redefine](#keymap)
   - [Sort Criteria](#sort-criteria)
   - [Color Scheme](#color-scheme)
   - [Misc](#misc)
 - [Advance Topics](#advance-topics)
   - [Interactive Mode](#interactive-mode)
   - [Executing external programs](#executing-external-programs)
   - [Preview Window](#preview-window)
   - [Fields Support](#fields-support)
   - [Use as a Library](#use-as-a-library)
 - [FAQ](#faq)
   - [How to ignore files?](#how-to-ignore-files)
   - [Some files are not shown in vim
 plugin](#some-files-are-not-shown-in-vim-plugin)
 - [Differences to fzf](#differences-to-fzf)
 - [How to contribute](#how-to-contribute)
 .
 # Installation
 .
 The skim project contains several components:
 .
 1. `sk` executable -- the core.
 2. `sk-tmux` -- script for launching `sk` in a tmux pane.
 3. Vim/Nvim plugin -- to call `sk` inside Vim/Nvim. check
 [skim.vim](https://github.com/lotabout/skim.vim) for more Vim support.
 .
 ## Package Managers
 .
 | Distribution   | Package Manager   | Command                      |
 | -------------- | ----------------- | ---------------------------- |
 | macOS          | Homebrew          | `brew install sk`            |
 | macOS          | MacPorts          | `sudo port install skim`     |
 | Fedora         | dnf               | `dnf install skim`           |
 | Alpine         | apk               | `apk add skim`               |
 | Arch           | pacman            | `pacman -S skim`             |
 | Gentoo         | Portage           | `emerge --ask app-misc/skim` |
 .
 See [repology](https://repology.org/project/skim/versions) for a comprehensive
 overview of package availability.
 .
 ## Install as Vim plugin
 .
 Via vim-plug (recommended):
 .
 ```vim
 Plug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install' }
 ```
 .
 ## Hard Core
 .
 Any of the following applies:
 .
 - Using Git
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     ~/.skim/install
     ```
 .
 - Using Binary: directly [download the sk
 executable](https://github.com/lotabout/skim/releases).
 - Install from [crates.io](https://crates.io/): `cargo install skim`
 - Build Manually
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     cd ~/.skim
     cargo install
     cargo build --release
     # put the resulting `target/release/sk` executable on your PATH.
     ```
 .
 # Usage
 .
 skim can be used as a general filter (like `grep`) or as an interactive
 interface for invoking commands.
 .
 ## As filter
 .
 Try the following
 .
 ```bash
 # directly invoke skim
 sk
 .
 # or pipe some input to it: (press TAB key select multiple items with -m
 enabled)
 vim $(find . -name "*.rs" | sk -m)
 ```
 .
 The above command will allow you to select files with ".rs" extension and open
 the ones you selected in Vim.
 .
 ## As Interactive Interface
 .
 `skim` can invoke other commands dynamically. Normally you would want to
 integrate it with [grep](https://www.gnu.org/software/grep/),
 [ack](https://github.com/petdance/ack2),
 [ag](https://github.com/ggreer/the_silver_searcher), or
 [rg](https://github.com/BurntSushi/ripgrep) for searching contents in a
 project directory:
 .
 ```sh
 # works with grep
 sk --ansi -i -c 'grep -rI --color=always --line-number "{}" .'
 # works with ack
 sk --ansi -i -c 'ack --color "{}"'
 # works with ag
 sk --ansi -i -c 'ag --color "{}"'
 # works with rg
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 ![interactive mode
 demo](https://cloud.githubusercontent.com/assets/1527040/21603930/655d859a-d1db-11e6-9fec-c25099d30a12.gif)
 .
 ## Key Bindings
 .
 Some commonly used key bindings:
 .
 | Key               | Action                                     |
 |------------------:|--------------------------------------------|
 | Enter             | Accept (select current one and quit)       |
 | ESC/Ctrl-G        | Abort                                      |
 | Ctrl-P/Up         | Move cursor up                             |
 | Ctrl-N/Down       | Move cursor Down                           |
 | TAB               | Toggle selection and move down (with `-m`) |
 | Shift-TAB         | Toggle selection and move up (with `-m`)   |
 .
 For full list of key bindings, check out the [man
 page](https://github.com/lotabout/skim/blob/master/man/man1/sk.1) (`man sk`).
 .
 ## Search Syntax
 .
 `skim` borrowed `fzf`'s syntax for matching items:
 .
 | Token    | Match type                 | Description                       |
 |----------|----------------------------|-----------------------------------|
 | `text`   | fuzzy-match                | items that match `text`           |
 | `^music` | prefix-exact-match         | items that start with `music`     |
 | `.mp3$`  | suffix-exact-match         | items that end with `.mp3`        |
 | `'wild`  | exact-match (quoted)       | items that include `wild`         |
 | `!fire`  | inverse-exact-match        | items that do not include `fire`  |
 | `!.mp3$` | inverse-suffix-exact-match | items that do not end with `.mp3` |
 .
 `skim` also supports the combination of tokens.
 .
 - Whitespace has the meaning of `AND`. With the term `src main`, `skim` will
 search
     for items that match **both** `src` and `main`.
 - ` | ` means `OR` (note the spaces around `|`). With the term `.md$ |
     .markdown$`, `skim` will search for items ends with either `.md` or
     `.markdown`.
 - `OR` has higher precedence. So `readme .md$ | .markdown$` is grouped into
     `readme AND (.md$ OR .markdown$)`.
 .
 In case that you want to use regular expressions, `skim` provides `regex` mode:
 .
 ```sh
 sk --regex
 ```
 .
 You can switch to `regex` mode dynamically by pressing `Ctrl-R` (Rotate Mode).
 .
 ## exit code
 .
 | Exit Code | Meaning                           |
 |-----------|-----------------------------------|
 | 0         | Exit normally                     |
 | 1         | No Match found                    |
 | 130       | Abort by Ctrl-C/Ctrl-G/ESC/etc... |
 .
 # Customization
 .
 The doc here is only a preview, please check the man page (`man sk`) for a full
 list of options.
 .
 ## Keymap
 .
 Specify the bindings with comma separated pairs (no space allowed), example:
 .
 ```sh
 sk --bind 'alt-a:select-all,alt-d:deselect-all'
 ```
 .
 Additionally, use `+` to concatenate actions, such as `execute-silent(echo {} |
 pbcopy)+abort`.
 .
 See the *KEY BINDINGS* section of the man page for details.
 .
 ## Sort Criteria
 .
 There are five sort keys for results: `score, index, begin, end, length`, you
 can
 specify how the records are sorted by `sk --tiebreak score,index,-begin` or any
 other order you want.
 .
 ## Color Scheme
 .
 It is a high chance that you are a better artist than me. Luckily you won't
 be stuck with the default colors, `skim` supports customization of the color
 scheme.
 .
 ```sh
 --color=[BASE_SCHEME][,COLOR:ANSI]
 ```
 .
 The configuration of colors starts with the name of the base color scheme,
 followed by custom color mappings. For example:
 .
 ```sh
 sk --color=current_bg:24
 sk --color=light,fg:232,bg:255,current_bg:116,info:27
 ```
 .
 See `--color` option in the man page for details.
 .
 ## Misc
 .
 - `--ansi`: to parse ANSI color codes (e.g., `\e[32mABC`) of the data source
 - `--regex`: use the query as regular expression to match the data source
 .
 # Advanced Topics
 .
 ## Interactive mode
 .
 With "interactive mode", you could invoke command dynamically. Try out:
 .
 ```sh
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 How it works?
 .
 ![skim's interactive
 mode](https://user-images.githubusercontent.com/1527040/53381293-461ce380-39ab-11e9-8e86-7c3bbfd557bc.png)
 .
 - Skim could accept two kinds of source: command output or piped input
 - Skim has two kinds of prompts: A query prompt to specify the query pattern
 and a
     command prompt to specify the "arguments" of the command
 - `-c` is used to specify the command to execute while defaults to
 `SKIM_DEFAULT_COMMAND`
 - `-i` is to tell skim open command prompt on startup, which will show `c>` by
 default.
 .
 If you want to further narrow down the results returned by the command, press
 `Ctrl-Q` to toggle interactive mode.
 .
 ## Executing external programs
 .
 You can set up key bindings for starting external processes without leaving
 skim (`execute`, `execute-silent`).
 .
 ```sh
 # Press F1 to open the file with less without leaving skim
 # Press CTRL-Y to copy the line to clipboard and aborts skim (requires pbcopy)
 sk --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} |
 pbcopy)+abort'
 ```
 .
 ## Preview Window
 .
 This is a great feature of fzf that skim borrows. For example, we use 'ag' to
 find the matched lines, once we narrow down to the target lines, we want to
 finally decide which lines to pick by checking the context around the line.
 `grep` and `ag` has an option `--context`, skim can do better with preview
 window. For example:
 .
 ```sh
 sk --ansi -i -c 'ag --color "{}"' --preview "preview.sh {}"
 ```
 .
 (Note the
 [preview.sh](https://github.com/junegunn/fzf.vim/blob/master/bin/preview.sh) is
 a script to print the context given filename:lines:columns)
 You got things like this:
 .
 ![preview
 demo](https://user-images.githubusercontent.com/1527040/30677573-0cee622e-9ebf-11e7-8316-c741324ecb3a.png)
 .
 ### How does it work?
 .
 If the preview command is given by the `--preview` option, skim will replace
 the
 `{}` with the current highlighted line surrounded by single quotes, call the
 command to get the output, and print the output on the preview window.
 .
 Sometimes you don't need the whole line for invoking the command. In this case
 you can use `{}`, `{1..}`, `{..3}` or `{1..5}` to select the fields. The
 syntax is explained in the section "Fields Support".
 .
 Last, you might want to configure the position of preview windows, use
 `--preview-window`.
 .
 - `--preview-window up:30%` to put the window in the up position with height
     30% of the total height of skim.
 - `--preview-window left:10:wrap`, to specify the `wrap` allows the preview
     window to wrap the output of the preview command.
 - `--preview-window wrap:hidden` to hide the preview window at startup, later
     it can be shown by the action `toggle-preview`.
 .
 ## Fields support
 .
 Normally only plugin users need to understand this.
 .
 For example, you have the data source with the format:
 .
 ```sh
 <filename>:<line number>:<column number>
 ```
 .
 However, you want to search `<filename>` only when typing in queries. That
 means when you type `21`, you want to find a `<filename>` that contains `21`,
 but not matching line number or column number.
 .
 You can use `sk --delimiter ':' --nth 1` to achieve this.
 .
 Also you can use `--with-nth` to re-arrange the order of fields.
 .
 **Range Syntax**
 .
 - `<num>` -- to specify the `num`-th fields, starting with 1.
 - `start..` -- starting from the `start`-th fields, and the rest.
 - `..end` -- starting from the `0`-th field, all the way to `end`-th field,
     including `end`.
 - `start..end` -- starting from `start`-th field, all the way to `end`-th
     field, including `end`.
 .
 ## Use as a library
 .
 Skim can be used as a library in your Rust crates.
 .
 First, add skim into your `Cargo.toml`:
 .
 ```toml
 [dependencies]
 skim = "*"
 ```
 .
 Then try to run this simple example:
 .
 ```rust
 extern crate skim;
 use skim::prelude::*;
 use std::io::Cursor;
 .
 pub fn main() {
     let options = SkimOptionsBuilder::default()
         .height(Some("50%"))
         .multi(true)
         .build()
         .unwrap();
 .
     let input = "aaaaa\nbbbb\nccc".to_string();
 .
     // `SkimItemReader` is a helper to turn any `BufRead` into a stream of
 `SkimItem`
     // `SkimItem` was implemented for `AsRef<str>` by default
     let item_reader = SkimItemReader::default();
     let items = item_reader.of_bufread(Cursor::new(input));
 .
     // `run_with` would read and show items from the stream
     let selected_items = Skim::run_with(&options, Some(items))
         .map(|out| out.selected_items)
         .unwrap_or_else(|| Vec::new());
 .
     for item in selected_items.iter() {
         print!("{}{}", item.output(), "\n");
     }
 }
 ```
 .
 Given an `Option<SkimItemReceiver>`, skim will read items accordingly, do its
 job and bring us back the user selection including the selected items, the
 query, etc. Note that:
 .
 - `SkimItemReceiver` is `crossbeam::channel::Receiver<Arc<dyn SkimItem>>`
 - If it is none, it will invoke the given command and read items from command
 output
 - Otherwise, it will read the items from the (crossbeam) channel.
 .
 Trait `SkimItem` is provided to customize how a line could be displayed,
 compared and previewed. It is implemented by default for `AsRef<str>`
 .
 Plus, `SkimItemReader` is a helper to convert a `BufRead` into
 `SkimItemReceiver` (we can easily turn a `File` for `String` into `BufRead`).
 So that you could deal with strings or files easily.
 .
 Check more examples under
 [examples/](https://github.com/lotabout/skim/tree/master/examples) directory.
 .
 # FAQ
 .
 ## How to ignore files?
 .
 Skim invokes `find .` to fetch a list of files for filtering. You can override
 that by setting the environment variable `SKIM_DEFAULT_COMMAND`. For example:
 .
 ```sh
 SKIM_DEFAULT_COMMAND="fd --type f || git ls-tree -r --name-only HEAD || rg
 --files || find ."
 sk
 ```
 .
 You could put it in your `.bashrc` or `.zshrc` if you like it to be default.
 .
 ## Some files are not shown in Vim plugin
 .
 If you use the Vim plugin and execute the `:SK` command, you might find some
 of your files not shown.
 .
 As described in [#3](https://github.com/lotabout/skim/issues/3), in the Vim
 plugin, `SKIM_DEFAULT_COMMAND` is set to the command by default:
 .
 ```vim
 let $SKIM_DEFAULT_COMMAND = "git ls-tree -r --name-only HEAD || rg --files ||
 ag -l -g \"\" || find ."
 ```
 .
 That means, the files not recognized by git will not shown. Either override the
 default with `let $SKIM_DEFAULT_COMMAND = ''` or find the missing file by
 yourself.
 .
 # Differences to fzf
 .
 [fzf](https://github.com/junegunn/fzf) is a command-line fuzzy finder written
 in Go and [skim](https://github.com/lotabout/skim) tries to implement a new one
 in Rust!
 .
 This project is written from scratch. Some decisions of implementation are
 different from fzf. For example:
 .
 1. `skim` is a binary as well as a library while fzf is only a binary.
 2. `skim` has an interactive mode.
 3. `skim` supports pre-selection
 4. The fuzzy search algorithm is different.
 5. ~~UI of showing matched items. `fzf` will show only the range matched while
    `skim` will show each character matched.~~ (fzf has this now)
 6. ~~`skim`'s range syntax is Git style~~: now it is the same with fzf.
 .
 # How to contribute
 .
 [Create new issues](https://github.com/lotabout/skim/issues/new) if you meet
 any bugs
 or have any ideas. Pull requests are warmly welcomed.
 .
 # Troubleshooting
 .
 ## No line feed issues with nix , FreeBSD, termux
 .
 If you encounter display issues like:
 .
 ```bash
 $ for n in {1..10}; do echo "$n"; done | sk
   0/10 0/0.> 10/10  10  9  8  7  6  5  4  3  2> 1
 ```
 .
 For example
 .
 - <https://github.com/lotabout/skim/issues/412>
 - <https://github.com/lotabout/skim/issues/455>
 .
 You need to set TERMINFO or TERMINFO_DIRS to the path to a correct terminfo
 database path
 .
 For example, with termux, you can add in your bashr:
 .
 ```
 export TERMINFO=/data/data/com.termux/files/usr/share/terminfo
 ```

Package: two-percent
Version: 0.12.4-1
Architecture: amd64
Maintainer: Zhang Jinzhou <lotabout@gmail.com>
Installed-Size: 5161
Depends: libc6 (>= 2.29)
Filename: ./two-percent_0.12.4-1_amd64.deb
Size: 1503588
MD5sum: 8d244916b0ecec628ee72a8707a72554
SHA1: 301139c2d19364df0fbd8b14eef77e4d40634a61
SHA256: 4c2777e5cf6fdd15df2b3153e265bbad06ef485a442ac7e3171e3202d73834d2
Priority: optional
Homepage: https://github.com/kimono-koans/two_percent
Description: Fuzzy Finder in rust!
 <p align="center">
   <a href="https://crates.io/crates/skim">
     <img src="https://img.shields.io/crates/v/skim.svg" alt="Crates.io" />
   </a>
   <a
 href="https://github.com/lotabout/skim/actions?query=workflow%3A%22Build+%26+Test%22">
     <img
 src="https://github.com/lotabout/skim/workflows/Build%20&%20Test/badge.svg"
 alt="Build & Test" />
   </a>
   <a href="https://repology.org/project/skim/versions">
     <img src="https://repology.org/badge/tiny-repos/skim.svg" alt="Packaging
 status" />
   </a>
   <a href="https://discord.gg/23PuxttufP">
     <img alt="Skim Discord"
 src="https://img.shields.io/discord/1031830957432504361?label=&color=7389d8&labelColor=6a7ec2&logoColor=ffffff&logo=discord"
 />
   </a>
 </p>
 .
 *Note: `two_percent` is a fork of
 [skim](https://github.com/lotabout/skim/tree/291fc34c58b1670a5e8c95f1e8f930b82c030b19)
 for use with [httm](https://github.com/kimono-koans/httm).*
 .
 > Life is short, skim!
 .
 Half of our life is spent on navigation: files, lines, commands… You need
 skim!
 It is a general fuzzy finder that saves you time.
 .
 [![skim
 demo](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm.svg)](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm)
 .
 skim provides a single executable: `sk`. Basically anywhere you would want to
 use
 `grep`, try `sk` instead.
 .
 # Table of contents
 .
 - [Installation](#installation)
 - [Usage](#usage)
   - [As Filter](#as-filter)
   - [As Interactive Interface](#as-interactive-interface)
   - [Key Bindings](#key-bindings)
   - [Search Syntax](#search-syntax)
   - [Exit code](#exit-code)
 - [Customization](#customization)
   - [Keymap to redefine](#keymap)
   - [Sort Criteria](#sort-criteria)
   - [Color Scheme](#color-scheme)
   - [Misc](#misc)
 - [Advance Topics](#advance-topics)
   - [Interactive Mode](#interactive-mode)
   - [Executing external programs](#executing-external-programs)
   - [Preview Window](#preview-window)
   - [Fields Support](#fields-support)
   - [Use as a Library](#use-as-a-library)
 - [FAQ](#faq)
   - [How to ignore files?](#how-to-ignore-files)
   - [Some files are not shown in vim
 plugin](#some-files-are-not-shown-in-vim-plugin)
 - [Differences to fzf](#differences-to-fzf)
 - [How to contribute](#how-to-contribute)
 .
 # Installation
 .
 The skim project contains several components:
 .
 1. `sk` executable -- the core.
 2. `sk-tmux` -- script for launching `sk` in a tmux pane.
 3. Vim/Nvim plugin -- to call `sk` inside Vim/Nvim. check
 [skim.vim](https://github.com/lotabout/skim.vim) for more Vim support.
 .
 ## Package Managers
 .
 | Distribution   | Package Manager   | Command                      |
 | -------------- | ----------------- | ---------------------------- |
 | macOS          | Homebrew          | `brew install sk`            |
 | macOS          | MacPorts          | `sudo port install skim`     |
 | Fedora         | dnf               | `dnf install skim`           |
 | Alpine         | apk               | `apk add skim`               |
 | Arch           | pacman            | `pacman -S skim`             |
 | Gentoo         | Portage           | `emerge --ask app-misc/skim` |
 .
 See [repology](https://repology.org/project/skim/versions) for a comprehensive
 overview of package availability.
 .
 ## Install as Vim plugin
 .
 Via vim-plug (recommended):
 .
 ```vim
 Plug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install' }
 ```
 .
 ## Hard Core
 .
 Any of the following applies:
 .
 - Using Git
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     ~/.skim/install
     ```
 .
 - Using Binary: directly [download the sk
 executable](https://github.com/lotabout/skim/releases).
 - Install from [crates.io](https://crates.io/): `cargo install skim`
 - Build Manually
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     cd ~/.skim
     cargo install
     cargo build --release
     # put the resulting `target/release/sk` executable on your PATH.
     ```
 .
 # Usage
 .
 skim can be used as a general filter (like `grep`) or as an interactive
 interface for invoking commands.
 .
 ## As filter
 .
 Try the following
 .
 ```bash
 # directly invoke skim
 sk
 .
 # or pipe some input to it: (press TAB key select multiple items with -m
 enabled)
 vim $(find . -name "*.rs" | sk -m)
 ```
 .
 The above command will allow you to select files with ".rs" extension and open
 the ones you selected in Vim.
 .
 ## As Interactive Interface
 .
 `skim` can invoke other commands dynamically. Normally you would want to
 integrate it with [grep](https://www.gnu.org/software/grep/),
 [ack](https://github.com/petdance/ack2),
 [ag](https://github.com/ggreer/the_silver_searcher), or
 [rg](https://github.com/BurntSushi/ripgrep) for searching contents in a
 project directory:
 .
 ```sh
 # works with grep
 sk --ansi -i -c 'grep -rI --color=always --line-number "{}" .'
 # works with ack
 sk --ansi -i -c 'ack --color "{}"'
 # works with ag
 sk --ansi -i -c 'ag --color "{}"'
 # works with rg
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 ![interactive mode
 demo](https://cloud.githubusercontent.com/assets/1527040/21603930/655d859a-d1db-11e6-9fec-c25099d30a12.gif)
 .
 ## Key Bindings
 .
 Some commonly used key bindings:
 .
 | Key               | Action                                     |
 |------------------:|--------------------------------------------|
 | Enter             | Accept (select current one and quit)       |
 | ESC/Ctrl-G        | Abort                                      |
 | Ctrl-P/Up         | Move cursor up                             |
 | Ctrl-N/Down       | Move cursor Down                           |
 | TAB               | Toggle selection and move down (with `-m`) |
 | Shift-TAB         | Toggle selection and move up (with `-m`)   |
 .
 For full list of key bindings, check out the [man
 page](https://github.com/lotabout/skim/blob/master/man/man1/sk.1) (`man sk`).
 .
 ## Search Syntax
 .
 `skim` borrowed `fzf`'s syntax for matching items:
 .
 | Token    | Match type                 | Description                       |
 |----------|----------------------------|-----------------------------------|
 | `text`   | fuzzy-match                | items that match `text`           |
 | `^music` | prefix-exact-match         | items that start with `music`     |
 | `.mp3$`  | suffix-exact-match         | items that end with `.mp3`        |
 | `'wild`  | exact-match (quoted)       | items that include `wild`         |
 | `!fire`  | inverse-exact-match        | items that do not include `fire`  |
 | `!.mp3$` | inverse-suffix-exact-match | items that do not end with `.mp3` |
 .
 `skim` also supports the combination of tokens.
 .
 - Whitespace has the meaning of `AND`. With the term `src main`, `skim` will
 search
     for items that match **both** `src` and `main`.
 - ` | ` means `OR` (note the spaces around `|`). With the term `.md$ |
     .markdown$`, `skim` will search for items ends with either `.md` or
     `.markdown`.
 - `OR` has higher precedence. So `readme .md$ | .markdown$` is grouped into
     `readme AND (.md$ OR .markdown$)`.
 .
 In case that you want to use regular expressions, `skim` provides `regex` mode:
 .
 ```sh
 sk --regex
 ```
 .
 You can switch to `regex` mode dynamically by pressing `Ctrl-R` (Rotate Mode).
 .
 ## exit code
 .
 | Exit Code | Meaning                           |
 |-----------|-----------------------------------|
 | 0         | Exit normally                     |
 | 1         | No Match found                    |
 | 130       | Abort by Ctrl-C/Ctrl-G/ESC/etc... |
 .
 # Customization
 .
 The doc here is only a preview, please check the man page (`man sk`) for a full
 list of options.
 .
 ## Keymap
 .
 Specify the bindings with comma separated pairs (no space allowed), example:
 .
 ```sh
 sk --bind 'alt-a:select-all,alt-d:deselect-all'
 ```
 .
 Additionally, use `+` to concatenate actions, such as `execute-silent(echo {} |
 pbcopy)+abort`.
 .
 See the *KEY BINDINGS* section of the man page for details.
 .
 ## Sort Criteria
 .
 There are five sort keys for results: `score, index, begin, end, length`, you
 can
 specify how the records are sorted by `sk --tiebreak score,index,-begin` or any
 other order you want.
 .
 ## Color Scheme
 .
 It is a high chance that you are a better artist than me. Luckily you won't
 be stuck with the default colors, `skim` supports customization of the color
 scheme.
 .
 ```sh
 --color=[BASE_SCHEME][,COLOR:ANSI]
 ```
 .
 The configuration of colors starts with the name of the base color scheme,
 followed by custom color mappings. For example:
 .
 ```sh
 sk --color=current_bg:24
 sk --color=light,fg:232,bg:255,current_bg:116,info:27
 ```
 .
 See `--color` option in the man page for details.
 .
 ## Misc
 .
 - `--ansi`: to parse ANSI color codes (e.g., `\e[32mABC`) of the data source
 - `--regex`: use the query as regular expression to match the data source
 .
 # Advanced Topics
 .
 ## Interactive mode
 .
 With "interactive mode", you could invoke command dynamically. Try out:
 .
 ```sh
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 How it works?
 .
 ![skim's interactive
 mode](https://user-images.githubusercontent.com/1527040/53381293-461ce380-39ab-11e9-8e86-7c3bbfd557bc.png)
 .
 - Skim could accept two kinds of source: command output or piped input
 - Skim has two kinds of prompts: A query prompt to specify the query pattern
 and a
     command prompt to specify the "arguments" of the command
 - `-c` is used to specify the command to execute while defaults to
 `SKIM_DEFAULT_COMMAND`
 - `-i` is to tell skim open command prompt on startup, which will show `c>` by
 default.
 .
 If you want to further narrow down the results returned by the command, press
 `Ctrl-Q` to toggle interactive mode.
 .
 ## Executing external programs
 .
 You can set up key bindings for starting external processes without leaving
 skim (`execute`, `execute-silent`).
 .
 ```sh
 # Press F1 to open the file with less without leaving skim
 # Press CTRL-Y to copy the line to clipboard and aborts skim (requires pbcopy)
 sk --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} |
 pbcopy)+abort'
 ```
 .
 ## Preview Window
 .
 This is a great feature of fzf that skim borrows. For example, we use 'ag' to
 find the matched lines, once we narrow down to the target lines, we want to
 finally decide which lines to pick by checking the context around the line.
 `grep` and `ag` has an option `--context`, skim can do better with preview
 window. For example:
 .
 ```sh
 sk --ansi -i -c 'ag --color "{}"' --preview "preview.sh {}"
 ```
 .
 (Note the
 [preview.sh](https://github.com/junegunn/fzf.vim/blob/master/bin/preview.sh) is
 a script to print the context given filename:lines:columns)
 You got things like this:
 .
 ![preview
 demo](https://user-images.githubusercontent.com/1527040/30677573-0cee622e-9ebf-11e7-8316-c741324ecb3a.png)
 .
 ### How does it work?
 .
 If the preview command is given by the `--preview` option, skim will replace
 the
 `{}` with the current highlighted line surrounded by single quotes, call the
 command to get the output, and print the output on the preview window.
 .
 Sometimes you don't need the whole line for invoking the command. In this case
 you can use `{}`, `{1..}`, `{..3}` or `{1..5}` to select the fields. The
 syntax is explained in the section "Fields Support".
 .
 Last, you might want to configure the position of preview windows, use
 `--preview-window`.
 .
 - `--preview-window up:30%` to put the window in the up position with height
     30% of the total height of skim.
 - `--preview-window left:10:wrap`, to specify the `wrap` allows the preview
     window to wrap the output of the preview command.
 - `--preview-window wrap:hidden` to hide the preview window at startup, later
     it can be shown by the action `toggle-preview`.
 .
 ## Fields support
 .
 Normally only plugin users need to understand this.
 .
 For example, you have the data source with the format:
 .
 ```sh
 <filename>:<line number>:<column number>
 ```
 .
 However, you want to search `<filename>` only when typing in queries. That
 means when you type `21`, you want to find a `<filename>` that contains `21`,
 but not matching line number or column number.
 .
 You can use `sk --delimiter ':' --nth 1` to achieve this.
 .
 Also you can use `--with-nth` to re-arrange the order of fields.
 .
 **Range Syntax**
 .
 - `<num>` -- to specify the `num`-th fields, starting with 1.
 - `start..` -- starting from the `start`-th fields, and the rest.
 - `..end` -- starting from the `0`-th field, all the way to `end`-th field,
     including `end`.
 - `start..end` -- starting from `start`-th field, all the way to `end`-th
     field, including `end`.
 .
 ## Use as a library
 .
 Skim can be used as a library in your Rust crates.
 .
 First, add skim into your `Cargo.toml`:
 .
 ```toml
 [dependencies]
 skim = "*"
 ```
 .
 Then try to run this simple example:
 .
 ```rust
 extern crate skim;
 use skim::prelude::*;
 use std::io::Cursor;
 .
 pub fn main() {
     let options = SkimOptionsBuilder::default()
         .height(Some("50%"))
         .multi(true)
         .build()
         .unwrap();
 .
     let input = "aaaaa\nbbbb\nccc".to_string();
 .
     // `SkimItemReader` is a helper to turn any `BufRead` into a stream of
 `SkimItem`
     // `SkimItem` was implemented for `AsRef<str>` by default
     let item_reader = SkimItemReader::default();
     let items = item_reader.of_bufread(Cursor::new(input));
 .
     // `run_with` would read and show items from the stream
     let selected_items = Skim::run_with(&options, Some(items))
         .map(|out| out.selected_items)
         .unwrap_or_else(|| Vec::new());
 .
     for item in selected_items.iter() {
         print!("{}{}", item.output(), "\n");
     }
 }
 ```
 .
 Given an `Option<SkimItemReceiver>`, skim will read items accordingly, do its
 job and bring us back the user selection including the selected items, the
 query, etc. Note that:
 .
 - `SkimItemReceiver` is `crossbeam::channel::Receiver<Arc<dyn SkimItem>>`
 - If it is none, it will invoke the given command and read items from command
 output
 - Otherwise, it will read the items from the (crossbeam) channel.
 .
 Trait `SkimItem` is provided to customize how a line could be displayed,
 compared and previewed. It is implemented by default for `AsRef<str>`
 .
 Plus, `SkimItemReader` is a helper to convert a `BufRead` into
 `SkimItemReceiver` (we can easily turn a `File` for `String` into `BufRead`).
 So that you could deal with strings or files easily.
 .
 Check more examples under
 [examples/](https://github.com/lotabout/skim/tree/master/examples) directory.
 .
 # FAQ
 .
 ## How to ignore files?
 .
 Skim invokes `find .` to fetch a list of files for filtering. You can override
 that by setting the environment variable `SKIM_DEFAULT_COMMAND`. For example:
 .
 ```sh
 SKIM_DEFAULT_COMMAND="fd --type f || git ls-tree -r --name-only HEAD || rg
 --files || find ."
 sk
 ```
 .
 You could put it in your `.bashrc` or `.zshrc` if you like it to be default.
 .
 ## Some files are not shown in Vim plugin
 .
 If you use the Vim plugin and execute the `:SK` command, you might find some
 of your files not shown.
 .
 As described in [#3](https://github.com/lotabout/skim/issues/3), in the Vim
 plugin, `SKIM_DEFAULT_COMMAND` is set to the command by default:
 .
 ```vim
 let $SKIM_DEFAULT_COMMAND = "git ls-tree -r --name-only HEAD || rg --files ||
 ag -l -g \"\" || find ."
 ```
 .
 That means, the files not recognized by git will not shown. Either override the
 default with `let $SKIM_DEFAULT_COMMAND = ''` or find the missing file by
 yourself.
 .
 # Differences to fzf
 .
 [fzf](https://github.com/junegunn/fzf) is a command-line fuzzy finder written
 in Go and [skim](https://github.com/lotabout/skim) tries to implement a new one
 in Rust!
 .
 This project is written from scratch. Some decisions of implementation are
 different from fzf. For example:
 .
 1. `skim` is a binary as well as a library while fzf is only a binary.
 2. `skim` has an interactive mode.
 3. `skim` supports pre-selection
 4. The fuzzy search algorithm is different.
 5. ~~UI of showing matched items. `fzf` will show only the range matched while
    `skim` will show each character matched.~~ (fzf has this now)
 6. ~~`skim`'s range syntax is Git style~~: now it is the same with fzf.
 .
 # How to contribute
 .
 [Create new issues](https://github.com/lotabout/skim/issues/new) if you meet
 any bugs
 or have any ideas. Pull requests are warmly welcomed.
 .
 # Troubleshooting
 .
 ## No line feed issues with nix , FreeBSD, termux
 .
 If you encounter display issues like:
 .
 ```bash
 $ for n in {1..10}; do echo "$n"; done | sk
   0/10 0/0.> 10/10  10  9  8  7  6  5  4  3  2> 1
 ```
 .
 For example
 .
 - <https://github.com/lotabout/skim/issues/412>
 - <https://github.com/lotabout/skim/issues/455>
 .
 You need to set TERMINFO or TERMINFO_DIRS to the path to a correct terminfo
 database path
 .
 For example, with termux, you can add in your bashr:
 .
 ```
 export TERMINFO=/data/data/com.termux/files/usr/share/terminfo
 ```

Package: two-percent
Version: 0.12.5-1
Architecture: amd64
Maintainer: Zhang Jinzhou <lotabout@gmail.com>
Installed-Size: 5162
Depends: libc6 (>= 2.29)
Filename: ./two-percent_0.12.5-1_amd64.deb
Size: 1503532
MD5sum: 3b12d3e463dff82aa998e378ecc85f8e
SHA1: 30ddb7678ddd9770d968e30847fb746f49efb792
SHA256: feb86e626201668a34dcd00def9023a81284cb45376cef5aad2c384301bbe373
Priority: optional
Homepage: https://github.com/kimono-koans/two_percent
Description: Fuzzy Finder in rust!
 <p align="center">
   <a href="https://crates.io/crates/skim">
     <img src="https://img.shields.io/crates/v/skim.svg" alt="Crates.io" />
   </a>
   <a
 href="https://github.com/lotabout/skim/actions?query=workflow%3A%22Build+%26+Test%22">
     <img
 src="https://github.com/lotabout/skim/workflows/Build%20&%20Test/badge.svg"
 alt="Build & Test" />
   </a>
   <a href="https://repology.org/project/skim/versions">
     <img src="https://repology.org/badge/tiny-repos/skim.svg" alt="Packaging
 status" />
   </a>
   <a href="https://discord.gg/23PuxttufP">
     <img alt="Skim Discord"
 src="https://img.shields.io/discord/1031830957432504361?label=&color=7389d8&labelColor=6a7ec2&logoColor=ffffff&logo=discord"
 />
   </a>
 </p>
 .
 *Note: `two_percent` is a fork of
 [skim](https://github.com/lotabout/skim/tree/291fc34c58b1670a5e8c95f1e8f930b82c030b19)
 for use with [httm](https://github.com/kimono-koans/httm).*
 .
 > Life is short, skim!
 .
 Half of our life is spent on navigation: files, lines, commands… You need
 skim!
 It is a general fuzzy finder that saves you time.
 .
 [![skim
 demo](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm.svg)](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm)
 .
 skim provides a single executable: `sk`. Basically anywhere you would want to
 use
 `grep`, try `sk` instead.
 .
 # Table of contents
 .
 - [Installation](#installation)
 - [Usage](#usage)
   - [As Filter](#as-filter)
   - [As Interactive Interface](#as-interactive-interface)
   - [Key Bindings](#key-bindings)
   - [Search Syntax](#search-syntax)
   - [Exit code](#exit-code)
 - [Customization](#customization)
   - [Keymap to redefine](#keymap)
   - [Sort Criteria](#sort-criteria)
   - [Color Scheme](#color-scheme)
   - [Misc](#misc)
 - [Advance Topics](#advance-topics)
   - [Interactive Mode](#interactive-mode)
   - [Executing external programs](#executing-external-programs)
   - [Preview Window](#preview-window)
   - [Fields Support](#fields-support)
   - [Use as a Library](#use-as-a-library)
 - [FAQ](#faq)
   - [How to ignore files?](#how-to-ignore-files)
   - [Some files are not shown in vim
 plugin](#some-files-are-not-shown-in-vim-plugin)
 - [Differences to fzf](#differences-to-fzf)
 - [How to contribute](#how-to-contribute)
 .
 # Installation
 .
 The skim project contains several components:
 .
 1. `sk` executable -- the core.
 2. `sk-tmux` -- script for launching `sk` in a tmux pane.
 3. Vim/Nvim plugin -- to call `sk` inside Vim/Nvim. check
 [skim.vim](https://github.com/lotabout/skim.vim) for more Vim support.
 .
 ## Package Managers
 .
 | Distribution   | Package Manager   | Command                      |
 | -------------- | ----------------- | ---------------------------- |
 | macOS          | Homebrew          | `brew install sk`            |
 | macOS          | MacPorts          | `sudo port install skim`     |
 | Fedora         | dnf               | `dnf install skim`           |
 | Alpine         | apk               | `apk add skim`               |
 | Arch           | pacman            | `pacman -S skim`             |
 | Gentoo         | Portage           | `emerge --ask app-misc/skim` |
 .
 See [repology](https://repology.org/project/skim/versions) for a comprehensive
 overview of package availability.
 .
 ## Install as Vim plugin
 .
 Via vim-plug (recommended):
 .
 ```vim
 Plug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install' }
 ```
 .
 ## Hard Core
 .
 Any of the following applies:
 .
 - Using Git
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     ~/.skim/install
     ```
 .
 - Using Binary: directly [download the sk
 executable](https://github.com/lotabout/skim/releases).
 - Install from [crates.io](https://crates.io/): `cargo install skim`
 - Build Manually
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     cd ~/.skim
     cargo install
     cargo build --release
     # put the resulting `target/release/sk` executable on your PATH.
     ```
 .
 # Usage
 .
 skim can be used as a general filter (like `grep`) or as an interactive
 interface for invoking commands.
 .
 ## As filter
 .
 Try the following
 .
 ```bash
 # directly invoke skim
 sk
 .
 # or pipe some input to it: (press TAB key select multiple items with -m
 enabled)
 vim $(find . -name "*.rs" | sk -m)
 ```
 .
 The above command will allow you to select files with ".rs" extension and open
 the ones you selected in Vim.
 .
 ## As Interactive Interface
 .
 `skim` can invoke other commands dynamically. Normally you would want to
 integrate it with [grep](https://www.gnu.org/software/grep/),
 [ack](https://github.com/petdance/ack2),
 [ag](https://github.com/ggreer/the_silver_searcher), or
 [rg](https://github.com/BurntSushi/ripgrep) for searching contents in a
 project directory:
 .
 ```sh
 # works with grep
 sk --ansi -i -c 'grep -rI --color=always --line-number "{}" .'
 # works with ack
 sk --ansi -i -c 'ack --color "{}"'
 # works with ag
 sk --ansi -i -c 'ag --color "{}"'
 # works with rg
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 ![interactive mode
 demo](https://cloud.githubusercontent.com/assets/1527040/21603930/655d859a-d1db-11e6-9fec-c25099d30a12.gif)
 .
 ## Key Bindings
 .
 Some commonly used key bindings:
 .
 | Key               | Action                                     |
 |------------------:|--------------------------------------------|
 | Enter             | Accept (select current one and quit)       |
 | ESC/Ctrl-G        | Abort                                      |
 | Ctrl-P/Up         | Move cursor up                             |
 | Ctrl-N/Down       | Move cursor Down                           |
 | TAB               | Toggle selection and move down (with `-m`) |
 | Shift-TAB         | Toggle selection and move up (with `-m`)   |
 .
 For full list of key bindings, check out the [man
 page](https://github.com/lotabout/skim/blob/master/man/man1/sk.1) (`man sk`).
 .
 ## Search Syntax
 .
 `skim` borrowed `fzf`'s syntax for matching items:
 .
 | Token    | Match type                 | Description                       |
 |----------|----------------------------|-----------------------------------|
 | `text`   | fuzzy-match                | items that match `text`           |
 | `^music` | prefix-exact-match         | items that start with `music`     |
 | `.mp3$`  | suffix-exact-match         | items that end with `.mp3`        |
 | `'wild`  | exact-match (quoted)       | items that include `wild`         |
 | `!fire`  | inverse-exact-match        | items that do not include `fire`  |
 | `!.mp3$` | inverse-suffix-exact-match | items that do not end with `.mp3` |
 .
 `skim` also supports the combination of tokens.
 .
 - Whitespace has the meaning of `AND`. With the term `src main`, `skim` will
 search
     for items that match **both** `src` and `main`.
 - ` | ` means `OR` (note the spaces around `|`). With the term `.md$ |
     .markdown$`, `skim` will search for items ends with either `.md` or
     `.markdown`.
 - `OR` has higher precedence. So `readme .md$ | .markdown$` is grouped into
     `readme AND (.md$ OR .markdown$)`.
 .
 In case that you want to use regular expressions, `skim` provides `regex` mode:
 .
 ```sh
 sk --regex
 ```
 .
 You can switch to `regex` mode dynamically by pressing `Ctrl-R` (Rotate Mode).
 .
 ## exit code
 .
 | Exit Code | Meaning                           |
 |-----------|-----------------------------------|
 | 0         | Exit normally                     |
 | 1         | No Match found                    |
 | 130       | Abort by Ctrl-C/Ctrl-G/ESC/etc... |
 .
 # Customization
 .
 The doc here is only a preview, please check the man page (`man sk`) for a full
 list of options.
 .
 ## Keymap
 .
 Specify the bindings with comma separated pairs (no space allowed), example:
 .
 ```sh
 sk --bind 'alt-a:select-all,alt-d:deselect-all'
 ```
 .
 Additionally, use `+` to concatenate actions, such as `execute-silent(echo {} |
 pbcopy)+abort`.
 .
 See the *KEY BINDINGS* section of the man page for details.
 .
 ## Sort Criteria
 .
 There are five sort keys for results: `score, index, begin, end, length`, you
 can
 specify how the records are sorted by `sk --tiebreak score,index,-begin` or any
 other order you want.
 .
 ## Color Scheme
 .
 It is a high chance that you are a better artist than me. Luckily you won't
 be stuck with the default colors, `skim` supports customization of the color
 scheme.
 .
 ```sh
 --color=[BASE_SCHEME][,COLOR:ANSI]
 ```
 .
 The configuration of colors starts with the name of the base color scheme,
 followed by custom color mappings. For example:
 .
 ```sh
 sk --color=current_bg:24
 sk --color=light,fg:232,bg:255,current_bg:116,info:27
 ```
 .
 See `--color` option in the man page for details.
 .
 ## Misc
 .
 - `--ansi`: to parse ANSI color codes (e.g., `\e[32mABC`) of the data source
 - `--regex`: use the query as regular expression to match the data source
 .
 # Advanced Topics
 .
 ## Interactive mode
 .
 With "interactive mode", you could invoke command dynamically. Try out:
 .
 ```sh
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 How it works?
 .
 ![skim's interactive
 mode](https://user-images.githubusercontent.com/1527040/53381293-461ce380-39ab-11e9-8e86-7c3bbfd557bc.png)
 .
 - Skim could accept two kinds of source: command output or piped input
 - Skim has two kinds of prompts: A query prompt to specify the query pattern
 and a
     command prompt to specify the "arguments" of the command
 - `-c` is used to specify the command to execute while defaults to
 `SKIM_DEFAULT_COMMAND`
 - `-i` is to tell skim open command prompt on startup, which will show `c>` by
 default.
 .
 If you want to further narrow down the results returned by the command, press
 `Ctrl-Q` to toggle interactive mode.
 .
 ## Executing external programs
 .
 You can set up key bindings for starting external processes without leaving
 skim (`execute`, `execute-silent`).
 .
 ```sh
 # Press F1 to open the file with less without leaving skim
 # Press CTRL-Y to copy the line to clipboard and aborts skim (requires pbcopy)
 sk --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} |
 pbcopy)+abort'
 ```
 .
 ## Preview Window
 .
 This is a great feature of fzf that skim borrows. For example, we use 'ag' to
 find the matched lines, once we narrow down to the target lines, we want to
 finally decide which lines to pick by checking the context around the line.
 `grep` and `ag` has an option `--context`, skim can do better with preview
 window. For example:
 .
 ```sh
 sk --ansi -i -c 'ag --color "{}"' --preview "preview.sh {}"
 ```
 .
 (Note the
 [preview.sh](https://github.com/junegunn/fzf.vim/blob/master/bin/preview.sh) is
 a script to print the context given filename:lines:columns)
 You got things like this:
 .
 ![preview
 demo](https://user-images.githubusercontent.com/1527040/30677573-0cee622e-9ebf-11e7-8316-c741324ecb3a.png)
 .
 ### How does it work?
 .
 If the preview command is given by the `--preview` option, skim will replace
 the
 `{}` with the current highlighted line surrounded by single quotes, call the
 command to get the output, and print the output on the preview window.
 .
 Sometimes you don't need the whole line for invoking the command. In this case
 you can use `{}`, `{1..}`, `{..3}` or `{1..5}` to select the fields. The
 syntax is explained in the section "Fields Support".
 .
 Last, you might want to configure the position of preview windows, use
 `--preview-window`.
 .
 - `--preview-window up:30%` to put the window in the up position with height
     30% of the total height of skim.
 - `--preview-window left:10:wrap`, to specify the `wrap` allows the preview
     window to wrap the output of the preview command.
 - `--preview-window wrap:hidden` to hide the preview window at startup, later
     it can be shown by the action `toggle-preview`.
 .
 ## Fields support
 .
 Normally only plugin users need to understand this.
 .
 For example, you have the data source with the format:
 .
 ```sh
 <filename>:<line number>:<column number>
 ```
 .
 However, you want to search `<filename>` only when typing in queries. That
 means when you type `21`, you want to find a `<filename>` that contains `21`,
 but not matching line number or column number.
 .
 You can use `sk --delimiter ':' --nth 1` to achieve this.
 .
 Also you can use `--with-nth` to re-arrange the order of fields.
 .
 **Range Syntax**
 .
 - `<num>` -- to specify the `num`-th fields, starting with 1.
 - `start..` -- starting from the `start`-th fields, and the rest.
 - `..end` -- starting from the `0`-th field, all the way to `end`-th field,
     including `end`.
 - `start..end` -- starting from `start`-th field, all the way to `end`-th
     field, including `end`.
 .
 ## Use as a library
 .
 Skim can be used as a library in your Rust crates.
 .
 First, add skim into your `Cargo.toml`:
 .
 ```toml
 [dependencies]
 skim = "*"
 ```
 .
 Then try to run this simple example:
 .
 ```rust
 extern crate skim;
 use skim::prelude::*;
 use std::io::Cursor;
 .
 pub fn main() {
     let options = SkimOptionsBuilder::default()
         .height(Some("50%"))
         .multi(true)
         .build()
         .unwrap();
 .
     let input = "aaaaa\nbbbb\nccc".to_string();
 .
     // `SkimItemReader` is a helper to turn any `BufRead` into a stream of
 `SkimItem`
     // `SkimItem` was implemented for `AsRef<str>` by default
     let item_reader = SkimItemReader::default();
     let items = item_reader.of_bufread(Cursor::new(input));
 .
     // `run_with` would read and show items from the stream
     let selected_items = Skim::run_with(&options, Some(items))
         .map(|out| out.selected_items)
         .unwrap_or_else(|| Vec::new());
 .
     for item in selected_items.iter() {
         print!("{}{}", item.output(), "\n");
     }
 }
 ```
 .
 Given an `Option<SkimItemReceiver>`, skim will read items accordingly, do its
 job and bring us back the user selection including the selected items, the
 query, etc. Note that:
 .
 - `SkimItemReceiver` is `crossbeam::channel::Receiver<Arc<dyn SkimItem>>`
 - If it is none, it will invoke the given command and read items from command
 output
 - Otherwise, it will read the items from the (crossbeam) channel.
 .
 Trait `SkimItem` is provided to customize how a line could be displayed,
 compared and previewed. It is implemented by default for `AsRef<str>`
 .
 Plus, `SkimItemReader` is a helper to convert a `BufRead` into
 `SkimItemReceiver` (we can easily turn a `File` for `String` into `BufRead`).
 So that you could deal with strings or files easily.
 .
 Check more examples under
 [examples/](https://github.com/lotabout/skim/tree/master/examples) directory.
 .
 # FAQ
 .
 ## How to ignore files?
 .
 Skim invokes `find .` to fetch a list of files for filtering. You can override
 that by setting the environment variable `SKIM_DEFAULT_COMMAND`. For example:
 .
 ```sh
 SKIM_DEFAULT_COMMAND="fd --type f || git ls-tree -r --name-only HEAD || rg
 --files || find ."
 sk
 ```
 .
 You could put it in your `.bashrc` or `.zshrc` if you like it to be default.
 .
 ## Some files are not shown in Vim plugin
 .
 If you use the Vim plugin and execute the `:SK` command, you might find some
 of your files not shown.
 .
 As described in [#3](https://github.com/lotabout/skim/issues/3), in the Vim
 plugin, `SKIM_DEFAULT_COMMAND` is set to the command by default:
 .
 ```vim
 let $SKIM_DEFAULT_COMMAND = "git ls-tree -r --name-only HEAD || rg --files ||
 ag -l -g \"\" || find ."
 ```
 .
 That means, the files not recognized by git will not shown. Either override the
 default with `let $SKIM_DEFAULT_COMMAND = ''` or find the missing file by
 yourself.
 .
 # Differences to fzf
 .
 [fzf](https://github.com/junegunn/fzf) is a command-line fuzzy finder written
 in Go and [skim](https://github.com/lotabout/skim) tries to implement a new one
 in Rust!
 .
 This project is written from scratch. Some decisions of implementation are
 different from fzf. For example:
 .
 1. `skim` is a binary as well as a library while fzf is only a binary.
 2. `skim` has an interactive mode.
 3. `skim` supports pre-selection
 4. The fuzzy search algorithm is different.
 5. ~~UI of showing matched items. `fzf` will show only the range matched while
    `skim` will show each character matched.~~ (fzf has this now)
 6. ~~`skim`'s range syntax is Git style~~: now it is the same with fzf.
 .
 # How to contribute
 .
 [Create new issues](https://github.com/lotabout/skim/issues/new) if you meet
 any bugs
 or have any ideas. Pull requests are warmly welcomed.
 .
 # Troubleshooting
 .
 ## No line feed issues with nix , FreeBSD, termux
 .
 If you encounter display issues like:
 .
 ```bash
 $ for n in {1..10}; do echo "$n"; done | sk
   0/10 0/0.> 10/10  10  9  8  7  6  5  4  3  2> 1
 ```
 .
 For example
 .
 - <https://github.com/lotabout/skim/issues/412>
 - <https://github.com/lotabout/skim/issues/455>
 .
 You need to set TERMINFO or TERMINFO_DIRS to the path to a correct terminfo
 database path
 .
 For example, with termux, you can add in your bashr:
 .
 ```
 export TERMINFO=/data/data/com.termux/files/usr/share/terminfo
 ```

Package: two-percent
Version: 0.12.6-1
Architecture: amd64
Maintainer: Zhang Jinzhou <lotabout@gmail.com>
Installed-Size: 5170
Depends: libc6 (>= 2.29)
Filename: ./two-percent_0.12.6-1_amd64.deb
Size: 1507204
MD5sum: 39fb3e8c5990da07b8251dc81920ec88
SHA1: bc8a46628e7a911afe5848490f1430c0dec6727a
SHA256: 35c1f5e4793565acd7577c0abf7c133e16905217035be1d525615fea525ff79f
Priority: optional
Homepage: https://github.com/kimono-koans/two_percent
Description: Fuzzy Finder in rust!
 <p align="center">
   <a href="https://crates.io/crates/skim">
     <img src="https://img.shields.io/crates/v/skim.svg" alt="Crates.io" />
   </a>
   <a
 href="https://github.com/lotabout/skim/actions?query=workflow%3A%22Build+%26+Test%22">
     <img
 src="https://github.com/lotabout/skim/workflows/Build%20&%20Test/badge.svg"
 alt="Build & Test" />
   </a>
   <a href="https://repology.org/project/skim/versions">
     <img src="https://repology.org/badge/tiny-repos/skim.svg" alt="Packaging
 status" />
   </a>
   <a href="https://discord.gg/23PuxttufP">
     <img alt="Skim Discord"
 src="https://img.shields.io/discord/1031830957432504361?label=&color=7389d8&labelColor=6a7ec2&logoColor=ffffff&logo=discord"
 />
   </a>
 </p>
 .
 *Note: `two_percent` is a fork of
 [skim](https://github.com/lotabout/skim/tree/291fc34c58b1670a5e8c95f1e8f930b82c030b19)
 for use with [httm](https://github.com/kimono-koans/httm).*
 .
 > Life is short, skim!
 .
 Half of our life is spent on navigation: files, lines, commands… You need
 skim!
 It is a general fuzzy finder that saves you time.
 .
 [![skim
 demo](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm.svg)](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm)
 .
 skim provides a single executable: `sk`. Basically anywhere you would want to
 use
 `grep`, try `sk` instead.
 .
 # Table of contents
 .
 - [Installation](#installation)
 - [Usage](#usage)
   - [As Filter](#as-filter)
   - [As Interactive Interface](#as-interactive-interface)
   - [Key Bindings](#key-bindings)
   - [Search Syntax](#search-syntax)
   - [Exit code](#exit-code)
 - [Customization](#customization)
   - [Keymap to redefine](#keymap)
   - [Sort Criteria](#sort-criteria)
   - [Color Scheme](#color-scheme)
   - [Misc](#misc)
 - [Advance Topics](#advance-topics)
   - [Interactive Mode](#interactive-mode)
   - [Executing external programs](#executing-external-programs)
   - [Preview Window](#preview-window)
   - [Fields Support](#fields-support)
   - [Use as a Library](#use-as-a-library)
 - [FAQ](#faq)
   - [How to ignore files?](#how-to-ignore-files)
   - [Some files are not shown in vim
 plugin](#some-files-are-not-shown-in-vim-plugin)
 - [Differences to fzf](#differences-to-fzf)
 - [How to contribute](#how-to-contribute)
 .
 # Installation
 .
 The skim project contains several components:
 .
 1. `sk` executable -- the core.
 2. `sk-tmux` -- script for launching `sk` in a tmux pane.
 3. Vim/Nvim plugin -- to call `sk` inside Vim/Nvim. check
 [skim.vim](https://github.com/lotabout/skim.vim) for more Vim support.
 .
 ## Package Managers
 .
 | Distribution   | Package Manager   | Command                      |
 | -------------- | ----------------- | ---------------------------- |
 | macOS          | Homebrew          | `brew install sk`            |
 | macOS          | MacPorts          | `sudo port install skim`     |
 | Fedora         | dnf               | `dnf install skim`           |
 | Alpine         | apk               | `apk add skim`               |
 | Arch           | pacman            | `pacman -S skim`             |
 | Gentoo         | Portage           | `emerge --ask app-misc/skim` |
 .
 See [repology](https://repology.org/project/skim/versions) for a comprehensive
 overview of package availability.
 .
 ## Install as Vim plugin
 .
 Via vim-plug (recommended):
 .
 ```vim
 Plug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install' }
 ```
 .
 ## Hard Core
 .
 Any of the following applies:
 .
 - Using Git
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     ~/.skim/install
     ```
 .
 - Using Binary: directly [download the sk
 executable](https://github.com/lotabout/skim/releases).
 - Install from [crates.io](https://crates.io/): `cargo install skim`
 - Build Manually
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     cd ~/.skim
     cargo install
     cargo build --release
     # put the resulting `target/release/sk` executable on your PATH.
     ```
 .
 # Usage
 .
 skim can be used as a general filter (like `grep`) or as an interactive
 interface for invoking commands.
 .
 ## As filter
 .
 Try the following
 .
 ```bash
 # directly invoke skim
 sk
 .
 # or pipe some input to it: (press TAB key select multiple items with -m
 enabled)
 vim $(find . -name "*.rs" | sk -m)
 ```
 .
 The above command will allow you to select files with ".rs" extension and open
 the ones you selected in Vim.
 .
 ## As Interactive Interface
 .
 `skim` can invoke other commands dynamically. Normally you would want to
 integrate it with [grep](https://www.gnu.org/software/grep/),
 [ack](https://github.com/petdance/ack2),
 [ag](https://github.com/ggreer/the_silver_searcher), or
 [rg](https://github.com/BurntSushi/ripgrep) for searching contents in a
 project directory:
 .
 ```sh
 # works with grep
 sk --ansi -i -c 'grep -rI --color=always --line-number "{}" .'
 # works with ack
 sk --ansi -i -c 'ack --color "{}"'
 # works with ag
 sk --ansi -i -c 'ag --color "{}"'
 # works with rg
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 ![interactive mode
 demo](https://cloud.githubusercontent.com/assets/1527040/21603930/655d859a-d1db-11e6-9fec-c25099d30a12.gif)
 .
 ## Key Bindings
 .
 Some commonly used key bindings:
 .
 | Key               | Action                                     |
 |------------------:|--------------------------------------------|
 | Enter             | Accept (select current one and quit)       |
 | ESC/Ctrl-G        | Abort                                      |
 | Ctrl-P/Up         | Move cursor up                             |
 | Ctrl-N/Down       | Move cursor Down                           |
 | TAB               | Toggle selection and move down (with `-m`) |
 | Shift-TAB         | Toggle selection and move up (with `-m`)   |
 .
 For full list of key bindings, check out the [man
 page](https://github.com/lotabout/skim/blob/master/man/man1/sk.1) (`man sk`).
 .
 ## Search Syntax
 .
 `skim` borrowed `fzf`'s syntax for matching items:
 .
 | Token    | Match type                 | Description                       |
 |----------|----------------------------|-----------------------------------|
 | `text`   | fuzzy-match                | items that match `text`           |
 | `^music` | prefix-exact-match         | items that start with `music`     |
 | `.mp3$`  | suffix-exact-match         | items that end with `.mp3`        |
 | `'wild`  | exact-match (quoted)       | items that include `wild`         |
 | `!fire`  | inverse-exact-match        | items that do not include `fire`  |
 | `!.mp3$` | inverse-suffix-exact-match | items that do not end with `.mp3` |
 .
 `skim` also supports the combination of tokens.
 .
 - Whitespace has the meaning of `AND`. With the term `src main`, `skim` will
 search
     for items that match **both** `src` and `main`.
 - ` | ` means `OR` (note the spaces around `|`). With the term `.md$ |
     .markdown$`, `skim` will search for items ends with either `.md` or
     `.markdown`.
 - `OR` has higher precedence. So `readme .md$ | .markdown$` is grouped into
     `readme AND (.md$ OR .markdown$)`.
 .
 In case that you want to use regular expressions, `skim` provides `regex` mode:
 .
 ```sh
 sk --regex
 ```
 .
 You can switch to `regex` mode dynamically by pressing `Ctrl-R` (Rotate Mode).
 .
 ## exit code
 .
 | Exit Code | Meaning                           |
 |-----------|-----------------------------------|
 | 0         | Exit normally                     |
 | 1         | No Match found                    |
 | 130       | Abort by Ctrl-C/Ctrl-G/ESC/etc... |
 .
 # Customization
 .
 The doc here is only a preview, please check the man page (`man sk`) for a full
 list of options.
 .
 ## Keymap
 .
 Specify the bindings with comma separated pairs (no space allowed), example:
 .
 ```sh
 sk --bind 'alt-a:select-all,alt-d:deselect-all'
 ```
 .
 Additionally, use `+` to concatenate actions, such as `execute-silent(echo {} |
 pbcopy)+abort`.
 .
 See the *KEY BINDINGS* section of the man page for details.
 .
 ## Sort Criteria
 .
 There are five sort keys for results: `score, index, begin, end, length`, you
 can
 specify how the records are sorted by `sk --tiebreak score,index,-begin` or any
 other order you want.
 .
 ## Color Scheme
 .
 It is a high chance that you are a better artist than me. Luckily you won't
 be stuck with the default colors, `skim` supports customization of the color
 scheme.
 .
 ```sh
 --color=[BASE_SCHEME][,COLOR:ANSI]
 ```
 .
 The configuration of colors starts with the name of the base color scheme,
 followed by custom color mappings. For example:
 .
 ```sh
 sk --color=current_bg:24
 sk --color=light,fg:232,bg:255,current_bg:116,info:27
 ```
 .
 See `--color` option in the man page for details.
 .
 ## Misc
 .
 - `--ansi`: to parse ANSI color codes (e.g., `\e[32mABC`) of the data source
 - `--regex`: use the query as regular expression to match the data source
 .
 # Advanced Topics
 .
 ## Interactive mode
 .
 With "interactive mode", you could invoke command dynamically. Try out:
 .
 ```sh
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 How it works?
 .
 ![skim's interactive
 mode](https://user-images.githubusercontent.com/1527040/53381293-461ce380-39ab-11e9-8e86-7c3bbfd557bc.png)
 .
 - Skim could accept two kinds of source: command output or piped input
 - Skim has two kinds of prompts: A query prompt to specify the query pattern
 and a
     command prompt to specify the "arguments" of the command
 - `-c` is used to specify the command to execute while defaults to
 `SKIM_DEFAULT_COMMAND`
 - `-i` is to tell skim open command prompt on startup, which will show `c>` by
 default.
 .
 If you want to further narrow down the results returned by the command, press
 `Ctrl-Q` to toggle interactive mode.
 .
 ## Executing external programs
 .
 You can set up key bindings for starting external processes without leaving
 skim (`execute`, `execute-silent`).
 .
 ```sh
 # Press F1 to open the file with less without leaving skim
 # Press CTRL-Y to copy the line to clipboard and aborts skim (requires pbcopy)
 sk --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} |
 pbcopy)+abort'
 ```
 .
 ## Preview Window
 .
 This is a great feature of fzf that skim borrows. For example, we use 'ag' to
 find the matched lines, once we narrow down to the target lines, we want to
 finally decide which lines to pick by checking the context around the line.
 `grep` and `ag` has an option `--context`, skim can do better with preview
 window. For example:
 .
 ```sh
 sk --ansi -i -c 'ag --color "{}"' --preview "preview.sh {}"
 ```
 .
 (Note the
 [preview.sh](https://github.com/junegunn/fzf.vim/blob/master/bin/preview.sh) is
 a script to print the context given filename:lines:columns)
 You got things like this:
 .
 ![preview
 demo](https://user-images.githubusercontent.com/1527040/30677573-0cee622e-9ebf-11e7-8316-c741324ecb3a.png)
 .
 ### How does it work?
 .
 If the preview command is given by the `--preview` option, skim will replace
 the
 `{}` with the current highlighted line surrounded by single quotes, call the
 command to get the output, and print the output on the preview window.
 .
 Sometimes you don't need the whole line for invoking the command. In this case
 you can use `{}`, `{1..}`, `{..3}` or `{1..5}` to select the fields. The
 syntax is explained in the section "Fields Support".
 .
 Last, you might want to configure the position of preview windows, use
 `--preview-window`.
 .
 - `--preview-window up:30%` to put the window in the up position with height
     30% of the total height of skim.
 - `--preview-window left:10:wrap`, to specify the `wrap` allows the preview
     window to wrap the output of the preview command.
 - `--preview-window wrap:hidden` to hide the preview window at startup, later
     it can be shown by the action `toggle-preview`.
 .
 ## Fields support
 .
 Normally only plugin users need to understand this.
 .
 For example, you have the data source with the format:
 .
 ```sh
 <filename>:<line number>:<column number>
 ```
 .
 However, you want to search `<filename>` only when typing in queries. That
 means when you type `21`, you want to find a `<filename>` that contains `21`,
 but not matching line number or column number.
 .
 You can use `sk --delimiter ':' --nth 1` to achieve this.
 .
 Also you can use `--with-nth` to re-arrange the order of fields.
 .
 **Range Syntax**
 .
 - `<num>` -- to specify the `num`-th fields, starting with 1.
 - `start..` -- starting from the `start`-th fields, and the rest.
 - `..end` -- starting from the `0`-th field, all the way to `end`-th field,
     including `end`.
 - `start..end` -- starting from `start`-th field, all the way to `end`-th
     field, including `end`.
 .
 ## Use as a library
 .
 Skim can be used as a library in your Rust crates.
 .
 First, add skim into your `Cargo.toml`:
 .
 ```toml
 [dependencies]
 skim = "*"
 ```
 .
 Then try to run this simple example:
 .
 ```rust
 extern crate skim;
 use skim::prelude::*;
 use std::io::Cursor;
 .
 pub fn main() {
     let options = SkimOptionsBuilder::default()
         .height(Some("50%"))
         .multi(true)
         .build()
         .unwrap();
 .
     let input = "aaaaa\nbbbb\nccc".to_string();
 .
     // `SkimItemReader` is a helper to turn any `BufRead` into a stream of
 `SkimItem`
     // `SkimItem` was implemented for `AsRef<str>` by default
     let item_reader = SkimItemReader::default();
     let items = item_reader.of_bufread(Cursor::new(input));
 .
     // `run_with` would read and show items from the stream
     let selected_items = Skim::run_with(&options, Some(items))
         .map(|out| out.selected_items)
         .unwrap_or_else(|| Vec::new());
 .
     for item in selected_items.iter() {
         print!("{}{}", item.output(), "\n");
     }
 }
 ```
 .
 Given an `Option<SkimItemReceiver>`, skim will read items accordingly, do its
 job and bring us back the user selection including the selected items, the
 query, etc. Note that:
 .
 - `SkimItemReceiver` is `crossbeam::channel::Receiver<Arc<dyn SkimItem>>`
 - If it is none, it will invoke the given command and read items from command
 output
 - Otherwise, it will read the items from the (crossbeam) channel.
 .
 Trait `SkimItem` is provided to customize how a line could be displayed,
 compared and previewed. It is implemented by default for `AsRef<str>`
 .
 Plus, `SkimItemReader` is a helper to convert a `BufRead` into
 `SkimItemReceiver` (we can easily turn a `File` for `String` into `BufRead`).
 So that you could deal with strings or files easily.
 .
 Check more examples under
 [examples/](https://github.com/lotabout/skim/tree/master/examples) directory.
 .
 # FAQ
 .
 ## How to ignore files?
 .
 Skim invokes `find .` to fetch a list of files for filtering. You can override
 that by setting the environment variable `SKIM_DEFAULT_COMMAND`. For example:
 .
 ```sh
 SKIM_DEFAULT_COMMAND="fd --type f || git ls-tree -r --name-only HEAD || rg
 --files || find ."
 sk
 ```
 .
 You could put it in your `.bashrc` or `.zshrc` if you like it to be default.
 .
 ## Some files are not shown in Vim plugin
 .
 If you use the Vim plugin and execute the `:SK` command, you might find some
 of your files not shown.
 .
 As described in [#3](https://github.com/lotabout/skim/issues/3), in the Vim
 plugin, `SKIM_DEFAULT_COMMAND` is set to the command by default:
 .
 ```vim
 let $SKIM_DEFAULT_COMMAND = "git ls-tree -r --name-only HEAD || rg --files ||
 ag -l -g \"\" || find ."
 ```
 .
 That means, the files not recognized by git will not shown. Either override the
 default with `let $SKIM_DEFAULT_COMMAND = ''` or find the missing file by
 yourself.
 .
 # Differences to fzf
 .
 [fzf](https://github.com/junegunn/fzf) is a command-line fuzzy finder written
 in Go and [skim](https://github.com/lotabout/skim) tries to implement a new one
 in Rust!
 .
 This project is written from scratch. Some decisions of implementation are
 different from fzf. For example:
 .
 1. `skim` is a binary as well as a library while fzf is only a binary.
 2. `skim` has an interactive mode.
 3. `skim` supports pre-selection
 4. The fuzzy search algorithm is different.
 5. ~~UI of showing matched items. `fzf` will show only the range matched while
    `skim` will show each character matched.~~ (fzf has this now)
 6. ~~`skim`'s range syntax is Git style~~: now it is the same with fzf.
 .
 # How to contribute
 .
 [Create new issues](https://github.com/lotabout/skim/issues/new) if you meet
 any bugs
 or have any ideas. Pull requests are warmly welcomed.
 .
 # Troubleshooting
 .
 ## No line feed issues with nix , FreeBSD, termux
 .
 If you encounter display issues like:
 .
 ```bash
 $ for n in {1..10}; do echo "$n"; done | sk
   0/10 0/0.> 10/10  10  9  8  7  6  5  4  3  2> 1
 ```
 .
 For example
 .
 - <https://github.com/lotabout/skim/issues/412>
 - <https://github.com/lotabout/skim/issues/455>
 .
 You need to set TERMINFO or TERMINFO_DIRS to the path to a correct terminfo
 database path
 .
 For example, with termux, you can add in your bashr:
 .
 ```
 export TERMINFO=/data/data/com.termux/files/usr/share/terminfo
 ```

Package: two-percent
Version: 0.12.7-1
Architecture: amd64
Maintainer: Zhang Jinzhou <lotabout@gmail.com>
Installed-Size: 5167
Depends: libc6 (>= 2.29)
Filename: ./two-percent_0.12.7-1_amd64.deb
Size: 1506428
MD5sum: 0f3923e448bb02b4554fb9323d38e193
SHA1: d58020390c8ccbdead676ea313fe9825d08787f2
SHA256: d671d7db6ab8b35decabe58865255d3d275f9d2dd847daf00c1cc02de88e3b53
Priority: optional
Homepage: https://github.com/kimono-koans/two_percent
Description: Fuzzy Finder in rust!
 <p align="center">
   <a href="https://crates.io/crates/skim">
     <img src="https://img.shields.io/crates/v/skim.svg" alt="Crates.io" />
   </a>
   <a
 href="https://github.com/lotabout/skim/actions?query=workflow%3A%22Build+%26+Test%22">
     <img
 src="https://github.com/lotabout/skim/workflows/Build%20&%20Test/badge.svg"
 alt="Build & Test" />
   </a>
   <a href="https://repology.org/project/skim/versions">
     <img src="https://repology.org/badge/tiny-repos/skim.svg" alt="Packaging
 status" />
   </a>
   <a href="https://discord.gg/23PuxttufP">
     <img alt="Skim Discord"
 src="https://img.shields.io/discord/1031830957432504361?label=&color=7389d8&labelColor=6a7ec2&logoColor=ffffff&logo=discord"
 />
   </a>
 </p>
 .
 *Note: `two_percent` is a fork of
 [skim](https://github.com/lotabout/skim/tree/291fc34c58b1670a5e8c95f1e8f930b82c030b19)
 for use with [httm](https://github.com/kimono-koans/httm).*
 .
 > Life is short, skim!
 .
 Half of our life is spent on navigation: files, lines, commands… You need
 skim!
 It is a general fuzzy finder that saves you time.
 .
 [![skim
 demo](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm.svg)](https://asciinema.org/a/pIfwazaM0mTHA8F7qRbjrqOnm)
 .
 skim provides a single executable: `sk`. Basically anywhere you would want to
 use
 `grep`, try `sk` instead.
 .
 # Table of contents
 .
 - [Installation](#installation)
 - [Usage](#usage)
   - [As Filter](#as-filter)
   - [As Interactive Interface](#as-interactive-interface)
   - [Key Bindings](#key-bindings)
   - [Search Syntax](#search-syntax)
   - [Exit code](#exit-code)
 - [Customization](#customization)
   - [Keymap to redefine](#keymap)
   - [Sort Criteria](#sort-criteria)
   - [Color Scheme](#color-scheme)
   - [Misc](#misc)
 - [Advance Topics](#advance-topics)
   - [Interactive Mode](#interactive-mode)
   - [Executing external programs](#executing-external-programs)
   - [Preview Window](#preview-window)
   - [Fields Support](#fields-support)
   - [Use as a Library](#use-as-a-library)
 - [FAQ](#faq)
   - [How to ignore files?](#how-to-ignore-files)
   - [Some files are not shown in vim
 plugin](#some-files-are-not-shown-in-vim-plugin)
 - [Differences to fzf](#differences-to-fzf)
 - [How to contribute](#how-to-contribute)
 .
 # Installation
 .
 The skim project contains several components:
 .
 1. `sk` executable -- the core.
 2. `sk-tmux` -- script for launching `sk` in a tmux pane.
 3. Vim/Nvim plugin -- to call `sk` inside Vim/Nvim. check
 [skim.vim](https://github.com/lotabout/skim.vim) for more Vim support.
 .
 ## Package Managers
 .
 | Distribution   | Package Manager   | Command                      |
 | -------------- | ----------------- | ---------------------------- |
 | macOS          | Homebrew          | `brew install sk`            |
 | macOS          | MacPorts          | `sudo port install skim`     |
 | Fedora         | dnf               | `dnf install skim`           |
 | Alpine         | apk               | `apk add skim`               |
 | Arch           | pacman            | `pacman -S skim`             |
 | Gentoo         | Portage           | `emerge --ask app-misc/skim` |
 .
 See [repology](https://repology.org/project/skim/versions) for a comprehensive
 overview of package availability.
 .
 ## Install as Vim plugin
 .
 Via vim-plug (recommended):
 .
 ```vim
 Plug 'lotabout/skim', { 'dir': '~/.skim', 'do': './install' }
 ```
 .
 ## Hard Core
 .
 Any of the following applies:
 .
 - Using Git
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     ~/.skim/install
     ```
 .
 - Using Binary: directly [download the sk
 executable](https://github.com/lotabout/skim/releases).
 - Install from [crates.io](https://crates.io/): `cargo install skim`
 - Build Manually
 .
     ```sh
     git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim
     cd ~/.skim
     cargo install
     cargo build --release
     # put the resulting `target/release/sk` executable on your PATH.
     ```
 .
 # Usage
 .
 skim can be used as a general filter (like `grep`) or as an interactive
 interface for invoking commands.
 .
 ## As filter
 .
 Try the following
 .
 ```bash
 # directly invoke skim
 sk
 .
 # or pipe some input to it: (press TAB key select multiple items with -m
 enabled)
 vim $(find . -name "*.rs" | sk -m)
 ```
 .
 The above command will allow you to select files with ".rs" extension and open
 the ones you selected in Vim.
 .
 ## As Interactive Interface
 .
 `skim` can invoke other commands dynamically. Normally you would want to
 integrate it with [grep](https://www.gnu.org/software/grep/),
 [ack](https://github.com/petdance/ack2),
 [ag](https://github.com/ggreer/the_silver_searcher), or
 [rg](https://github.com/BurntSushi/ripgrep) for searching contents in a
 project directory:
 .
 ```sh
 # works with grep
 sk --ansi -i -c 'grep -rI --color=always --line-number "{}" .'
 # works with ack
 sk --ansi -i -c 'ack --color "{}"'
 # works with ag
 sk --ansi -i -c 'ag --color "{}"'
 # works with rg
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 ![interactive mode
 demo](https://cloud.githubusercontent.com/assets/1527040/21603930/655d859a-d1db-11e6-9fec-c25099d30a12.gif)
 .
 ## Key Bindings
 .
 Some commonly used key bindings:
 .
 | Key               | Action                                     |
 |------------------:|--------------------------------------------|
 | Enter             | Accept (select current one and quit)       |
 | ESC/Ctrl-G        | Abort                                      |
 | Ctrl-P/Up         | Move cursor up                             |
 | Ctrl-N/Down       | Move cursor Down                           |
 | TAB               | Toggle selection and move down (with `-m`) |
 | Shift-TAB         | Toggle selection and move up (with `-m`)   |
 .
 For full list of key bindings, check out the [man
 page](https://github.com/lotabout/skim/blob/master/man/man1/sk.1) (`man sk`).
 .
 ## Search Syntax
 .
 `skim` borrowed `fzf`'s syntax for matching items:
 .
 | Token    | Match type                 | Description                       |
 |----------|----------------------------|-----------------------------------|
 | `text`   | fuzzy-match                | items that match `text`           |
 | `^music` | prefix-exact-match         | items that start with `music`     |
 | `.mp3$`  | suffix-exact-match         | items that end with `.mp3`        |
 | `'wild`  | exact-match (quoted)       | items that include `wild`         |
 | `!fire`  | inverse-exact-match        | items that do not include `fire`  |
 | `!.mp3$` | inverse-suffix-exact-match | items that do not end with `.mp3` |
 .
 `skim` also supports the combination of tokens.
 .
 - Whitespace has the meaning of `AND`. With the term `src main`, `skim` will
 search
     for items that match **both** `src` and `main`.
 - ` | ` means `OR` (note the spaces around `|`). With the term `.md$ |
     .markdown$`, `skim` will search for items ends with either `.md` or
     `.markdown`.
 - `OR` has higher precedence. So `readme .md$ | .markdown$` is grouped into
     `readme AND (.md$ OR .markdown$)`.
 .
 In case that you want to use regular expressions, `skim` provides `regex` mode:
 .
 ```sh
 sk --regex
 ```
 .
 You can switch to `regex` mode dynamically by pressing `Ctrl-R` (Rotate Mode).
 .
 ## exit code
 .
 | Exit Code | Meaning                           |
 |-----------|-----------------------------------|
 | 0         | Exit normally                     |
 | 1         | No Match found                    |
 | 130       | Abort by Ctrl-C/Ctrl-G/ESC/etc... |
 .
 # Customization
 .
 The doc here is only a preview, please check the man page (`man sk`) for a full
 list of options.
 .
 ## Keymap
 .
 Specify the bindings with comma separated pairs (no space allowed), example:
 .
 ```sh
 sk --bind 'alt-a:select-all,alt-d:deselect-all'
 ```
 .
 Additionally, use `+` to concatenate actions, such as `execute-silent(echo {} |
 pbcopy)+abort`.
 .
 See the *KEY BINDINGS* section of the man page for details.
 .
 ## Sort Criteria
 .
 There are five sort keys for results: `score, index, begin, end, length`, you
 can
 specify how the records are sorted by `sk --tiebreak score,index,-begin` or any
 other order you want.
 .
 ## Color Scheme
 .
 It is a high chance that you are a better artist than me. Luckily you won't
 be stuck with the default colors, `skim` supports customization of the color
 scheme.
 .
 ```sh
 --color=[BASE_SCHEME][,COLOR:ANSI]
 ```
 .
 The configuration of colors starts with the name of the base color scheme,
 followed by custom color mappings. For example:
 .
 ```sh
 sk --color=current_bg:24
 sk --color=light,fg:232,bg:255,current_bg:116,info:27
 ```
 .
 See `--color` option in the man page for details.
 .
 ## Misc
 .
 - `--ansi`: to parse ANSI color codes (e.g., `\e[32mABC`) of the data source
 - `--regex`: use the query as regular expression to match the data source
 .
 # Advanced Topics
 .
 ## Interactive mode
 .
 With "interactive mode", you could invoke command dynamically. Try out:
 .
 ```sh
 sk --ansi -i -c 'rg --color=always --line-number "{}"'
 ```
 .
 How it works?
 .
 ![skim's interactive
 mode](https://user-images.githubusercontent.com/1527040/53381293-461ce380-39ab-11e9-8e86-7c3bbfd557bc.png)
 .
 - Skim could accept two kinds of source: command output or piped input
 - Skim has two kinds of prompts: A query prompt to specify the query pattern
 and a
     command prompt to specify the "arguments" of the command
 - `-c` is used to specify the command to execute while defaults to
 `SKIM_DEFAULT_COMMAND`
 - `-i` is to tell skim open command prompt on startup, which will show `c>` by
 default.
 .
 If you want to further narrow down the results returned by the command, press
 `Ctrl-Q` to toggle interactive mode.
 .
 ## Executing external programs
 .
 You can set up key bindings for starting external processes without leaving
 skim (`execute`, `execute-silent`).
 .
 ```sh
 # Press F1 to open the file with less without leaving skim
 # Press CTRL-Y to copy the line to clipboard and aborts skim (requires pbcopy)
 sk --bind 'f1:execute(less -f {}),ctrl-y:execute-silent(echo {} |
 pbcopy)+abort'
 ```
 .
 ## Preview Window
 .
 This is a great feature of fzf that skim borrows. For example, we use 'ag' to
 find the matched lines, once we narrow down to the target lines, we want to
 finally decide which lines to pick by checking the context around the line.
 `grep` and `ag` has an option `--context`, skim can do better with preview
 window. For example:
 .
 ```sh
 sk --ansi -i -c 'ag --color "{}"' --preview "preview.sh {}"
 ```
 .
 (Note the
 [preview.sh](https://github.com/junegunn/fzf.vim/blob/master/bin/preview.sh) is
 a script to print the context given filename:lines:columns)
 You got things like this:
 .
 ![preview
 demo](https://user-images.githubusercontent.com/1527040/30677573-0cee622e-9ebf-11e7-8316-c741324ecb3a.png)
 .
 ### How does it work?
 .
 If the preview command is given by the `--preview` option, skim will replace
 the
 `{}` with the current highlighted line surrounded by single quotes, call the
 command to get the output, and print the output on the preview window.
 .
 Sometimes you don't need the whole line for invoking the command. In this case
 you can use `{}`, `{1..}`, `{..3}` or `{1..5}` to select the fields. The
 syntax is explained in the section "Fields Support".
 .
 Last, you might want to configure the position of preview windows, use
 `--preview-window`.
 .
 - `--preview-window up:30%` to put the window in the up position with height
     30% of the total height of skim.
 - `--preview-window left:10:wrap`, to specify the `wrap` allows the preview
     window to wrap the output of the preview command.
 - `--preview-window wrap:hidden` to hide the preview window at startup, later
     it can be shown by the action `toggle-preview`.
 .
 ## Fields support
 .
 Normally only plugin users need to understand this.
 .
 For example, you have the data source with the format:
 .
 ```sh
 <filename>:<line number>:<column number>
 ```
 .
 However, you want to search `<filename>` only when typing in queries. That
 means when you type `21`, you want to find a `<filename>` that contains `21`,
 but not matching line number or column number.
 .
 You can use `sk --delimiter ':' --nth 1` to achieve this.
 .
 Also you can use `--with-nth` to re-arrange the order of fields.
 .
 **Range Syntax**
 .
 - `<num>` -- to specify the `num`-th fields, starting with 1.
 - `start..` -- starting from the `start`-th fields, and the rest.
 - `..end` -- starting from the `0`-th field, all the way to `end`-th field,
     including `end`.
 - `start..end` -- starting from `start`-th field, all the way to `end`-th
     field, including `end`.
 .
 ## Use as a library
 .
 Skim can be used as a library in your Rust crates.
 .
 First, add skim into your `Cargo.toml`:
 .
 ```toml
 [dependencies]
 skim = "*"
 ```
 .
 Then try to run this simple example:
 .
 ```rust
 extern crate skim;
 use skim::prelude::*;
 use std::io::Cursor;
 .
 pub fn main() {
     let options = SkimOptionsBuilder::default()
         .height(Some("50%"))
         .multi(true)
         .build()
         .unwrap();
 .
     let input = "aaaaa\nbbbb\nccc".to_string();
 .
     // `SkimItemReader` is a helper to turn any `BufRead` into a stream of
 `SkimItem`
     // `SkimItem` was implemented for `AsRef<str>` by default
     let item_reader = SkimItemReader::default();
     let items = item_reader.of_bufread(Cursor::new(input));
 .
     // `run_with` would read and show items from the stream
     let selected_items = Skim::run_with(&options, Some(items))
         .map(|out| out.selected_items)
         .unwrap_or_else(|| Vec::new());
 .
     for item in selected_items.iter() {
         print!("{}{}", item.output(), "\n");
     }
 }
 ```
 .
 Given an `Option<SkimItemReceiver>`, skim will read items accordingly, do its
 job and bring us back the user selection including the selected items, the
 query, etc. Note that:
 .
 - `SkimItemReceiver` is `crossbeam::channel::Receiver<Arc<dyn SkimItem>>`
 - If it is none, it will invoke the given command and read items from command
 output
 - Otherwise, it will read the items from the (crossbeam) channel.
 .
 Trait `SkimItem` is provided to customize how a line could be displayed,
 compared and previewed. It is implemented by default for `AsRef<str>`
 .
 Plus, `SkimItemReader` is a helper to convert a `BufRead` into
 `SkimItemReceiver` (we can easily turn a `File` for `String` into `BufRead`).
 So that you could deal with strings or files easily.
 .
 Check more examples under
 [examples/](https://github.com/lotabout/skim/tree/master/examples) directory.
 .
 # FAQ
 .
 ## How to ignore files?
 .
 Skim invokes `find .` to fetch a list of files for filtering. You can override
 that by setting the environment variable `SKIM_DEFAULT_COMMAND`. For example:
 .
 ```sh
 SKIM_DEFAULT_COMMAND="fd --type f || git ls-tree -r --name-only HEAD || rg
 --files || find ."
 sk
 ```
 .
 You could put it in your `.bashrc` or `.zshrc` if you like it to be default.
 .
 ## Some files are not shown in Vim plugin
 .
 If you use the Vim plugin and execute the `:SK` command, you might find some
 of your files not shown.
 .
 As described in [#3](https://github.com/lotabout/skim/issues/3), in the Vim
 plugin, `SKIM_DEFAULT_COMMAND` is set to the command by default:
 .
 ```vim
 let $SKIM_DEFAULT_COMMAND = "git ls-tree -r --name-only HEAD || rg --files ||
 ag -l -g \"\" || find ."
 ```
 .
 That means, the files not recognized by git will not shown. Either override the
 default with `let $SKIM_DEFAULT_COMMAND = ''` or find the missing file by
 yourself.
 .
 # Differences to fzf
 .
 [fzf](https://github.com/junegunn/fzf) is a command-line fuzzy finder written
 in Go and [skim](https://github.com/lotabout/skim) tries to implement a new one
 in Rust!
 .
 This project is written from scratch. Some decisions of implementation are
 different from fzf. For example:
 .
 1. `skim` is a binary as well as a library while fzf is only a binary.
 2. `skim` has an interactive mode.
 3. `skim` supports pre-selection
 4. The fuzzy search algorithm is different.
 5. ~~UI of showing matched items. `fzf` will show only the range matched while
    `skim` will show each character matched.~~ (fzf has this now)
 6. ~~`skim`'s range syntax is Git style~~: now it is the same with fzf.
 .
 # How to contribute
 .
 [Create new issues](https://github.com/lotabout/skim/issues/new) if you meet
 any bugs
 or have any ideas. Pull requests are warmly welcomed.
 .
 # Troubleshooting
 .
 ## No line feed issues with nix , FreeBSD, termux
 .
 If you encounter display issues like:
 .
 ```bash
 $ for n in {1..10}; do echo "$n"; done | sk
   0/10 0/0.> 10/10  10  9  8  7  6  5  4  3  2> 1
 ```
 .
 For example
 .
 - <https://github.com/lotabout/skim/issues/412>
 - <https://github.com/lotabout/skim/issues/455>
 .
 You need to set TERMINFO or TERMINFO_DIRS to the path to a correct terminfo
 database path
 .
 For example, with termux, you can add in your bashr:
 .
 ```
 export TERMINFO=/data/data/com.termux/files/usr/share/terminfo
 ```

